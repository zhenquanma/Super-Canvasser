{"version":3,"file":"angular-maps.umd.js.map","sources":["ng://angular-maps/src/models/info-window.ts","ng://angular-maps/src/models/marker.ts","ng://angular-maps/src/models/layer.ts","ng://angular-maps/src/models/polygon.ts","ng://angular-maps/src/models/polyline.ts",null,"ng://angular-maps/src/models/spider-cluster-marker.ts","ng://angular-maps/src/models/canvas-overlay.ts","ng://angular-maps/src/models/bing/bing-layer.ts","ng://angular-maps/src/services/bing/bing-conversions.ts","ng://angular-maps/src/models/bing/bing-marker.ts","ng://angular-maps/src/models/bing/bing-spider-cluster-marker.ts","ng://angular-maps/src/models/bing/bing-cluster-layer.ts","ng://angular-maps/src/models/bing/bing-info-window.ts","ng://angular-maps/src/models/map-label.ts","ng://angular-maps/src/models/bing/bing-label.ts","ng://angular-maps/src/models/bing/bing-polygon.ts","ng://angular-maps/src/models/bing/bing-polyline.ts","ng://angular-maps/src/models/bing/bing-events-lookup.ts","ng://angular-maps/src/models/bing/bing-canvas-overlay.ts","ng://angular-maps/src/services/google/google-map-types.ts","ng://angular-maps/src/services/google/google-conversions.ts","ng://angular-maps/src/models/google/google-info-window.ts","ng://angular-maps/src/models/google/google-marker.ts","ng://angular-maps/src/models/google/google-label.ts","ng://angular-maps/src/models/google/google-polygon.ts","ng://angular-maps/src/models/google/google-polyline.ts","ng://angular-maps/src/models/google/google-events-lookup.ts","ng://angular-maps/src/models/google/google-canvas-overlay.ts","ng://angular-maps/src/services/mapservicefactory.ts","ng://angular-maps/src/services/map.service.ts","ng://angular-maps/src/services/marker.service.ts","ng://angular-maps/src/services/infobox.service.ts","ng://angular-maps/src/services/layer.service.ts","ng://angular-maps/src/services/polygon.service.ts","ng://angular-maps/src/services/polyline.service.ts","ng://angular-maps/src/services/cluster.service.ts","ng://angular-maps/src/components/infobox-action.ts","ng://angular-maps/src/components/infobox.ts","ng://angular-maps/src/components/map-marker.ts","ng://angular-maps/src/components/map.ts","ng://angular-maps/src/components/map-layer.ts","ng://angular-maps/src/components/cluster-layer.ts","ng://angular-maps/src/components/map-polygon.ts","ng://angular-maps/src/components/map-polyline.ts","ng://angular-maps/src/components/map-marker-layer.ts","ng://angular-maps/src/components/map-polygon-layer.ts","ng://angular-maps/src/components/map-polyline-layer.ts","ng://angular-maps/src/services/mapapiloader.ts","ng://angular-maps/src/services/bing/bing-map.api-loader.service.ts","ng://angular-maps/src/services/bing/bing-infobox.service.ts","ng://angular-maps/src/services/bing/bing-marker.service.ts","ng://angular-maps/src/services/bing/bing-map.service.ts","ng://angular-maps/src/services/bing/bing-layer-base.ts","ng://angular-maps/src/services/bing/bing-layer.service.ts","ng://angular-maps/src/services/bing/bing-cluster.service.ts","ng://angular-maps/src/services/bing/bing-polygon.service.ts","ng://angular-maps/src/services/bing/bing-polyline.service.ts","ng://angular-maps/src/services/bing/bing-map.service.factory.ts","ng://angular-maps/src/services/google/google-layer-base.ts","ng://angular-maps/src/services/google/google-cluster.service.ts","ng://angular-maps/src/services/google/google-infobox.service.ts","ng://angular-maps/src/models/google/google-layer.ts","ng://angular-maps/src/services/google/google-layer.service.ts","ng://angular-maps/src/services/google/google-map-api-loader.service.ts","ng://angular-maps/src/services/google/google-marker.service.ts","ng://angular-maps/src/models/google/google-marker-clusterer.ts","ng://angular-maps/src/services/google/google-map.service.ts","ng://angular-maps/src/services/google/google-polygon.service.ts","ng://angular-maps/src/services/google/google-polyline.service.ts","ng://angular-maps/src/services/google/google-map.service.factory.ts","ng://angular-maps/index.ts"],"sourcesContent":["import { ILatLong } from '../interfaces/ilatlong';\r\nimport { IInfoWindowOptions } from '../interfaces/iinfo-window-options';\r\n\r\nexport abstract class InfoWindow {\r\n\r\n    /**\r\n     * Gets whether the info box is currently open.\r\n     *\r\n     * @readonly\r\n     * @abstract\r\n     * @memberof InfoWindow\r\n     */\r\n    public abstract get IsOpen(): boolean;\r\n\r\n    /**\r\n     * Get the underlying native primitive of the implementation.\r\n     *\r\n     * @readonly\r\n     * @abstract\r\n     * @memberof InfoWindow\r\n     */\r\n    public abstract get NativePrimitve(): any;\r\n\r\n    /**\r\n     * Adds an event listener to the info window.\r\n     *\r\n     * @abstract\r\n     * @param eventType - String containing the event for which to register the listener (e.g. \"click\")\r\n     * @param fn - Delegate invoked when the event occurs.\r\n     *\r\n     * @memberof InfoWindow\r\n     */\r\n    public abstract AddListener(eventType: string, fn: Function): void;\r\n\r\n    /**\r\n     * Closes the info window.\r\n     *\r\n     * @abstract\r\n     *\r\n     * @memberof InfoWindow\r\n     */\r\n    public abstract Close(): void ;\r\n\r\n    /**\r\n     * Gets the position of the info window.\r\n     *\r\n     * @abstract\r\n     * @returns - Returns the geo coordinates of the info window.\r\n     *\r\n     * @memberof InfoWindow\r\n     */\r\n    public abstract GetPosition(): ILatLong;\r\n\r\n    /**\r\n     * Opens the info window.\r\n     *\r\n     * @abstract\r\n     *\r\n     * @memberof InfoWindow\r\n     */\r\n    public abstract Open(): void;\r\n\r\n    /**\r\n     * Sets the info window options.\r\n     *\r\n     * @abstract\r\n     * @param options - Info window options to set. The options will be merged with any existing options.\r\n     *\r\n     * @memberof InfoWindow\r\n     */\r\n    public abstract SetOptions(options: IInfoWindowOptions): void;\r\n\r\n    /**\r\n     * Sets the info window position.\r\n     *\r\n     * @abstract\r\n     * @param position - Geo coordinates to move the anchor of the info window to.\r\n     *\r\n     * @memberof InfoWindow\r\n     */\r\n    public abstract SetPosition(position: ILatLong): void;\r\n}\r\n","import { ILatLong } from '../interfaces/ilatlong';\r\nimport { IMarkerOptions } from '../interfaces/imarker-options';\r\nimport { IMarkerIconInfo } from '../interfaces/imarker-icon-info';\r\nimport { IPoint } from '../interfaces/ipoint';\r\nimport { ISize } from '../interfaces/isize';\r\nimport { MarkerTypeId } from '../models/marker-type-id';\r\n\r\n/**\r\n * This interface defines the contract for an icon cache entry.\r\n */\r\ninterface IMarkerIconCacheEntry {\r\n    /**\r\n     * The icon string of the cache entry.\r\n     *\r\n     * @memberof IMarkerIconCacheEntry\r\n     */\r\n    markerIconString: string;\r\n\r\n    /**\r\n     * The Size of the icon.\r\n     *\r\n     * @memberof IMarkerIconCacheEntry\r\n    * */\r\n    markerSize: ISize;\r\n}\r\n\r\n/**\r\n * This class defines the contract for a marker.\r\n *\r\n * @export\r\n * @abstract\r\n */\r\nexport abstract class Marker {\r\n\r\n    ///\r\n    /// Field definitions\r\n    ///\r\n\r\n    /**\r\n     * Caches concrete img elements for marker icons to accelerate patining.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    private static ImageElementCache: Map<string, HTMLImageElement> = new Map<string, HTMLImageElement>();\r\n\r\n\r\n    /**\r\n     * Used to cache generated markers for performance and reusability.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    private static MarkerCache: Map<string, IMarkerIconCacheEntry> = new Map<string, IMarkerIconCacheEntry>();\r\n\r\n    /**\r\n     * Creates a marker based on the marker info. In turn calls a number of internal members to\r\n     * create the actual marker.\r\n     *\r\n     * @param iconInfo - icon information. Depending on the marker type, various properties\r\n     * need to be present. For performance, it is recommended to use an id for markers that are common to facilitate\r\n     * reuse.\r\n     * @param callback - a callback that is invoked on markers that require asyncronous\r\n     * processing during creation. For markers that do not require async processing, this parameter is ignored.\r\n     * @returns - a string or a promise for a string containing\r\n     * a data url with the marker image.\r\n     * @memberof Marker\r\n     */\r\n    public static CreateMarker(iconInfo: IMarkerIconInfo): string|Promise<{icon: string, iconInfo: IMarkerIconInfo}> {\r\n        switch (iconInfo.markerType) {\r\n            case MarkerTypeId.CanvasMarker: return Marker.CreateCanvasMarker(iconInfo);\r\n            case MarkerTypeId.DynmaicCircleMarker: return Marker.CreateDynmaicCircleMarker(iconInfo);\r\n            case MarkerTypeId.FontMarker: return Marker.CreateFontBasedMarker(iconInfo);\r\n            case MarkerTypeId.RotatedImageMarker: return Marker.CreateRotatedImageMarker(iconInfo);\r\n            case MarkerTypeId.RoundedImageMarker: return Marker.CreateRoundedImageMarker(iconInfo);\r\n            case MarkerTypeId.ScaledImageMarker: return Marker.CreateScaledImageMarker(iconInfo);\r\n            case MarkerTypeId.Custom: throw Error('Custom Marker Creators are not currently supported.');\r\n        }\r\n        throw Error('Unsupported marker type: ' + iconInfo.markerType);\r\n    }\r\n\r\n    /**\r\n     * Obtains a shared img element for a marker icon to prevent unecessary creation of\r\n     * DOM items. This has sped up large scale makers on Bing Maps by about 70%\r\n     * @param icon - The icon string (url, data url, svg) for which to obtain the image.\r\n     * @returns - The obtained image element.\r\n     * @memberof Marker\r\n     */\r\n    public static GetImageForMarker(icon: string): HTMLImageElement {\r\n        if (icon == null || icon === '' ) { return  null; }\r\n\r\n        let img: HTMLImageElement = null;\r\n        img = Marker.ImageElementCache.get(icon);\r\n        if (img != null) { return img; }\r\n\r\n        if (typeof(document) !== 'undefined' && document != null) {\r\n            img = document.createElement('img');\r\n            img.src = icon;\r\n            Marker.ImageElementCache.set(icon, img);\r\n        }\r\n        return img;\r\n    }\r\n\r\n    /**\r\n     * Creates a canvased based marker using the point collection contained in the iconInfo parameter.\r\n     *\r\n     * @protected\r\n     * @param iconInfo - {@link IMarkerIconInfo} containing the information necessary to create the icon.\r\n     * @returns - String with the data url for the marker image.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    protected static CreateCanvasMarker(iconInfo: IMarkerIconInfo): string {\r\n        if (document == null) { throw Error('Document context (window.document) is required for canvas markers.'); }\r\n        if (iconInfo == null || iconInfo.size == null || iconInfo.points == null) {\r\n            throw Error('IMarkerIconInfo.size, and IMarkerIConInfo.points are required for canvas markers.');\r\n        }\r\n        if (iconInfo.id != null && Marker.MarkerCache.has(iconInfo.id)) {\r\n            const mi: IMarkerIconCacheEntry = Marker.MarkerCache.get(iconInfo.id);\r\n            iconInfo.size = mi.markerSize;\r\n            return mi.markerIconString;\r\n        }\r\n\r\n        const c: HTMLCanvasElement = document.createElement('canvas');\r\n        const ctx: CanvasRenderingContext2D = c.getContext('2d');\r\n        c.width = iconInfo.size.width;\r\n        c.height = iconInfo.size.height;\r\n        if (iconInfo.rotation) {\r\n            // Offset the canvas such that we will rotate around the center of our arrow\r\n            ctx.translate(c.width * 0.5, c.height * 0.5);\r\n            // Rotate the canvas by the desired heading\r\n            ctx.rotate(iconInfo.rotation * Math.PI / 180);\r\n            // Return the canvas offset back to it's original position\r\n            ctx.translate(-c.width * 0.5, -c.height * 0.5);\r\n        }\r\n\r\n        ctx.fillStyle = iconInfo.color || 'red';\r\n\r\n        // Draw a path in the shape of an arrow.\r\n        ctx.beginPath();\r\n        if (iconInfo.drawingOffset) { ctx.moveTo(iconInfo.drawingOffset.x, iconInfo.drawingOffset.y); }\r\n        iconInfo.points.forEach((p: IPoint) => { ctx.lineTo(p.x, p.y); });\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.stroke();\r\n\r\n        const s: string = c.toDataURL();\r\n        if (iconInfo.id != null) { Marker.MarkerCache.set(iconInfo.id, { markerIconString: s, markerSize: iconInfo.size }); }\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Creates a circle marker image using information contained in the iconInfo parameter.\r\n     *\r\n     * @protected\r\n     * @param iconInfo - {@link IMarkerIconInfo} containing the information necessary to create the icon.\r\n     * @returns - String with the data url for the marker image.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    protected static CreateDynmaicCircleMarker(iconInfo: IMarkerIconInfo): string {\r\n        if (document == null) { throw Error('Document context (window.document) is required for dynamic circle markers.'); }\r\n        if (iconInfo == null || iconInfo.size == null) { throw Error('IMarkerIconInfo.size is required for dynamic circle markers.'); }\r\n        if (iconInfo.id != null && Marker.MarkerCache.has(iconInfo.id)) {\r\n            const mi: IMarkerIconCacheEntry = Marker.MarkerCache.get(iconInfo.id);\r\n            iconInfo.size = mi.markerSize;\r\n            return mi.markerIconString;\r\n        }\r\n\r\n        const strokeWidth: number = iconInfo.strokeWidth || 0;\r\n        // Create an SVG string of a circle with the specified radius and color.\r\n        const svg: Array<string> = [\r\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"',\r\n            iconInfo.size.width.toString(),\r\n            '\" height=\"',\r\n            iconInfo.size.width.toString(),\r\n            '\"><circle cx=\"',\r\n            (iconInfo.size.width / 2).toString(),\r\n            '\" cy=\"',\r\n            (iconInfo.size.width / 2).toString(),\r\n            '\" r=\"',\r\n            ((iconInfo.size.width / 2) - strokeWidth).toString(),\r\n            '\" stroke=\"',\r\n            iconInfo.color || 'red',\r\n            '\" stroke-width=\"',\r\n            strokeWidth.toString(),\r\n            '\" fill=\"',\r\n            iconInfo.color || 'red',\r\n            '\"/></svg>'\r\n        ];\r\n\r\n        const s: string = svg.join('');\r\n        if (iconInfo.id != null) { Marker.MarkerCache.set(iconInfo.id, { markerIconString: s, markerSize: iconInfo.size }); }\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Creates a font based marker image (such as Font-Awesome), by using information supplied in the parameters (such as Font-Awesome).\r\n     *\r\n     * @protected\r\n     * @param iconInfo - {@link IMarkerIconInfo} containing the information necessary to create the icon.\r\n     * @returns - String with the data url for the marker image.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    protected static CreateFontBasedMarker(iconInfo: IMarkerIconInfo): string {\r\n        if (document == null) { throw Error('Document context (window.document) is required for font based markers'); }\r\n        if (iconInfo == null || iconInfo.fontName == null || iconInfo.fontSize == null) {\r\n            throw Error('IMarkerIconInfo.fontName, IMarkerIconInfo.fontSize and IMarkerIConInfo.text are required for font based markers.');\r\n        }\r\n        if (iconInfo.id != null && Marker.MarkerCache.has(iconInfo.id)) {\r\n            const mi: IMarkerIconCacheEntry = Marker.MarkerCache.get(iconInfo.id);\r\n            iconInfo.size = mi.markerSize;\r\n            return mi.markerIconString;\r\n        }\r\n\r\n        const c: HTMLCanvasElement = document.createElement('canvas');\r\n        const ctx: CanvasRenderingContext2D = c.getContext('2d');\r\n        const font: string = iconInfo.fontSize + 'px ' + iconInfo.fontName;\r\n        ctx.font = font;\r\n\r\n        // Resize canvas based on sie of text.\r\n        const size: TextMetrics = ctx.measureText(iconInfo.text);\r\n        c.width = size.width;\r\n        c.height = iconInfo.fontSize;\r\n\r\n        if (iconInfo.rotation) {\r\n            // Offset the canvas such that we will rotate around the center of our arrow\r\n            ctx.translate(c.width * 0.5, c.height * 0.5);\r\n            // Rotate the canvas by the desired heading\r\n            ctx.rotate(iconInfo.rotation * Math.PI / 180);\r\n            // Return the canvas offset back to it's original position\r\n            ctx.translate(-c.width * 0.5, -c.height * 0.5);\r\n        }\r\n\r\n        // Reset font as it will be cleared by the resize.\r\n        ctx.font = font;\r\n        ctx.textBaseline = 'top';\r\n        ctx.fillStyle = iconInfo.color || 'red';\r\n\r\n        ctx.fillText(iconInfo.text, 0, 0);\r\n        iconInfo.size = { width: c.width, height: c.height };\r\n        const s: string = c.toDataURL();\r\n        if (iconInfo.id != null) { Marker.MarkerCache.set(iconInfo.id, { markerIconString: s, markerSize: iconInfo.size }); }\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Creates an image marker by applying a roation to a supplied image.\r\n     *\r\n     * @protected\r\n     * @param iconInfo - {@link IMarkerIconInfo} containing the information necessary to create the icon.\r\n     * @returns - a string or a promise for a string containing\r\n     * a data url with the marker image. In case of a cached image, the image will be returned, otherwise the promise.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    protected static CreateRotatedImageMarker(iconInfo: IMarkerIconInfo): string|Promise<{icon: string, iconInfo: IMarkerIconInfo}> {\r\n        if (document == null) { throw Error('Document context (window.document) is required for rotated image markers'); }\r\n        if (iconInfo == null || iconInfo.rotation == null || iconInfo.url == null) {\r\n            throw Error('IMarkerIconInfo.rotation, IMarkerIconInfo.url are required for rotated image markers.');\r\n        }\r\n        if (iconInfo.id != null && Marker.MarkerCache.has(iconInfo.id)) {\r\n            const mi: IMarkerIconCacheEntry = Marker.MarkerCache.get(iconInfo.id);\r\n            iconInfo.size = mi.markerSize;\r\n            return mi.markerIconString;\r\n        }\r\n\r\n        const image: HTMLImageElement = new Image();\r\n        const promise: Promise<{icon: string, iconInfo: IMarkerIconInfo}> =\r\n            new Promise<{icon: string, iconInfo: IMarkerIconInfo}>((resolve, reject) => {\r\n            // Allow cross domain image editting.\r\n            image.crossOrigin = 'anonymous';\r\n            image.src = iconInfo.url;\r\n            if (iconInfo.size) {\r\n                image.width = iconInfo.size.width;\r\n                image.height = iconInfo.size.height;\r\n            }\r\n            image.onload = function () {\r\n                const c: HTMLCanvasElement = document.createElement('canvas');\r\n                const ctx: CanvasRenderingContext2D = c.getContext('2d');\r\n                const rads: number = iconInfo.rotation * Math.PI / 180;\r\n\r\n                // Calculate rotated image size.\r\n                c.width = Math.ceil(Math.abs(image.width * Math.cos(rads)) + Math.abs(image.height * Math.sin(rads)));\r\n                c.height = Math.ceil(Math.abs(image.width * Math.sin(rads)) + Math.abs(image.height * Math.cos(rads)));\r\n\r\n                // Move to the center of the canvas.\r\n                ctx.translate(c.width / 2, c.height / 2);\r\n                // Rotate the canvas to the specified angle in degrees.\r\n                ctx.rotate(rads);\r\n                // Draw the image, since the context is rotated, the image will be rotated also.\r\n                ctx.drawImage(image, -image.width / 2, -image.height / 2, image.width, image.height);\r\n                iconInfo.size = { width: c.width, height: c.height };\r\n\r\n                const s: string = c.toDataURL();\r\n                if (iconInfo.id != null) { Marker.MarkerCache.set(iconInfo.id, { markerIconString: s, markerSize: iconInfo.size }); }\r\n                resolve({icon: s, iconInfo: iconInfo});\r\n            };\r\n        });\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Creates a rounded image marker by applying a circle mask to a supplied image.\r\n     *\r\n     * @protected\r\n     * @param iconInfo - {@link IMarkerIconInfo} containing the information necessary to create the icon.\r\n     * @param iconInfo - Callback invoked once marker generation is complete. The callback\r\n     * parameters are the data uri and the IMarkerIconInfo.\r\n     * @returns - a string or a promise for a string containing\r\n     * a data url with the marker image. In case of a cached image, the image will be returned, otherwise the promise.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    protected static CreateRoundedImageMarker(iconInfo: IMarkerIconInfo): string|Promise<{icon: string, iconInfo: IMarkerIconInfo}> {\r\n        if (document == null) { throw Error('Document context (window.document) is required for rounded image markers'); }\r\n        if (iconInfo == null || iconInfo.size == null || iconInfo.url == null) {\r\n            throw Error('IMarkerIconInfo.size, IMarkerIconInfo.url are required for rounded image markers.');\r\n        }\r\n        if (iconInfo.id != null && Marker.MarkerCache.has(iconInfo.id)) {\r\n            const mi: IMarkerIconCacheEntry = Marker.MarkerCache.get(iconInfo.id);\r\n            iconInfo.size = mi.markerSize;\r\n            return mi.markerIconString;\r\n        }\r\n\r\n        const promise: Promise<{icon: string, iconInfo: IMarkerIconInfo}> =\r\n            new Promise<{icon: string, iconInfo: IMarkerIconInfo}>((resolve, reject) => {\r\n            const radius: number = iconInfo.size.width / 2;\r\n            const image: HTMLImageElement = new Image();\r\n            const offset: IPoint = iconInfo.drawingOffset || { x: 0, y: 0 };\r\n\r\n            // Allow cross domain image editting.\r\n            image.crossOrigin = 'anonymous';\r\n            image.src = iconInfo.url;\r\n            image.onload = function () {\r\n                const c: HTMLCanvasElement = document.createElement('canvas');\r\n                const ctx: CanvasRenderingContext2D = c.getContext('2d');\r\n                c.width = iconInfo.size.width;\r\n                c.height = iconInfo.size.width;\r\n\r\n                // Draw a circle which can be used to clip the image, then draw the image.\r\n                ctx.beginPath();\r\n                ctx.arc(radius, radius, radius, 0, 2 * Math.PI, false);\r\n                ctx.fill();\r\n                ctx.clip();\r\n                ctx.drawImage(image, offset.x, offset.y, iconInfo.size.width, iconInfo.size.width);\r\n                iconInfo.size = { width: c.width, height: c.height };\r\n\r\n                const s: string = c.toDataURL();\r\n                if (iconInfo.id != null) { Marker.MarkerCache.set(iconInfo.id, { markerIconString: s, markerSize: iconInfo.size }); }\r\n                resolve({icon: s, iconInfo: iconInfo});\r\n            };\r\n        });\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Creates a scaled image marker by scaling a supplied image by a factor using a canvas.\r\n     *\r\n     * @protected\r\n     * @param iconInfo - {@link IMarkerIconInfo} containing the information necessary to create the icon.\r\n     * @param iconInfo - Callback invoked once marker generation is complete. The callback\r\n     * parameters are the data uri and the IMarkerIconInfo.\r\n     * @returns - a string or a promise for a string containing\r\n     * a data url with the marker image. In case of a cached image, the image will be returned, otherwise the promise.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    protected static CreateScaledImageMarker(iconInfo: IMarkerIconInfo): string|Promise<{icon: string, iconInfo: IMarkerIconInfo}> {\r\n        if (document == null) { throw Error('Document context (window.document) is required for scaled image markers'); }\r\n        if (iconInfo == null || iconInfo.scale == null || iconInfo.url == null) {\r\n            throw Error('IMarkerIconInfo.scale, IMarkerIconInfo.url are required for scaled image markers.');\r\n        }\r\n        if (iconInfo.id != null && Marker.MarkerCache.has(iconInfo.id)) {\r\n            const mi: IMarkerIconCacheEntry = Marker.MarkerCache.get(iconInfo.id);\r\n            iconInfo.size = mi.markerSize;\r\n            return mi.markerIconString;\r\n        }\r\n        const promise: Promise<{icon: string, iconInfo: IMarkerIconInfo}> =\r\n            new Promise<{icon: string, iconInfo: IMarkerIconInfo}>((resolve, reject) => {\r\n            const image: HTMLImageElement = new Image();\r\n\r\n            // Allow cross domain image editting.\r\n            image.crossOrigin = 'anonymous';\r\n            image.src = iconInfo.url;\r\n            image.onload = function () {\r\n                const c: HTMLCanvasElement = document.createElement('canvas');\r\n                const ctx: CanvasRenderingContext2D = c.getContext('2d');\r\n                c.width = image.width * iconInfo.scale;\r\n                c.height = image.height * iconInfo.scale;\r\n\r\n                // Draw a circle which can be used to clip the image, then draw the image.\r\n                ctx.drawImage(image, 0, 0, c.width, c.height);\r\n                iconInfo.size = { width: c.width, height: c.height };\r\n\r\n                const s: string = c.toDataURL();\r\n                if (iconInfo.id != null) { Marker.MarkerCache.set(iconInfo.id, { markerIconString: s, markerSize: iconInfo.size }); }\r\n                resolve({icon: s, iconInfo: iconInfo});\r\n            };\r\n        });\r\n        return promise;\r\n    }\r\n\r\n    ///\r\n    /// Property definitions\r\n    ///\r\n\r\n    /**\r\n     * Indicates that the marker is the first marker in a set.\r\n     *\r\n     * @abstract\r\n     * @memberof Marker\r\n     */\r\n    public abstract get IsFirst(): boolean;\r\n    public abstract set IsFirst(val: boolean);\r\n\r\n    /**\r\n     * Indicates that the marker is the last marker in the set.\r\n     *\r\n     * @abstract\r\n     * @memberof Marker\r\n     */\r\n    public abstract get IsLast(): boolean;\r\n    public abstract set IsLast(val: boolean);\r\n\r\n    /**\r\n     * Gets the Location of the marker\r\n     *\r\n     * @readonly\r\n     * @abstract\r\n     * @memberof Marker\r\n     */\r\n    public abstract get Location(): ILatLong;\r\n\r\n    /**\r\n     * Gets the marker metadata.\r\n     *\r\n     * @readonly\r\n     * @abstract\r\n     * @memberof Marker\r\n     */\r\n    public abstract get Metadata(): Map<string, any>;\r\n\r\n    /**\r\n     * Gets the native primitve implementing the marker (e.g. Microsoft.Maps.Pushpin)\r\n     *\r\n     * @readonly\r\n     * @abstract\r\n     * @memberof Marker\r\n     */\r\n    public abstract get NativePrimitve(): any;\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Adds an event listener to the marker.\r\n     *\r\n     * @abstract\r\n     * @param eventType - String containing the event for which to register the listener (e.g. \"click\")\r\n     * @param fn - Delegate invoked when the event occurs.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public abstract AddListener(eventType: string, fn: Function): void;\r\n\r\n    /**\r\n     * Deletes the marker.\r\n     *\r\n     * @abstract\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public abstract DeleteMarker(): void;\r\n\r\n    /**\r\n     * Gets the marker label\r\n     *\r\n     * @abstract\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public abstract GetLabel(): string;\r\n\r\n    /**\r\n     * Gets the marker visibility\r\n     *\r\n     * @abstract\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public abstract GetVisible(): boolean;\r\n\r\n    /**\r\n     * Sets the anchor for the marker. Use this to adjust the root location for the marker to accomodate various marker image sizes.\r\n     *\r\n     * @abstract\r\n     * @param anchor - Point coordinates for the marker anchor.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public abstract SetAnchor(anchor: IPoint): void;\r\n\r\n    /**\r\n     * Sets the draggability of a marker.\r\n     *\r\n     * @abstract\r\n     * @param draggable - True to mark the marker as draggable, false otherwise.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public abstract SetDraggable(draggable: boolean): void;\r\n\r\n    /**\r\n     * Sets the icon for the marker.\r\n     *\r\n     * @abstract\r\n     * @param icon - String containing the icon in various forms (url, data url, etc.)\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public abstract SetIcon(icon: string): void;\r\n\r\n    /**\r\n     * Sets the marker label.\r\n     *\r\n     * @abstract\r\n     * @param label - String containing the label to set.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public abstract SetLabel(label: string): void;\r\n\r\n    /**\r\n     * Sets the marker position.\r\n     *\r\n     * @abstract\r\n     * @param latLng - Geo coordinates to set the marker position to.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public abstract SetPosition(latLng: ILatLong): void;\r\n\r\n    /**\r\n     * Sets the marker title.\r\n     *\r\n     * @abstract\r\n     * @param title - String containing the title to set.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public abstract SetTitle(title: string): void;\r\n\r\n    /**\r\n     * Sets the marker options.\r\n     *\r\n     * @abstract\r\n     * @param options - {@link IMarkerOptions} object containing the marker options to set. The supplied options are\r\n     * merged with the underlying marker options.\r\n     * @memberof Marker\r\n     */\r\n    public abstract SetOptions(options: IMarkerOptions): void;\r\n\r\n    /**\r\n     * Sets the visiblilty of the marker.\r\n     *\r\n     * @abstract\r\n     * @param visible - Boolean which determines if the marker is visible or not.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public abstract SetVisible(visible: boolean): void;\r\n\r\n}\r\n","import { ILayerOptions } from '../interfaces/ilayer-options';\r\nimport { Marker } from './marker';\r\nimport { Polygon } from './polygon';\r\nimport { Polyline } from './polyline';\r\nimport { InfoWindow } from './info-window';\r\n\r\n/**\r\n * Defines the contract for a map layer implementation. Deriving providers should implements this abstract\r\n * to provide concrete layer functionality for the map.\r\n *\r\n * @export\r\n * @abstract\r\n */\r\nexport abstract class Layer {\r\n\r\n    ///\r\n    /// Property definitions\r\n    ///\r\n\r\n    /**\r\n     * Get the native primitive underneath the abstraction layer.\r\n     *\r\n     * @returns - An object representing the native implementation of the layer in the underlying provider (such as\r\n     * Microsoft.Maps.Layer).\r\n     *\r\n     * @memberof Layer\r\n     * @abstract\r\n     */\r\n    public abstract get NativePrimitve(): any;\r\n\r\n    ///\r\n    /// Public methods, Layer interface implementation\r\n    ///\r\n\r\n    /**\r\n     * Adds an event listener for the layer.\r\n     *\r\n     * @param eventType string. Type of event to add (click, mouseover, etc). You can use any event that the underlying native\r\n     * layer supports.\r\n     * @param fn function. Handler to call when the event occurs.\r\n     *\r\n     * @memberof Layer\r\n     * @abstract\r\n     */\r\n    public abstract AddListener(eventType: string, fn: Function): void;\r\n\r\n    /**\r\n     * Adds an entity to the layer. Entities in this context should be model abstractions of concered map functionality (such\r\n     * as marker, infowindow, polyline, polygon, etc..) Implementations of this method should not expect native implementation of\r\n     * these concepts, instead, the appropriate abstract model classes should be implemented for each provider\r\n     *\r\n     * @param entity Marker|InfoWindow|Polygon|Polyline. Entity to add to the layer.\r\n     *\r\n     * @memberof Layer\r\n     * @abstract\r\n     */\r\n    public abstract AddEntity(entity: Marker|InfoWindow|Polygon|Polyline): void;\r\n\r\n    /**\r\n     * Adds a number of entities to the layer. Entities in this context should be model abstractions of concered map functionality (such\r\n     * as marker, infowindow, polyline, polygon, etc..) Implementations of this method should not expect native implementation of\r\n     * thise concepts, instead, the appropriate abstract model classes should be implemented for each provider\r\n     *\r\n     * @param entities Array<Marker|InfoWindow|Polygon|Polyline>. Entities to add to the layer.\r\n     *\r\n     * @memberof Layer\r\n     * @abstract\r\n     */\r\n    public abstract AddEntities(entity: Array<Marker|InfoWindow|Polygon|Polyline>): void;\r\n\r\n    /**\r\n     * Deletes the layer.\r\n     *\r\n     * @memberof Layer\r\n     * @abstract\r\n     */\r\n    public abstract Delete(): void;\r\n\r\n    /**\r\n     * Returns the options governing the behavior of the layer.\r\n     *\r\n     * @returns - The layer options.\r\n     *\r\n     * @memberof Layer\r\n     * @abstract\r\n     */\r\n    public abstract GetOptions(): ILayerOptions;\r\n\r\n    /**\r\n     * Returns the visibility state of the layer.\r\n     *\r\n     * @returns - True is the layer is visible, false otherwise.\r\n     *\r\n     * @memberof Layer\r\n     * @abstract\r\n     */\r\n    public abstract GetVisible(): boolean;\r\n\r\n     /**\r\n     * Removes an entity from the cluster layer. Entities in this context should be model abstractions of concered map functionality (such\r\n     * as marker, infowindow, polyline, polygon, etc..) Implementations of this method should not expect native implementation of\r\n     * thise concepts, instead, the appropriate abstract model classes should be implemented for each provider\r\n     *\r\n     * @param entity Marker|InfoWindow|Polygon|Polyline Entity to be removed from the layer.\r\n     *\r\n     * @memberof Layer\r\n     * @abstract\r\n     */\r\n    public abstract RemoveEntity(entity: Marker|InfoWindow|Polygon|Polyline): void;\r\n\r\n     /**\r\n     * Sets the entities for the cluster layer. Entities in this context should be model abstractions of concered map functionality (such\r\n     * as marker, infowindow, polyline, polygon, etc..) Implementations of this method should not expect native implementation of\r\n     * thise concepts, instead, the appropriate abstract model classes should be implemented for each provider\r\n     *\r\n     * @param entities Array<Marker>|Array<InfoWindow>|Array<Polygon>|Array<Polyline> containing the entities to add to the cluster.\r\n     * This replaces any existing entities.\r\n     *\r\n     * @memberof Layer\r\n     * @abstract\r\n     */\r\n    public abstract SetEntities(entities: Array<Marker>|Array<InfoWindow>|Array<Polygon>|Array<Polyline>): void;\r\n\r\n    /**\r\n     * Sets the options for the cluster layer.\r\n     *\r\n     * @param options IClusterOptions containing the options enumeration controlling the layer behavior. The supplied options\r\n     * are merged with the default/existing options.\r\n     *\r\n     * @memberof Layer\r\n     * @abstract\r\n     */\r\n    public abstract SetOptions(options: ILayerOptions): void;\r\n\r\n    /**\r\n     * Toggles the cluster layer visibility.\r\n     *\r\n     * @param visible Boolean true to make the layer visible, false to hide the layer.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     * @abstract\r\n     */\r\n    public abstract SetVisible(visible: boolean): void;\r\n\r\n}\r\n","import { ILatLong } from '../interfaces/ilatlong';\r\nimport { IPolygonOptions } from '../interfaces/ipolygon-options';\r\n\r\n/**\r\n * Abstract class defining the contract for a polygon in the architecture specific implementation.\r\n *\r\n * @export\r\n * @abstract\r\n */\r\nexport abstract class Polygon {\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    protected _centroid: ILatLong;\r\n    protected _center: ILatLong;\r\n\r\n    ///\r\n    /// Property definitions\r\n    ///\r\n\r\n    /**\r\n     * Gets the polygon's center.\r\n     * @readonly\r\n     * @memberof Polygon\r\n     */\r\n    public get Center(): ILatLong {\r\n        if (this._center == null) {\r\n            this._center = this.GetBoundingCenter();\r\n        }\r\n        return this._center;\r\n    }\r\n\r\n    /**\r\n     * Gets the polygon's centroid.\r\n     * @readonly\r\n     * @memberof Polygon\r\n     */\r\n    public get Centroid(): ILatLong {\r\n        if (this._centroid == null) {\r\n            this._centroid = this.GetPolygonCentroid();\r\n        }\r\n        return this._centroid;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the maximum zoom at which the label is displayed. Ignored or ShowLabel is false.\r\n     *\r\n     * @abstract\r\n     * @memberof Polygon\r\n     * @property\r\n     */\r\n    public abstract get LabelMaxZoom(): number;\r\n    public abstract set LabelMaxZoom(val: number);\r\n\r\n    /**\r\n     * Gets or sets the minimum zoom at which the label is displayed. Ignored or ShowLabel is false.\r\n     *\r\n     * @abstract\r\n     * @memberof Polygon\r\n     * @property\r\n     */\r\n    public abstract get LabelMinZoom(): number;\r\n    public abstract set LabelMinZoom(val: number);\r\n\r\n    /**\r\n     * Gets the polygon metadata.\r\n     *\r\n     * @readonly\r\n     * @abstract\r\n     * @memberof Polygon\r\n     */\r\n    public abstract get Metadata(): Map<string, any>;\r\n\r\n    /**\r\n     * Gets the native primitve implementing the polygon.\r\n     *\r\n     * @readonly\r\n     * @memberof Polygon\r\n     */\r\n    public abstract get NativePrimitve(): any;\r\n\r\n    /**\r\n     * Gets or sets whether to show the label\r\n     *\r\n     * @abstract\r\n     * @memberof Polygon\r\n     * @property\r\n     */\r\n    public abstract get ShowLabel(): boolean;\r\n    public abstract set ShowLabel(val: boolean);\r\n\r\n    /**\r\n     * Gets or sets whether to show the tooltip\r\n     *\r\n     * @abstract\r\n     * @memberof Polygon\r\n     * @property\r\n     */\r\n    public abstract get ShowTooltip(): boolean;\r\n    public abstract set ShowTooltip(val: boolean);\r\n\r\n    /**\r\n     * Gets or sets the title off the polygon\r\n     *\r\n     * @abstract\r\n     * @memberof Polygon\r\n     * @property\r\n     */\r\n    public abstract get Title(): string;\r\n    public abstract set Title(val: string);\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Adds a delegate for an event.\r\n     *\r\n     * @abstract\r\n     * @param eventType - String containing the event name.\r\n     * @param fn - Delegate function to execute when the event occurs.\r\n     * @memberof Polygon\r\n     */\r\n    public abstract AddListener(eventType: string, fn: Function): void;\r\n\r\n    /**\r\n     * Deleted the polygon.\r\n     *\r\n     * @abstract\r\n     *\r\n     * @memberof Polygon\r\n     */\r\n    public abstract Delete(): void;\r\n\r\n    /**\r\n     * Gets whether the polygon is draggable.\r\n     *\r\n     * @abstract\r\n     * @returns - True if the polygon is dragable, false otherwise.\r\n     *\r\n     * @memberof Polygon\r\n     */\r\n    public abstract GetDraggable(): boolean;\r\n\r\n    /**\r\n     * Gets whether the polygon path can be edited.\r\n     *\r\n     * @abstract\r\n     * @returns - True if the path can be edited, false otherwise.\r\n     *\r\n     * @memberof Polygon\r\n     */\r\n    public abstract GetEditable(): boolean;\r\n\r\n    /**\r\n     * Gets the polygon path.\r\n     *\r\n     * @abstract\r\n     * @returns - Array of ILatLong objects describing the polygon path.\r\n     *\r\n     * @memberof Polygon\r\n     */\r\n    public abstract GetPath(): Array<ILatLong>;\r\n\r\n    /**\r\n     * Gets the polygon paths.\r\n     *\r\n     * @abstract\r\n     * @returns - Array of Array of ILatLong objects describing multiple polygon paths.\r\n     *\r\n     * @memberof Polygon\r\n     */\r\n    public abstract GetPaths(): Array<Array<ILatLong>>;\r\n\r\n    /**\r\n     * Gets whether the polygon is visible.\r\n     *\r\n     * @abstract\r\n     * @returns - True if the polygon is visible, false otherwise.\r\n     *\r\n     * @memberof Polygon\r\n     */\r\n    public abstract GetVisible(): boolean;\r\n\r\n    /**\r\n     * Sets whether the polygon is dragable.\r\n     *\r\n     * @abstract\r\n     * @param draggable - True to make the polygon dragable, false otherwise.\r\n     *\r\n     * @memberof Polygon\r\n     */\r\n    public abstract SetDraggable(draggable: boolean): void;\r\n\r\n    /**\r\n     * Sets wether the polygon path is editable.\r\n     *\r\n     * @abstract\r\n     * @param editable - True to make polygon path editable, false otherwise.\r\n     *\r\n     * @memberof Polygon\r\n     */\r\n    public abstract SetEditable(editable: boolean): void;\r\n\r\n    /**\r\n     * Sets the polygon options\r\n     *\r\n     * @abstract\r\n     * @param options - {@link ILatLong} object containing the options. The options are merged with hte ones\r\n     * already on the underlying model.\r\n     *\r\n     * @memberof Polygon\r\n     */\r\n    public abstract SetOptions(options: IPolygonOptions): void;\r\n\r\n    /**\r\n     * Sets the polygon path.\r\n     *\r\n     * @abstract\r\n     * @param path - An Array of {@link ILatLong} (or array of arrays) describing the polygons path.\r\n     *\r\n     * @memberof Polygon\r\n     */\r\n    public abstract SetPath(path: Array<ILatLong> | Array<ILatLong>): void;\r\n\r\n    /**\r\n     * Set the polygon path or paths.\r\n     *\r\n     * @abstract\r\n     * @param paths An Array of {@link ILatLong}\r\n     * (or array of arrays) describing the polygons path(s).\r\n     *\r\n     * @memberof Polygon\r\n     */\r\n    public abstract SetPaths(paths: Array<Array<ILatLong>> | Array<ILatLong>): void;\r\n\r\n    /**\r\n     * Sets whether the polygon is visible.\r\n     *\r\n     * @abstract\r\n     * @param visible - True to set the polygon visible, false otherwise.\r\n     *\r\n     * @memberof Polygon\r\n     */\r\n    public abstract SetVisible(visible: boolean): void;\r\n\r\n    ///\r\n    /// Protected methods\r\n    ///\r\n\r\n    /**\r\n     * Gets the center of the polygons' bounding box.\r\n     *\r\n     * @returns - ILatLong object containing the center of the bounding box.\r\n     * @memberof Polygon\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected GetBoundingCenter(): ILatLong {\r\n        let c: ILatLong = {latitude: 0, longitude: 0};\r\n        let x1: number = 90, x2: number = -90, y1: number = 180, y2: number = -180;\r\n        const path: Array<Array<ILatLong>> = this.GetPaths();\r\n        if (path) {\r\n            path.forEach(inner => inner.forEach(p => {\r\n                if (p.latitude < x1) { x1 = p.latitude; }\r\n                if (p.latitude > x2) { x2 = p.latitude; }\r\n                if (p.longitude < y1) { y1 = p.longitude; }\r\n                if (p.longitude > y2) { y2 = p.longitude; }\r\n            }));\r\n            c.latitude = x1 + (x2 - x1) / 2;\r\n            c.longitude = y1 + (y2 - y1) / 2;\r\n        }\r\n        else {\r\n            c = null;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * Get the centroid of the polygon based on the polygon path.\r\n     *\r\n     * @returns - The centroid coordinates of the polygon.\r\n     * @memberof Polygon\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected GetPolygonCentroid(): ILatLong {\r\n        let c: ILatLong = {latitude: 0, longitude: 0};\r\n        const path: Array<Array<ILatLong>> = this.GetPaths();\r\n        const off = path[0][0];\r\n        if (off != null) {\r\n            let twicearea: number = 0;\r\n            let x: number = 0;\r\n            let y: number = 0;\r\n            let p1: ILatLong, p2: ILatLong;\r\n            let f: number;\r\n            for (let k = 0; k < path.length; k++) {\r\n                for (let i = 0, j = path[k].length - 1; i < path[k].length; j = i++) {\r\n                    p1 = path[k][i];\r\n                    p2 = path[k][j];\r\n                    f = (p1.latitude - off.latitude) * (p2.longitude - off.longitude) -\r\n                        (p2.latitude - off.latitude) * (p1.longitude - off.longitude);\r\n                    twicearea += f;\r\n                    x += (p1.latitude + p2.latitude - 2 * off.latitude) * f;\r\n                    y += (p1.longitude + p2.longitude - 2 * off.longitude) * f;\r\n                }\r\n            }\r\n            if (twicearea !== 0) {\r\n                f = twicearea * 3;\r\n                c.latitude = x / f + off.latitude;\r\n                c.longitude = y / f + off.longitude;\r\n            }\r\n            else {\r\n                c.latitude = off.latitude;\r\n                c.longitude = off.longitude;\r\n            }\r\n        }\r\n        else {\r\n            c = null;\r\n        }\r\n        return c;\r\n    }\r\n}\r\n","import { ILatLong } from '../interfaces/ilatlong';\r\nimport { IPolylineOptions } from '../interfaces/ipolyline-options';\r\n\r\n/**\r\n * Abstract class defining the contract for a polyline in the architecture specific implementation.\r\n *\r\n * @export\r\n * @abstract\r\n */\r\nexport abstract class Polyline {\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    protected _centroid: ILatLong;\r\n    protected _center: ILatLong;\r\n\r\n    ///\r\n    /// Property definitions\r\n    ///\r\n\r\n    /**\r\n     * Gets the polyline's center.\r\n     * @readonly\r\n     * @memberof Polyline\r\n     */\r\n    public get Center(): ILatLong {\r\n        if (this._center == null) {\r\n            this._center = this.GetBoundingCenter();\r\n        }\r\n        return this._center;\r\n    }\r\n\r\n    /**\r\n     * Gets the polyline's centroid.\r\n     * @readonly\r\n     * @memberof Polyline\r\n     */\r\n    public get Centroid(): ILatLong {\r\n        if (this._centroid == null) {\r\n            this._centroid = this.GetPolylineCentroid();\r\n        }\r\n        return this._centroid;\r\n    }\r\n\r\n    /**\r\n     * Gets the native primitve implementing the polyline.\r\n     *\r\n     * @readonly\r\n     * @memberof Polyline\r\n     */\r\n    public abstract get NativePrimitve(): any;\r\n\r\n    /**\r\n     * Gets the polyline metadata.\r\n     *\r\n     * @readonly\r\n     * @abstract\r\n     * @memberof Polylin\r\n     */\r\n    public abstract get Metadata(): Map<string, any>;\r\n\r\n    /**\r\n     * Gets or sets whether to show the tooltip\r\n     *\r\n     * @abstract\r\n     * @memberof Polyline\r\n     * @property\r\n     */\r\n    public abstract get ShowTooltip(): boolean;\r\n    public abstract set ShowTooltip(val: boolean);\r\n\r\n    /**\r\n     * Gets or sets the title off the polyline\r\n     *\r\n     * @abstract\r\n     * @memberof Polyline\r\n     * @property\r\n     */\r\n    public abstract get Title(): string;\r\n    public abstract set Title(val: string);\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Get the centroid of the polyline based on the a path.\r\n     *\r\n     * @param path - the path for which to generate the centroid\r\n     * @returns - The centroid coordinates of the polyline.\r\n     * @memberof Polyline\r\n     * @method\r\n     */\r\n    public static GetPolylineCentroid(path: Array<ILatLong>): ILatLong {\r\n        let c: ILatLong = {latitude: 0, longitude: 0};\r\n        const off = path[0];\r\n        if (off != null) {\r\n            let twicearea: number = 0;\r\n            let x: number = 0;\r\n            let y: number = 0;\r\n            let p1: ILatLong, p2: ILatLong;\r\n            let f: number;\r\n\r\n            for (let i = 0, j = path.length - 1; i < path.length; j = i++) {\r\n                p1 = path[i];\r\n                p2 = path[j];\r\n                f = (p1.latitude - off.latitude) * (p2.longitude - off.longitude) -\r\n                    (p2.latitude - off.latitude) * (p1.longitude - off.longitude);\r\n                twicearea += f;\r\n                x += (p1.latitude + p2.latitude - 2 * off.latitude) * f;\r\n                y += (p1.longitude + p2.longitude - 2 * off.longitude) * f;\r\n            }\r\n            if (twicearea !== 0) {\r\n                f = twicearea * 3;\r\n                c.latitude = x / f + off.latitude;\r\n                c.longitude = y / f + off.longitude;\r\n            }\r\n            else {\r\n                c.latitude = off.latitude;\r\n                c.longitude = off.longitude;\r\n            }\r\n        }\r\n        else {\r\n            c = null;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * Adds a delegate for an event.\r\n     *\r\n     * @abstract\r\n     * @param eventType - String containing the event name.\r\n     * @param fn - Delegate function to execute when the event occurs.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public abstract AddListener(eventType: string, fn: Function): void;\r\n\r\n    /**\r\n     * Deleted the polyline.\r\n     *\r\n     * @abstract\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public abstract Delete(): void;\r\n\r\n    /**\r\n     * Gets whether the polyline is draggable.\r\n     *\r\n     * @abstract\r\n     * @returns - True if the polyline is dragable, false otherwise.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public abstract GetDraggable(): boolean;\r\n\r\n    /**\r\n     * Gets whether the polyline path can be edited.\r\n     *\r\n     * @abstract\r\n     * @returns - True if the path can be edited, false otherwise.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public abstract GetEditable(): boolean;\r\n\r\n    /**\r\n     * Gets the polyline path.\r\n     *\r\n     * @abstract\r\n     * @returns - Array of ILatLong objects describing the polyline path.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public abstract GetPath(): Array<ILatLong>;\r\n\r\n    /**\r\n     * Gets whether the polyline is visible.\r\n     *\r\n     * @abstract\r\n     * @returns - True if the polyline is visible, false otherwise.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public abstract GetVisible(): boolean;\r\n\r\n    /**\r\n     * Sets whether the polyline is dragable.\r\n     *\r\n     * @abstract\r\n     * @param draggable - True to make the polyline dragable, false otherwise.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public abstract SetDraggable(draggable: boolean): void;\r\n\r\n    /**\r\n     * Sets wether the polyline path is editable.\r\n     *\r\n     * @abstract\r\n     * @param editable - True to make polyline path editable, false otherwise.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public abstract SetEditable(editable: boolean): void;\r\n\r\n    /**\r\n     * Sets the polyline options\r\n     *\r\n     * @abstract\r\n     * @param options - {@link ILatLong} object containing the options. The options are merged with hte ones\r\n     * already on the underlying model.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public abstract SetOptions(options: IPolylineOptions): void;\r\n\r\n    /**\r\n     * Sets the polyline path.\r\n     *\r\n     * @abstract\r\n     * @param path - An Array of {@link ILatLong} (or array of arrays) describing the polylines path.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public abstract SetPath(path: Array<ILatLong> | Array<ILatLong>): void;\r\n\r\n    /**\r\n     * Sets whether the polyline is visible.\r\n     *\r\n     * @abstract\r\n     * @param visible - True to set the polyline visible, false otherwise.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public abstract SetVisible(visible: boolean): void;\r\n\r\n    ///\r\n    /// Protected methods\r\n    ///\r\n\r\n    /**\r\n     * Gets the center of the polyline' bounding box.\r\n     *\r\n     * @returns - {@link ILatLong} object containing the center of the bounding box.\r\n     * @memberof Polyline\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected GetBoundingCenter(): ILatLong {\r\n        let c: ILatLong = {latitude: 0, longitude: 0};\r\n        let x1: number = 90, x2: number = -90, y1: number = 180, y2: number = -180;\r\n        const path: Array<ILatLong> = this.GetPath();\r\n        if (path) {\r\n            path.forEach(p => {\r\n                if (p.latitude < x1) { x1 = p.latitude; }\r\n                if (p.latitude > x2) { x2 = p.latitude; }\r\n                if (p.longitude < y1) { y1 = p.longitude; }\r\n                if (p.longitude > y2) { y2 = p.longitude; }\r\n            });\r\n            c.latitude = x1 + (x2 - x1) / 2;\r\n            c.longitude = y1 + (y2 - y1) / 2;\r\n        }\r\n        else {\r\n            c = null;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * Get the centroid of the polyline based on the polyline path.\r\n     *\r\n     * @returns - The centroid coordinates of the polyline.\r\n     * @memberof Polyline\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected GetPolylineCentroid(): ILatLong {\r\n        const path: Array<ILatLong> = this.GetPath();\r\n        const c: ILatLong  = Polyline.GetPolylineCentroid(path);\r\n        return c;\r\n    }\r\n\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Marker } from './marker';\r\n\r\nexport abstract class SpiderClusterMarker extends Marker {\r\n\r\n    /** The parent pushpin in which the spider pushpin is derived from. */\r\n    public ParentMarker: Marker;\r\n\r\n    /** The stick that connects the spider pushpin to the cluster. */\r\n    public Stick: any;\r\n\r\n}\r\n","import { ILatLong } from '../interfaces/ilatlong';\r\nimport { MapLabel } from './map-label';\r\n\r\nlet id: number = 0;\r\n\r\n/**\r\n * Abstract base implementing a canvas overlay to be placed on the map.\r\n *\r\n * @export\r\n * @abstract\r\n */\r\nexport abstract class CanvasOverlay {\r\n\r\n    ///\r\n    /// field declarations\r\n    ///\r\n    protected _readyResolver: (val: boolean) => void;\r\n    protected _canvas: HTMLCanvasElement;\r\n    protected _zoomStart: number;\r\n    protected _centerStart: ILatLong;\r\n    public _canvasReady: Promise<boolean> = new Promise<boolean>((resolve, reject) => { this._readyResolver = resolve; });\r\n\r\n    /**\r\n     * Returns a promise that gets resolved when the canvas overlay is ready for interaction.\r\n     */\r\n    public get CanvasReady(): Promise<boolean> { return this._canvasReady; }\r\n\r\n    /**\r\n    * A callback function that is triggered when the canvas is ready to be rendered for the current map view.\r\n    */\r\n    private _drawCallback: (canvas: HTMLCanvasElement) => void;\r\n\r\n\r\n    /**\r\n     * Creates a new instance of the CanvasOverlay class.\r\n     */\r\n    constructor(drawCallback: (canvas: HTMLCanvasElement) => void) {\r\n        this._drawCallback = drawCallback;\r\n        id++;\r\n    }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Deletes the canvas overlay.\r\n     */\r\n    public Delete(): void {\r\n        this.SetMap(null);\r\n    }\r\n\r\n    /**\r\n     * Obtains geo coordinates for the click location\r\n     */\r\n    public abstract GetCoordinatesFromClick(e: any): ILatLong;\r\n\r\n\r\n    /**\r\n     * Gets the map associted with the label.\r\n     */\r\n    public abstract GetMap(): any;\r\n\r\n    /**\r\n     * Returns a MapLabel instance for the current platform that can be used as a tooltip.\r\n     * This method only generates the map label. Content and placement is the responsibility\r\n     * of the caller.\r\n     */\r\n    public abstract GetToolTipOverlay(): MapLabel;\r\n\r\n    /**\r\n     * CanvasOverlay added to map, load canvas.\r\n     */\r\n    public OnAdd(): void {\r\n        this._canvas = document.createElement('canvas');\r\n        this._canvas.style.position = 'absolute';\r\n        this._canvas.style.left = '0px';\r\n        this._canvas.style.top = '0px';\r\n        this._canvas.id = `xMapOverlay${id}`;\r\n\r\n        // Add the canvas to the overlay.\r\n        this.SetCanvasElement(this._canvas);\r\n    }\r\n\r\n    /**\r\n     * CanvasOverlay loaded, attach map events for updating canvas.\r\n     * @abstract\r\n     * @method\r\n     * @memberof CanvasOverlay\r\n     */\r\n    public abstract OnLoad(): void;\r\n\r\n    /**\r\n     * When the CanvasLayer is removed from the map, release resources.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     */\r\n    public OnRemove(): void {\r\n        this.SetCanvasElement(null);\r\n        this.RemoveEventHandlers();\r\n        this._canvas = null;\r\n    }\r\n\r\n    /**\r\n     * Redraws the canvas for the current map view.\r\n     * @param clear - True to clear the canvas before drawing.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     */\r\n    public Redraw(clear: boolean): void {\r\n        if (this._canvas == null) { return; }\r\n\r\n        // Clear canvas by updating dimensions. This also ensures canvas stays the same size as the map.\r\n        if (clear) { this.Resize(); }\r\n\r\n        // Call the drawing callback function if specified.\r\n        if (this._drawCallback) {\r\n            this._drawCallback(this._canvas);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the map for the label. Settings this to null remove the label from hte map.\r\n     *\r\n     * @param map - A native map object for the underlying implementation. Implementing derivatives should return the\r\n     * actual native object.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     */\r\n    public abstract SetMap(map: any): void;\r\n\r\n    ///\r\n    /// Protected methods\r\n    ///\r\n\r\n    /**\r\n     * Attaches the canvas to the map.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     */\r\n    protected abstract SetCanvasElement(el: HTMLCanvasElement): void;\r\n\r\n    /**\r\n     * Remove the map event handlers.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     * @abstract\r\n     * @protected\r\n     */\r\n    protected abstract RemoveEventHandlers(): void;\r\n\r\n    /**\r\n     * Updates the Canvas size based on the map size.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     * @abstract\r\n     * @protected\r\n     */\r\n    protected abstract Resize(): void;\r\n\r\n    /**\r\n     * Updates the Canvas.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected abstract UpdateCanvas(): void;\r\n\r\n    /**\r\n     * Simple function for updating the CSS position and dimensions of the canvas.\r\n     * @param x The horizontal offset position of the canvas.\r\n     * @param y The vertical offset position of the canvas.\r\n     * @param w The width of the canvas.\r\n     * @param h The height of the canvas.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected UpdatePosition(x: number, y: number, w: number, h: number) {\r\n        // Update CSS position.\r\n        this._canvas.style.left = x + 'px';\r\n        this._canvas.style.top = y + 'px';\r\n\r\n        // Update CSS dimensions.\r\n        this._canvas.style.width = w + 'px';\r\n        this._canvas.style.height = h + 'px';\r\n    }\r\n\r\n}\r\n","import { eachSeries, nextTick } from 'async';\r\nimport { ILayerOptions } from '../../interfaces/ilayer-options';\r\nimport { Layer } from '../layer';\r\nimport { Marker } from '../marker';\r\nimport { Polygon } from '../polygon';\r\nimport { Polyline } from '../polyline';\r\nimport { InfoWindow } from '../info-window';\r\nimport { BingMapService } from '../../services/bing/bing-map.service';\r\nimport { MapService} from '../../services/map.service';\r\n\r\n/**\r\n * Concrete implementation of a map layer for the Bing Map Provider.\r\n *\r\n * @export\r\n */\r\nexport class BingLayer implements Layer {\r\n\r\n    private _pendingEntities: Array<Marker|InfoWindow|Polygon|Polyline> = new Array<Marker|InfoWindow|Polygon|Polyline>();\r\n\r\n    ///\r\n    /// Property definitions\r\n    ///\r\n\r\n    /**\r\n     * Get the native primitive underneath the abstraction layer.\r\n     *\r\n     * @returns Microsoft.Maps.Layer.\r\n     *\r\n     * @memberof BingLayer\r\n     */\r\n    public get NativePrimitve(): any {\r\n        return this._layer;\r\n    }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates a new instance of the BingClusterLayer class.\r\n     *\r\n     * @param _layer Microsoft.Maps.ClusterLayer. Native Bing Cluster Layer supporting the cluster layer.\r\n     * @param _maps MapService. MapService implementation to leverage for the layer.\r\n     *\r\n     * @memberof BingLayer\r\n     */\r\n    constructor(private _layer: Microsoft.Maps.Layer, private _maps: MapService) { }\r\n\r\n\r\n    ///\r\n    /// Public methods, Layer interface implementation\r\n    ///\r\n\r\n    /**\r\n     * Adds an event listener for the layer.\r\n     *\r\n     * @param eventType string. Type of event to add (click, mouseover, etc). You can use any event that the underlying native\r\n     * layer supports.\r\n     * @param fn function. Handler to call when the event occurs.\r\n     *\r\n     * @memberof BingLayer\r\n     */\r\n    public AddListener(eventType: string, fn: Function): void {\r\n        Microsoft.Maps.Events.addHandler(this._layer, eventType, (e) => {\r\n            fn(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds an entity to the layer.\r\n     *\r\n     * @param entity Marker|InfoWindow|Polygon|Polyline. Entity to add to the layer.\r\n     *\r\n     * @memberof BingLayer\r\n     */\r\n    public AddEntity(entity: Marker|InfoWindow|Polygon|Polyline): void {\r\n        if (entity && entity.NativePrimitve) {\r\n            if (this.GetVisible()) {\r\n                this._layer.add(entity.NativePrimitve);\r\n            }\r\n            else {\r\n                this._pendingEntities.push(entity);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a number of entities to the layer. Entities in this context should be model abstractions of concered map functionality (such\r\n     * as marker, infowindow, polyline, polygon, etc..)\r\n     *\r\n     * @param entities Array<Marker|InfoWindow|Polygon|Polyline>. Entities to add to the layer.\r\n     *\r\n     * @memberof BingLayer\r\n     */\r\n    public AddEntities(entities: Array<Marker|InfoWindow|Polygon|Polyline>): void {\r\n        //\r\n        // use eachSeries as opposed to _layer.add([]) to provide a non-blocking experience for larger data sets.\r\n        //\r\n        if (entities != null && Array.isArray(entities) && entities.length !== 0 ) {\r\n            eachSeries([...entities], (e, next) => {\r\n                if (this.GetVisible()) {\r\n                    this._layer.add(e.NativePrimitve);\r\n                }\r\n                else {\r\n                    this._pendingEntities.push(e);\r\n                }\r\n                nextTick(() => next());\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes the layer.\r\n     *\r\n     * @memberof BingLayer\r\n     */\r\n    public Delete(): void {\r\n        this._maps.DeleteLayer(this);\r\n    }\r\n\r\n    /**\r\n     * Returns the options governing the behavior of the layer.\r\n     *\r\n     * @returns IClusterOptions. The layer options.\r\n     *\r\n     * @memberof BingLayer\r\n     */\r\n    public GetOptions(): ILayerOptions {\r\n        const o: ILayerOptions = {\r\n            id: Number(this._layer.getId())\r\n        };\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Returns the visibility state of the layer.\r\n     *\r\n     * @returns Boolean. True is the layer is visible, false otherwise.\r\n     *\r\n     * @memberof BingLayer\r\n     */\r\n    public GetVisible(): boolean  {\r\n        return this._layer.getVisible();\r\n    }\r\n\r\n    /**\r\n     * Removes an entity from the cluster layer.\r\n     *\r\n     * @param entity Marker|InfoWindow|Polygon|Polyline to be removed from the layer.\r\n     *\r\n     * @memberof BingLayer\r\n     */\r\n    public RemoveEntity(entity: Marker|InfoWindow|Polygon|Polyline): void {\r\n        if (entity.NativePrimitve) {\r\n            this._layer.remove(entity.NativePrimitve);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the entities for the cluster layer.\r\n     *\r\n     * @param entities Array<Marker>|Array<InfoWindow>|Array<Polygon>|Array<Polyline> containing the entities to add to the cluster.\r\n     * This replaces any existing entities.\r\n     *\r\n     * @memberof BingLayer\r\n     */\r\n    public SetEntities(entities: Array<Marker>|Array<InfoWindow>|Array<Polygon>|Array<Polyline>): void {\r\n        //\r\n        // we are using removal and add as opposed to set as for large number of objects it yields a non-blocking, smoother performance...\r\n        //\r\n        this._layer.setPrimitives([]);\r\n        this.AddEntities(entities);\r\n\r\n    }\r\n\r\n    /**\r\n     * Sets the options for the cluster layer.\r\n     *\r\n     * @param options IClusterOptions containing the options enumeration controlling the layer behavior. The supplied options\r\n     * are merged with the default/existing options.\r\n     *\r\n     * @memberof BingLayer\r\n     */\r\n    public SetOptions(options: ILayerOptions) {\r\n        this._layer.metadata.id = options.id.toString();\r\n    }\r\n\r\n    /**\r\n     * Toggles the cluster layer visibility.\r\n     *\r\n     * @param visible Boolean true to make the layer visible, false to hide the layer.\r\n     *\r\n     * @memberof BingLayer\r\n     */\r\n    public SetVisible(visible: boolean): void {\r\n        this._layer.setVisible(visible);\r\n        if (visible && this._pendingEntities.length > 0) {\r\n            this.AddEntities(this._pendingEntities.splice(0));\r\n        }\r\n    }\r\n\r\n}\r\n","import { IMapOptions } from '../../interfaces/imap-options';\r\nimport { IBox } from '../../interfaces/ibox';\r\nimport { ILatLong } from '../../interfaces/ilatlong';\r\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\r\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\r\nimport { IClusterOptions } from '../../interfaces/icluster-options';\r\nimport { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\r\nimport { IInfoWindowAction } from '../../interfaces/iinfo-window-action';\r\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\r\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\r\nimport { IPoint } from '../../interfaces/ipoint';\r\nimport { MapTypeId } from '../../models/map-type-id';\r\nimport { Marker } from '../../models/marker';\r\nimport { ClusterPlacementMode } from '../../models/cluster-placement-mode';\r\nimport { BingMapService } from './bing-map.service';\r\n\r\n/**\r\n * This class contains helperfunctions to map various interfaces used to represent options and structures into the\r\n * corresponding Bing Maps V8 specific implementations.\r\n *\r\n * @export\r\n */\r\nexport class BingConversions {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n\r\n    /**\r\n     * Map option attributes that are supported for conversion to Bing Map properties\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    private static _mapOptionsAttributes: string[] = [\r\n        'backgroundColor',\r\n        'credentials',\r\n        'customizeOverlays',\r\n        'disableBirdseye',\r\n        'disableKeyboardInput',\r\n        'disableMouseInput',\r\n        'disablePanning',\r\n        'disableTouchInput',\r\n        'disableUserInput',\r\n        'disableZooming',\r\n        'disableStreetside',\r\n        'enableClickableLogo',\r\n        'enableSearchLogo',\r\n        'fixedMapPosition',\r\n        'height',\r\n        'inertiaIntensity',\r\n        'navigationBarMode',\r\n        'showBreadcrumb',\r\n        'showCopyright',\r\n        'showDashboard',\r\n        'showMapTypeSelector',\r\n        'showScalebar',\r\n        'theme',\r\n        'tileBuffer',\r\n        'useInertia',\r\n        'width',\r\n        'center',\r\n        'zoom',\r\n        'mapTypeId'\r\n    ];\r\n\r\n    /**\r\n     * View option attributes that are supported for conversion to Bing Map properties\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    private static _viewOptionsAttributes: string[] = [\r\n        'animate',\r\n        'bounds',\r\n        'center',\r\n        'centerOffset',\r\n        'heading',\r\n        'labelOverlay',\r\n        'mapTypeId',\r\n        'padding',\r\n        'zoom'\r\n    ];\r\n\r\n    /**\r\n     * InfoWindow option attributes that are supported for conversion to Bing Map properties\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    private static _infoWindowOptionsAttributes: string[] = [\r\n        'actions',\r\n        'description',\r\n        'htmlContent',\r\n        'id',\r\n        'position',\r\n        'pixelOffset',\r\n        'showCloseButton',\r\n        'showPointer',\r\n        'pushpin',\r\n        'title',\r\n        'titleClickHandler',\r\n        'typeName',\r\n        'visible',\r\n        'width',\r\n        'height'\r\n    ];\r\n\r\n    /**\r\n     * Marker option attributes that are supported for conversion to Bing Map properties\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    private static _markerOptionsAttributes: string[] = [\r\n        'anchor',\r\n        'draggable',\r\n        'height',\r\n        'htmlContent',\r\n        'icon',\r\n        'infobox',\r\n        'state',\r\n        'title',\r\n        'textOffset',\r\n        'typeName',\r\n        'visible',\r\n        'width',\r\n        'zIndex'\r\n    ];\r\n\r\n    /**\r\n     * Polygon option attributes that are supported for conversion to Bing Map Polygon properties\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    private static _polygonOptionsAttributes: string[] = [\r\n        'cursor',\r\n        'fillColor',\r\n        'fillOpacity',\r\n        'strokeColor',\r\n        'strokeOpacity',\r\n        'strokeWeight',\r\n        'visible'\r\n    ];\r\n\r\n    /**\r\n     * Polyline option attributes that are supported for conversion to Bing Map Polyline properties\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    private static _polylineOptionsAttributes: string[] = [\r\n        'cursor',\r\n        'strokeColor',\r\n        'strokeOpacity',\r\n        'strokeWeight',\r\n        'visible'\r\n    ];\r\n\r\n    /**\r\n     * Cluster option attributes that are supported for conversion to Bing Map properties\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    private static _clusterOptionsAttributes: string[] = [\r\n        'callback',\r\n        'clusteredPinCallback',\r\n        'clusteringEnabled',\r\n        'gridSize',\r\n        'layerOffset',\r\n        'placementMode',\r\n        'visible',\r\n        'zIndex'\r\n    ];\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Maps an IInfoWindowAction to a Microsoft.Maps.IInfoboxActions\r\n     *\r\n     * @param action - Object to be mapped.\r\n     * @returns - Navtive mapped object.\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    public static TranslateAction(action: IInfoWindowAction): Microsoft.Maps.IInfoboxActions {\r\n        const a: Microsoft.Maps.IInfoboxActions = {\r\n            eventHandler: action.eventHandler,\r\n            label: action.label\r\n        };\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * Maps an Array of IInfoWindowAction to an Array of Microsoft.Maps.IInfoboxActions\r\n     *\r\n     * @param actions - Array of objects to be mapped.\r\n     * @returns - Array of mapped objects.\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    public static TranslateActions(actions: Array<IInfoWindowAction>): Array<Microsoft.Maps.IInfoboxActions> {\r\n        const a: Array<Microsoft.Maps.IInfoboxActions> = new Array<Microsoft.Maps.IInfoboxActions>();\r\n        actions.forEach(x => a.push(BingConversions.TranslateAction(x)));\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * Maps an IBox object to a Microsoft.Maps.LocationRect object.\r\n     *\r\n     * @param box - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    public static TranslateBounds(box: IBox): Microsoft.Maps.LocationRect {\r\n        const r: Microsoft.Maps.LocationRect =\r\n            Microsoft.Maps.LocationRect.fromEdges(box.maxLatitude, box.minLongitude, box.minLatitude, box.maxLongitude);\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * Maps an IClusterOptions object to a Microsoft.Maps.IClusterLayerOptions object.\r\n     *\r\n     * @param options - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    public static TranslateClusterOptions(options: IClusterOptions): Microsoft.Maps.IClusterLayerOptions {\r\n        const o: Microsoft.Maps.IClusterLayerOptions | any = {};\r\n        Object.keys(options)\r\n            .filter(k => BingConversions._clusterOptionsAttributes.indexOf(k) !== -1)\r\n            .forEach((k) => {\r\n                if (k === 'layerOffset') {\r\n                    o.layerOffset = BingConversions.TranslatePoint(options.layerOffset);\r\n                }\r\n                if (k === 'placementMode') {\r\n                    if (options.placementMode === ClusterPlacementMode.FirstPin) {\r\n                        o.placementMode = Microsoft.Maps.ClusterPlacementType.FirstLocation;\r\n                    }\r\n                    else {\r\n                        o.placementMode = Microsoft.Maps.ClusterPlacementType.MeanAverage;\r\n                    }\r\n                }\r\n                else {\r\n                    o[k] = (<any>options)[k];\r\n                }\r\n            });\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Maps an IInfoWindowOptions object to a Microsoft.Maps.IInfoboxOptions object.\r\n     *\r\n     * @param options - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    public static TranslateInfoBoxOptions(options: IInfoWindowOptions): Microsoft.Maps.IInfoboxOptions {\r\n        const o: Microsoft.Maps.IInfoboxOptions | any = {};\r\n        Object.keys(options)\r\n            .filter(k => BingConversions._infoWindowOptionsAttributes.indexOf(k) !== -1)\r\n            .forEach((k) => {\r\n                if (k === 'pixelOffset') {\r\n                    o.offset = BingConversions.TranslatePoint(options.pixelOffset);\r\n                }\r\n                else if (k === 'position') {\r\n                    o.location = BingConversions.TranslateLocation(options.position);\r\n                }\r\n                else if (k === 'actions') {\r\n                    o.actions = BingConversions.TranslateActions(options.actions);\r\n                }\r\n                else {\r\n                    o[k] = (<any>options)[k];\r\n                }\r\n            });\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Maps an IMapOptions object to a Microsoft.Maps.IMapLoadOptions object.\r\n     *\r\n     * @param options - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    public static TranslateLoadOptions(options: IMapOptions): Microsoft.Maps.IMapLoadOptions {\r\n        const o: Microsoft.Maps.IMapLoadOptions | any = {};\r\n        Object.keys(options)\r\n            .filter(k => {\r\n                return BingConversions._mapOptionsAttributes.indexOf(k) !== -1 || BingConversions._viewOptionsAttributes.indexOf(k) !== -1;\r\n            })\r\n            .forEach((k) => {\r\n                if (k === 'center') {\r\n                    o.center = BingConversions.TranslateLocation(options.center);\r\n                }\r\n                else if (k === 'mapTypeId') {\r\n                    if (options.mapTypeId === MapTypeId.hybrid) {\r\n                        o.mapTypeId = Microsoft.Maps.MapTypeId.aerial;\r\n                        o.labelOverlay = Microsoft.Maps.LabelOverlay.visible;\r\n                    }\r\n                    else if (options.mapTypeId === MapTypeId.aerial) {\r\n                        o.mapTypeId = Microsoft.Maps.MapTypeId.aerial;\r\n                        o.labelOverlay = Microsoft.Maps.LabelOverlay.hidden;\r\n                    }\r\n                    else {\r\n                        o.mapTypeId = Microsoft.Maps.MapTypeId[(<any>MapTypeId)[options.mapTypeId]];\r\n                    }\r\n                }\r\n                else if (k === 'bounds') {\r\n                    o.bounds = BingConversions.TranslateBounds(options.bounds);\r\n                }\r\n                else {\r\n                    o[k] = (<any>options)[k];\r\n                }\r\n            });\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Maps an ILatLong object to a Microsoft.Maps.Location object.\r\n     *\r\n     * @param latlong - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    public static TranslateLocation(latlong: ILatLong): Microsoft.Maps.Location {\r\n        const l: Microsoft.Maps.Location = new Microsoft.Maps.Location(latlong.latitude, latlong.longitude);\r\n        return l;\r\n    }\r\n\r\n    /**\r\n     * Maps an IMarkerOptions object to a Microsoft.Maps.IPushpinOptions object.\r\n     *\r\n     * @param options - Object to be mapped.\r\n     * @returns - The mapped object.\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    public static TranslateMarkerOptions(options: IMarkerOptions): Microsoft.Maps.IPushpinOptions {\r\n        const o: Microsoft.Maps.IPushpinOptions = {};\r\n        Object.keys(options)\r\n            .filter(k => BingConversions._markerOptionsAttributes.indexOf(k) !== -1)\r\n            .forEach((k) => {\r\n                if (k === 'anchor') {\r\n                    o.anchor = BingConversions.TranslatePoint(options.anchor);\r\n                }\r\n                else {\r\n                    (<any>o)[k] = (<any>options)[k];\r\n                }\r\n            });\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Maps an IMapOptions object to a Microsoft.Maps.IMapOptions object.\r\n     *\r\n     * @param options - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    public static TranslateOptions(options: IMapOptions): Microsoft.Maps.IMapOptions {\r\n        const o: Microsoft.Maps.IMapOptions | any = {};\r\n        Object.keys(options)\r\n            .filter(k => BingConversions._mapOptionsAttributes.indexOf(k) !== -1)\r\n            .forEach((k) => {\r\n                if (k === 'center') {\r\n                    o.center = BingConversions.TranslateLocation(options.center);\r\n                }\r\n                else if (k === 'mapTypeId') {\r\n                    o.mapTypeId = Microsoft.Maps.MapTypeId[(<any>MapTypeId)[options.mapTypeId]];\r\n                }\r\n                else {\r\n                    o[k] = (<any>options)[k];\r\n                }\r\n            });\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Translates an array of locations or an array or arrays of location to and array of arrays of Bing Map Locations\r\n     *\r\n     * @param paths - ILatLong based locations to convert.\r\n     * @returns - converted locations.\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    public static TranslatePaths(paths: Array<ILatLong> | Array<Array<ILatLong>>): Array<Array<Microsoft.Maps.Location>> {\r\n        const p: Array<Array<Microsoft.Maps.Location>> = new Array<Array<Microsoft.Maps.Location>>();\r\n        if (paths == null || !Array.isArray(paths) || paths.length === 0) {\r\n            p.push(new Array<Microsoft.Maps.Location>());\r\n        }\r\n        else if (Array.isArray(paths[0])) {\r\n            // parameter is an array or arrays\r\n            // us for loop for performance\r\n            const p1 = <Array<Array<ILatLong>>>paths;\r\n            for (let i = 0; i < p1.length; i++) {\r\n                const _p: Array<Microsoft.Maps.Location> = new Array<Microsoft.Maps.Location>();\r\n                for (let j = 0; j < p1[i].length; j++) {\r\n                    _p.push(new Microsoft.Maps.Location(p1[i][j].latitude, p1[i][j].longitude));\r\n                }\r\n                p.push(_p);\r\n            }\r\n        }\r\n        else {\r\n            // parameter is a simple array....\r\n            const y: Array<Microsoft.Maps.Location> = new Array<Microsoft.Maps.Location>();\r\n            const p1 = <Array<ILatLong>>paths;\r\n            for (let i = 0; i < p1.length; i++) {\r\n                y.push(new Microsoft.Maps.Location(p1[i].latitude, p1[i].longitude));\r\n            }\r\n            p.push(y);\r\n        }\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     *  Maps an IPoint object to a Microsoft.Maps.Point object.\r\n     *\r\n     * @param point - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    public static TranslatePoint(point: IPoint): Microsoft.Maps.Point {\r\n        const p: Microsoft.Maps.Point = new Microsoft.Maps.Point(point.x, point.y);\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     *  Maps an IPolygonOptions object to a Microsoft.Maps.IPolygonOptions.\r\n     *\r\n     * @param options - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    public static TranslatePolygonOptions(options: IPolygonOptions): Microsoft.Maps.IPolygonOptions {\r\n        const o: Microsoft.Maps.IPolygonOptions = {};\r\n        const f: (s: string, a: number) => string = (s, a) => {\r\n            const m = /rgba?\\((\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*\\d+[\\.\\d+]*)*\\)/g.exec(s);\r\n            if (m && m.length > 3) {\r\n                a = a > 1 ? (a / 100) : a;\r\n                return 'rgba(' + [m[1], m[2], m[3], a].join(',') + ')';\r\n            }\r\n            else if (s[0] === '#') {\r\n                const x: number = a > 1 ? a : Math.floor(a * 255);\r\n                const z: string = s.substr(1);\r\n                const r: number = parseInt(z.substr(0, 2), 16);\r\n                const g: number = parseInt(z.substr(2, 2), 16);\r\n                const b: number = parseInt(z.substr(4, 2), 16);\r\n                return 'rgba(' + [r , g, b, a].join(',') + ')';\r\n            }\r\n            else {\r\n                return s;\r\n            }\r\n        };\r\n\r\n        Object.keys(options)\r\n            .filter(k => BingConversions._polygonOptionsAttributes.indexOf(k) !== -1)\r\n            .forEach((k) => {\r\n                if (k === 'strokeWeight') {\r\n                    o.strokeThickness = options.strokeWeight;\r\n                }\r\n                else if (k === 'strokeColor') {\r\n                    if (options.strokeOpacity) {\r\n                        o.strokeColor = f(options.strokeColor, options.strokeOpacity);\r\n                    }\r\n                    else {\r\n                        o.strokeColor = options.strokeColor;\r\n                    }\r\n                }\r\n                else if (k === 'strokeOpacity') {}\r\n                else if (k === 'fillColor') {\r\n                    if (options.fillOpacity) {\r\n                        o.fillColor = f(options.fillColor, options.fillOpacity);\r\n                    }\r\n                    else {\r\n                        o.fillColor = options.fillColor;\r\n                    }\r\n                }\r\n                else if (k === 'fillOpacity') {}\r\n                else {\r\n                    (<any>o)[k] = (<any>options)[k];\r\n                }\r\n            });\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     *  Maps an IPolylineOptions object to a Microsoft.Maps.IPolylineOptions.\r\n     *\r\n     * @param options - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    public static TranslatePolylineOptions(options: IPolylineOptions): Microsoft.Maps.IPolylineOptions {\r\n        const o: Microsoft.Maps.IPolylineOptions | any = {};\r\n        const f: (s: string, a: number) => string = (s, a) => {\r\n            const m = /rgba?\\((\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*\\d+[\\.\\d+]*)*\\)/g.exec(s);\r\n            if (m && m.length > 3) {\r\n                a = a > 1 ? (a / 100) : a;\r\n                return 'rgba(' + [m[1], m[2], m[3], a].join(',') + ')';\r\n            }\r\n            else if (s[0] === '#') {\r\n                const x: number = a > 1 ? a : Math.floor(a * 255);\r\n                const z: string = s.substr(1);\r\n                const r: number = parseInt(z.substr(0, 2), 16);\r\n                const g: number = parseInt(z.substr(2, 2), 16);\r\n                const b: number = parseInt(z.substr(4, 2), 16);\r\n                return 'rgba(' + [r , g, b, a].join(',') + ')';\r\n            }\r\n            else {\r\n                return s;\r\n            }\r\n        };\r\n        Object.keys(options)\r\n            .filter(k => BingConversions._polylineOptionsAttributes.indexOf(k) !== -1)\r\n            .forEach((k) => {\r\n                if (k === 'strokeWeight') {\r\n                    o.strokeThickness = options.strokeWeight;\r\n                } else if (k === 'strokeColor') {\r\n                    if (options.strokeOpacity) {\r\n                        o.strokeColor = f(options.strokeColor, options.strokeOpacity);\r\n                    }\r\n                    else {\r\n                        o.strokeColor = options.strokeColor;\r\n                    }\r\n                }\r\n                else if (k === 'strokeOpacity') {\r\n                }\r\n                else {\r\n                    o[k] = (<any>options)[k];\r\n                }\r\n            });\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Maps an IMapOptions object to a Microsoft.Maps.IViewOptions object.\r\n     *\r\n     * @param options - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof BingConversions\r\n     */\r\n    public static TranslateViewOptions(options: IMapOptions): Microsoft.Maps.IViewOptions {\r\n        const o: Microsoft.Maps.IViewOptions | any = {};\r\n        Object.keys(options)\r\n            .filter(k => BingConversions._viewOptionsAttributes.indexOf(k) !== -1)\r\n            .forEach((k) => {\r\n                if (k === 'center') {\r\n                    o.center = BingConversions.TranslateLocation(options.center);\r\n                } else if (k === 'bounds') {\r\n                    o.bounds = BingConversions.TranslateBounds(options.bounds);\r\n                } else if (k === 'centerOffset') {\r\n                    o.centerOffset = BingConversions.TranslatePoint(options.centerOffset);\r\n                } else if (k === 'mapTypeId') {\r\n                    o.mapTypeId = Microsoft.Maps.MapTypeId[(<any>MapTypeId)[options.mapTypeId]];\r\n                } else {\r\n                    o[k] = (<any>options)[k];\r\n                }\r\n            });\r\n        return o;\r\n    }\r\n\r\n}\r\n","import { ILatLong } from '../../interfaces/ilatlong';\r\nimport { IPoint } from '../../interfaces/ipoint';\r\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\r\nimport { Marker } from '../marker';\r\nimport { BingMapService } from '../../services/bing/bing-map.service';\r\nimport { BingConversions } from '../../services/bing/bing-conversions';\r\n\r\n/**\r\n * Concrete implementation of the {@link Marker} contract for the Bing Maps V8 map architecture.\r\n *\r\n * @export\r\n */\r\nexport class BingMarker implements Marker {\r\n\r\n    ///\r\n    /// Field definitions\r\n    ///\r\n    private _metadata: Map<string, any> = new Map<string, any>();\r\n    private _isFirst = false;\r\n    private _isLast = true;\r\n\r\n    ///\r\n    /// Property definitions\r\n    ///\r\n\r\n    /**\r\n     * Indicates that the marker is the first marker in a set.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public get IsFirst(): boolean { return this._isFirst; }\r\n    public set IsFirst(val: boolean) { this._isFirst = val; }\r\n\r\n    /**\r\n     * Indicates that the marker is the last marker in the set.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public get IsLast(): boolean { return this._isLast; }\r\n    public set IsLast(val: boolean) { this._isLast = val; }\r\n\r\n    /**\r\n     * Gets the Location of the marker\r\n     *\r\n     * @readonly\r\n     * @memberof BingMarker\r\n     */\r\n    public get Location(): ILatLong {\r\n        const l: Microsoft.Maps.Location = this._pushpin.getLocation();\r\n        return {\r\n            latitude: l.latitude,\r\n            longitude: l.longitude\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the marker metadata.\r\n     *\r\n     * @readonly\r\n     * @memberof BingMarker\r\n     */\r\n    public get Metadata(): Map<string, any> { return this._metadata; }\r\n\r\n    /**\r\n     * Gets the native primitve implementing the marker, in this case {@link Microsoft.Maps.Pushpin}\r\n     *\r\n     * @readonly\r\n     * @memberof BingMarker\r\n     */\r\n    public get NativePrimitve(): any { return this._pushpin; }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of BingMarker.\r\n     * @param _pushpin - The {@link Microsoft.Maps.Pushpin} underlying the model.\r\n     * @param _map - The context map.\r\n     * @param _layer - The context layer.\r\n     *\r\n     * @memberof BingMarker\r\n     */\r\n    constructor(private _pushpin: Microsoft.Maps.Pushpin, protected _map: Microsoft.Maps.Map, protected _layer: Microsoft.Maps.Layer) { }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Adds an event listener to the marker.\r\n     *\r\n     * @abstract\r\n     * @param eventType - String containing the event for which to register the listener (e.g. \"click\")\r\n     * @param fn - Delegate invoked when the event occurs.\r\n     *\r\n     * @memberof BingMarker\r\n     */\r\n    public AddListener(eventType: string, fn: Function): void {\r\n        Microsoft.Maps.Events.addHandler(this._pushpin, eventType, (e) => {\r\n            fn(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes the marker.\r\n     *\r\n     * @abstract\r\n     *\r\n     * @memberof BingMarker\r\n     */\r\n    public DeleteMarker(): void {\r\n        if (!this._map && !this._layer) { return; }\r\n        if (this._layer) { this._layer.remove(this.NativePrimitve); }\r\n        else {\r\n            this._map.entities.remove(this.NativePrimitve);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the marker label\r\n     *\r\n     * @abstract\r\n     *\r\n     * @memberof BingMarker\r\n     */\r\n    public GetLabel(): string {\r\n        return this._pushpin.getText();\r\n    }\r\n\r\n    /**\r\n     * Gets whether the marker is visible.\r\n     *\r\n     * @returns - True if the marker is visible, false otherwise.\r\n     *\r\n     * @memberof BingMarker\r\n     */\r\n    public GetVisible(): boolean {\r\n        return this._pushpin.getVisible();\r\n    }\r\n\r\n    /**\r\n     * Sets the anchor for the marker. Use this to adjust the root location for the marker to accomodate various marker image sizes.\r\n     *\r\n     * @abstract\r\n     * @param anchor - Point coordinates for the marker anchor.\r\n     *\r\n     * @memberof BingMarker\r\n     */\r\n    public SetAnchor(anchor: IPoint): void {\r\n        const o: Microsoft.Maps.IPushpinOptions = {};\r\n        o.anchor = new Microsoft.Maps.Point(anchor.x, anchor.y);\r\n        this._pushpin.setOptions(o);\r\n    }\r\n\r\n    /**\r\n     * Sets the draggability of a marker.\r\n     *\r\n     * @abstract\r\n     * @param draggable - True to mark the marker as draggable, false otherwise.\r\n     *\r\n     * @memberof BingMarker\r\n     */\r\n    public SetDraggable(draggable: boolean): void {\r\n        const o: Microsoft.Maps.IPushpinOptions = {};\r\n        o.draggable = draggable;\r\n        this._pushpin.setOptions(o);\r\n    }\r\n\r\n    /**\r\n     * Sets the icon for the marker.\r\n     *\r\n     * @abstract\r\n     * @param icon - String containing the icon in various forms (url, data url, etc.)\r\n     *\r\n     * @memberof BingMarker\r\n     */\r\n    public SetIcon(icon: string): void {\r\n        const o: Microsoft.Maps.IPushpinOptions = {};\r\n        o.icon = icon;\r\n        this._pushpin.setOptions(o);\r\n    }\r\n\r\n    /**\r\n     * Sets the marker label.\r\n     *\r\n     * @abstract\r\n     * @param label - String containing the label to set.\r\n     *\r\n     * @memberof BingMarker\r\n     */\r\n    public SetLabel(label: string): void {\r\n        const o: Microsoft.Maps.IPushpinOptions = {};\r\n        o.text = label;\r\n        this._pushpin.setOptions(o);\r\n    }\r\n\r\n    /**\r\n     * Sets the marker position.\r\n     *\r\n     * @abstract\r\n     * @param latLng - Geo coordinates to set the marker position to.\r\n     *\r\n     * @memberof BingMarker\r\n     */\r\n    public SetPosition(latLng: ILatLong): void {\r\n        const p: Microsoft.Maps.Location = BingConversions.TranslateLocation(latLng);\r\n        this._pushpin.setLocation(p);\r\n    }\r\n\r\n    /**\r\n     * Sets the marker title.\r\n     *\r\n     * @abstract\r\n     * @param title - String containing the title to set.\r\n     *\r\n     * @memberof BingMarker\r\n     */\r\n    public SetTitle(title: string): void {\r\n        const o: Microsoft.Maps.IPushpinOptions | any = {};\r\n        o.title = title;\r\n        this._pushpin.setOptions(o);\r\n    }\r\n\r\n    /**\r\n     * Sets the marker options.\r\n     *\r\n     * @abstract\r\n     * @param options - {@link IMarkerOptions} object containing the marker options to set. The supplied options are\r\n     * merged with the underlying marker options.\r\n     * @memberof Marker\r\n     */\r\n    public SetOptions(options: IMarkerOptions): void {\r\n        const o: Microsoft.Maps.IPushpinOptions =  BingConversions.TranslateMarkerOptions(options);\r\n        this._pushpin.setOptions(o);\r\n    }\r\n\r\n    /**\r\n     * Sets whether the marker is visible.\r\n     *\r\n     * @param visible - True to set the marker visible, false otherwise.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public SetVisible(visible: boolean): void {\r\n        const o: Microsoft.Maps.IPushpinOptions | any = {};\r\n        o.visible = visible;\r\n        this._pushpin.setOptions(o);\r\n    }\r\n\r\n}\r\n","import { BingMarker } from './bing-marker';\r\nimport { SpiderClusterMarker } from '../spider-cluster-marker';\r\n\r\nexport class BingSpiderClusterMarker extends BingMarker implements SpiderClusterMarker {\r\n\r\n    /** The parent pushpin in which the spider pushpin is derived from. */\r\n    public ParentMarker: BingMarker;\r\n\r\n    /** The stick that connects the spider pushpin to the cluster. */\r\n    public Stick: Microsoft.Maps.Polyline;\r\n\r\n}\r\n","import { IClusterOptions } from '../../interfaces/icluster-options';\r\nimport { ISpiderClusterOptions } from '../../interfaces/ispider-cluster-options';\r\nimport { BingConversions } from '../../services/bing/bing-conversions';\r\nimport { BingMapService } from '../../services/bing/bing-map.service';\r\nimport { MapService } from '../../services/map.service';\r\nimport { Layer } from '../layer';\r\nimport { Marker } from '../marker';\r\nimport { InfoWindow } from '../info-window';\r\nimport { BingSpiderClusterMarker } from './bing-spider-cluster-marker';\r\nimport { BingMarker } from './bing-marker';\r\n\r\n/**\r\n * Concrete implementation of a clustering layer for the Bing Map Provider.\r\n *\r\n * @export\r\n */\r\nexport class BingClusterLayer implements Layer {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _isClustering = true;\r\n    private _markers: Array<Marker> = new Array<Marker>();\r\n    private _markerLookup: Map<Microsoft.Maps.Pushpin, Marker> = new Map<Microsoft.Maps.Pushpin, Marker>();\r\n    private _pendingMarkers: Array<Marker> = new Array<Marker>();\r\n    private _spiderMarkers: Array<BingSpiderClusterMarker> = new Array<BingSpiderClusterMarker>();\r\n    private _spiderMarkerLookup: Map<Microsoft.Maps.Pushpin, BingSpiderClusterMarker> =\r\n                     new Map<Microsoft.Maps.Pushpin, BingSpiderClusterMarker>();\r\n    private _useSpiderCluster = false;\r\n    private _mapclicks = 0;\r\n    private _spiderLayer: Microsoft.Maps.Layer;\r\n    private _events: Array<Microsoft.Maps.IHandlerId> = new Array<Microsoft.Maps.IHandlerId>();\r\n    private _currentZoom = 0;\r\n    private _spiderOptions: ISpiderClusterOptions = {\r\n        circleSpiralSwitchover: 9,\r\n        collapseClusterOnMapChange: false,\r\n        collapseClusterOnNthClick: 1,\r\n        invokeClickOnHover: true,\r\n        minCircleLength: 60,\r\n        minSpiralAngleSeperation: 25,\r\n        spiralDistanceFactor: 5,\r\n        stickStyle: {\r\n            strokeColor: 'black',\r\n            strokeThickness: 2\r\n        },\r\n        stickHoverStyle: { strokeColor: 'red' },\r\n        markerSelected: null,\r\n        markerUnSelected: null\r\n    };\r\n    private _currentCluster: Microsoft.Maps.ClusterPushpin = null;\r\n\r\n    ///\r\n    /// Property definitions\r\n    ///\r\n\r\n    /**\r\n     * Get the native primitive underneath the abstraction layer.\r\n     *\r\n     * @returns Microsoft.Maps.ClusterLayer.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public get NativePrimitve(): any {\r\n        return this._layer;\r\n    }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates a new instance of the BingClusterLayer class.\r\n     *\r\n     * @param _layer Microsoft.Maps.ClusterLayer. Native Bing Cluster Layer supporting the cluster layer.\r\n     * @param _maps MapService. MapService implementation to leverage for the layer.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    constructor(private _layer: Microsoft.Maps.ClusterLayer, private _maps: MapService) { }\r\n\r\n\r\n    ///\r\n    /// Public methods, Layer interface implementation\r\n    ///\r\n\r\n    /**\r\n     * Adds an event listener for the layer.\r\n     *\r\n     * @param eventType string. Type of event to add (click, mouseover, etc). You can use any event that the underlying native\r\n     * layer supports.\r\n     * @param fn function. Handler to call when the event occurs.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public AddListener(eventType: string, fn: Function): void {\r\n        Microsoft.Maps.Events.addHandler(this._layer, eventType, (e) => {\r\n            fn(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds an entity to the layer. Use this method with caution as it will\r\n     * trigger a recaluation of the clusters (and associated markers if approprite) for\r\n     * each invocation. If you use this method to add many markers to the cluster, use\r\n     *\r\n     * @param entity Marker. Entity to add to the layer.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public AddEntity(entity: Marker): void {\r\n        let isMarker: boolean = entity instanceof Marker;\r\n        isMarker = entity instanceof BingMarker || isMarker;\r\n        if (isMarker) {\r\n            if (entity.IsFirst) {\r\n                this.StopClustering();\r\n            }\r\n        }\r\n        if (entity.NativePrimitve && entity.Location) {\r\n            if (this._isClustering) {\r\n                const p: Array<Microsoft.Maps.Pushpin> = this._layer.getPushpins();\r\n                p.push(entity.NativePrimitve);\r\n                this._layer.setPushpins(p);\r\n                this._markers.push(entity);\r\n            }\r\n            else {\r\n                this._pendingMarkers.push(entity);\r\n            }\r\n            this._markerLookup.set(entity.NativePrimitve, entity);\r\n        }\r\n        if (isMarker) {\r\n            if (entity.IsLast) {\r\n                this.StartClustering();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a number of markers to the layer.\r\n     *\r\n     * @param entities Array<Marker>. Entities to add to the layer.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public AddEntities(entities: Array<Marker>): void {\r\n        if (entities != null && Array.isArray(entities) && entities.length !== 0 ) {\r\n            const e: Array<Microsoft.Maps.Pushpin> = entities.map(p => {\r\n                this._markerLookup.set(p.NativePrimitve, p);\r\n                return p.NativePrimitve;\r\n            });\r\n            if (this._isClustering) {\r\n                const p: Array<Microsoft.Maps.Pushpin> = this._layer.getPushpins();\r\n                p.push(...e);\r\n                this._layer.setPushpins(p);\r\n                this._markers.push(...entities);\r\n            }\r\n            else {\r\n                this._pendingMarkers.push(...entities);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes spider behavior for the clusering layer (when a cluster maker is clicked, it explodes into a spider of the\r\n     * individual underlying pins.\r\n     *\r\n     * @param options ISpiderClusterOptions. Optional. Options governing the behavior of the spider.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public InitializeSpiderClusterSupport(options?: ISpiderClusterOptions): void {\r\n        if (this._useSpiderCluster) { return; }\r\n        const m: Microsoft.Maps.Map = (<BingMapService>this._maps).MapInstance;\r\n        this._useSpiderCluster = true;\r\n        this._spiderLayer = new Microsoft.Maps.Layer();\r\n        this._currentZoom = m.getZoom();\r\n        this.SetSpiderOptions(options);\r\n        m.layers.insert(this._spiderLayer);\r\n\r\n        ///\r\n        /// Add spider related events....\r\n        ///\r\n        this._events.push(Microsoft.Maps.Events.addHandler(m, 'click', e => this.OnMapClick(e)));\r\n        this._events.push(Microsoft.Maps.Events.addHandler(m, 'viewchangestart', e => this.OnMapViewChangeStart(e)));\r\n        this._events.push(Microsoft.Maps.Events.addHandler(m, 'viewchangeend', e => this.OnMapViewChangeEnd(e)));\r\n        this._events.push(Microsoft.Maps.Events.addHandler(this._layer, 'click', e => this.OnLayerClick(e)));\r\n        this._events.push(Microsoft.Maps.Events.addHandler(this._spiderLayer, 'click', e => this.OnLayerClick(e)));\r\n        this._events.push(Microsoft.Maps.Events.addHandler(this._spiderLayer, 'mouseover', e => this.OnSpiderMouseOver(e)));\r\n        this._events.push(Microsoft.Maps.Events.addHandler(this._spiderLayer, 'mouseout', e => this.OnSpiderMouseOut(e)));\r\n    }\r\n\r\n    /**\r\n     * Deletes the clustering layer.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public Delete(): void {\r\n        if (this._useSpiderCluster) {\r\n            this._spiderLayer.clear();\r\n            (<BingMapService>this._maps).MapPromise.then(m => {\r\n                m.layers.remove(this._spiderLayer);\r\n                this._spiderLayer = null;\r\n            });\r\n            this._events.forEach(e => Microsoft.Maps.Events.removeHandler(e));\r\n            this._events.splice(0);\r\n            this._useSpiderCluster = false;\r\n        }\r\n        this._markers.splice(0);\r\n        this._spiderMarkers.splice(0);\r\n        this._pendingMarkers.splice(0);\r\n        this._markerLookup.clear();\r\n        this._maps.DeleteLayer(this);\r\n    }\r\n\r\n    /**\r\n     * Returns the abstract marker used to wrap the Bing Pushpin.\r\n     *\r\n     * @returns Marker. The abstract marker object representing the pushpin.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public GetMarkerFromBingMarker(pin: Microsoft.Maps.Pushpin): Marker {\r\n        const m: Marker = this._markerLookup.get(pin);\r\n        return m;\r\n    }\r\n\r\n    /**\r\n     * Returns the options governing the behavior of the layer.\r\n     *\r\n     * @returns IClusterOptions. The layer options.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public GetOptions(): IClusterOptions {\r\n        const o: Microsoft.Maps.IClusterLayerOptions = this._layer.getOptions();\r\n        const options: IClusterOptions = {\r\n            id: 0,\r\n            gridSize: o.gridSize,\r\n            layerOffset: o.layerOffset,\r\n            clusteringEnabled: o.clusteringEnabled,\r\n            callback: o.callback,\r\n            clusteredPinCallback: o.clusteredPinCallback,\r\n            visible: o.visible,\r\n            zIndex: o.zIndex\r\n        };\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * Returns the visibility state of the layer.\r\n     *\r\n     * @returns Boolean. True is the layer is visible, false otherwise.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public GetVisible(): boolean {\r\n        return this._layer.getOptions().visible;\r\n    }\r\n\r\n    /**\r\n     * Returns the abstract marker used to wrap the Bing Pushpin.\r\n     *\r\n     * @returns - The abstract marker object representing the pushpin.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public GetSpiderMarkerFromBingMarker(pin: Microsoft.Maps.Pushpin): BingSpiderClusterMarker {\r\n        const m: BingSpiderClusterMarker = this._spiderMarkerLookup.get(pin);\r\n        return m;\r\n    }\r\n\r\n    /**\r\n     * Removes an entity from the cluster layer.\r\n     *\r\n     * @param entity Marker - Entity to be removed from the layer.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public RemoveEntity(entity: Marker): void {\r\n        if (entity.NativePrimitve && entity.Location) {\r\n            const j: number = this._markers.indexOf(entity);\r\n            const k: number = this._pendingMarkers.indexOf(entity);\r\n            if (j > -1) { this._markers.splice(j, 1); }\r\n            if (k > -1) { this._pendingMarkers.splice(k, 1); }\r\n            if (this._isClustering) {\r\n                const p: Array<Microsoft.Maps.Pushpin> = this._layer.getPushpins();\r\n                const i: number = p.indexOf(entity.NativePrimitve);\r\n                if (i > -1) {\r\n                    p.splice(i, 1);\r\n                    this._layer.setPushpins(p);\r\n                }\r\n            }\r\n            this._markerLookup.delete(entity.NativePrimitve);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the entities for the cluster layer.\r\n     *\r\n     * @param entities Array<Marker> containing\r\n     * the entities to add to the cluster. This replaces any existing entities.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public SetEntities(entities: Array<Marker>): void {\r\n        const p: Array<Microsoft.Maps.Pushpin> = new Array<Microsoft.Maps.Pushpin>();\r\n        this._markers.splice(0);\r\n        this._markerLookup.clear();\r\n        entities.forEach((e: any) => {\r\n            if (e.NativePrimitve && e.Location) {\r\n                this._markers.push(e);\r\n                this._markerLookup.set(e.NativePrimitve, e);\r\n                p.push(<Microsoft.Maps.Pushpin>e.NativePrimitve);\r\n            }\r\n        });\r\n        this._layer.setPushpins(p);\r\n    }\r\n\r\n    /**\r\n     * Sets the options for the cluster layer.\r\n     *\r\n     * @param options IClusterOptions containing the options enumeration controlling the layer behavior. The supplied options\r\n     * are merged with the default/existing options.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public SetOptions(options: IClusterOptions): void {\r\n        const o: Microsoft.Maps.IClusterLayerOptions = BingConversions.TranslateClusterOptions(options);\r\n        this._layer.setOptions(o);\r\n        if (options.spiderClusterOptions) { this.SetSpiderOptions(options.spiderClusterOptions); }\r\n    }\r\n\r\n    /**\r\n     * Toggles the cluster layer visibility.\r\n     *\r\n     * @param visible Boolean true to make the layer visible, false to hide the layer.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public SetVisible(visible: boolean): void {\r\n        const o: Microsoft.Maps.IClusterLayerOptions = this._layer.getOptions();\r\n        o.visible = visible;\r\n        this._layer.setOptions(o);\r\n    }\r\n\r\n    /**\r\n     * Start to actually cluster the entities in a cluster layer. This method should be called after the initial set of entities\r\n     * have been added to the cluster. This method is used for performance reasons as adding an entitiy will recalculate all clusters.\r\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\r\n     * complete to recalculate the clusters.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public StartClustering(): void {\r\n        if (this._isClustering) { return; }\r\n\r\n        const p: Array<Microsoft.Maps.Pushpin> = new Array<Microsoft.Maps.Pushpin>();\r\n        this._markers.forEach(e => {\r\n            if (e.NativePrimitve && e.Location) {\r\n                p.push(<Microsoft.Maps.Pushpin>e.NativePrimitve);\r\n            }\r\n        });\r\n        this._pendingMarkers.forEach(e => {\r\n            if (e.NativePrimitve && e.Location) {\r\n                p.push(<Microsoft.Maps.Pushpin>e.NativePrimitve);\r\n            }\r\n        });\r\n        this._layer.setPushpins(p);\r\n        this._markers = this._markers.concat(this._pendingMarkers.splice(0));\r\n        this._isClustering = true;\r\n    }\r\n\r\n    /**\r\n     * Stop to actually cluster the entities in a cluster layer.\r\n     * This method is used for performance reasons as adding an entitiy will recalculate all clusters.\r\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\r\n     * complete to recalculate the clusters.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    public StopClustering() {\r\n        if (!this._isClustering) { return; }\r\n        this._isClustering = false;\r\n    }\r\n\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n\r\n    /**\r\n     * Creates a copy of a pushpins basic options.\r\n     *\r\n     * @param pin Pushpin to copy options from.\r\n     * @returns - A copy of a pushpins basic options.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    private GetBasicPushpinOptions(pin: Microsoft.Maps.Pushpin): Microsoft.Maps.IPushpinOptions {\r\n        return <Microsoft.Maps.IPushpinOptions>{\r\n            anchor: pin.getAnchor(),\r\n            color: pin.getColor(),\r\n            cursor: pin.getCursor(),\r\n            icon: pin.getIcon(),\r\n            roundClickableArea: pin.getRoundClickableArea(),\r\n            subTitle: pin.getSubTitle(),\r\n            text: pin.getText(),\r\n            textOffset: pin.getTextOffset(),\r\n            title: pin.getTitle()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Hides the spider cluster and resotres the original pin.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    private HideSpiderCluster(): void {\r\n        this._mapclicks = 0;\r\n        if (this._currentCluster) {\r\n            this._spiderLayer.clear();\r\n            this._spiderMarkers.splice(0);\r\n            this._spiderMarkerLookup.clear();\r\n            this._currentCluster = null;\r\n            this._mapclicks = -1;\r\n            if (this._spiderOptions.markerUnSelected) { this._spiderOptions.markerUnSelected(); }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Click event handler for when a shape in the cluster layer is clicked.\r\n     *\r\n     * @param e The mouse event argurment from the click event.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    private OnLayerClick(e: Microsoft.Maps.IMouseEventArgs): void {\r\n        if (e.primitive instanceof Microsoft.Maps.ClusterPushpin) {\r\n            const cp: Microsoft.Maps.ClusterPushpin = <Microsoft.Maps.ClusterPushpin>e.primitive;\r\n            const showNewCluster: boolean = cp !== this._currentCluster;\r\n            this.HideSpiderCluster();\r\n            if (showNewCluster) {\r\n                this.ShowSpiderCluster(<Microsoft.Maps.ClusterPushpin>e.primitive);\r\n            }\r\n        } else {\r\n            const pin: Microsoft.Maps.Pushpin = <Microsoft.Maps.Pushpin>e.primitive;\r\n            if (pin.metadata && pin.metadata.isClusterMarker) {\r\n                const m: BingSpiderClusterMarker = this.GetSpiderMarkerFromBingMarker(pin);\r\n                const p: BingMarker = m.ParentMarker;\r\n                const ppin: Microsoft.Maps.Pushpin = p.NativePrimitve;\r\n                if (this._spiderOptions.markerSelected) {\r\n                    this._spiderOptions.markerSelected(p, new BingMarker(this._currentCluster, null, null));\r\n                }\r\n                if (Microsoft.Maps.Events.hasHandler(ppin, 'click')) { Microsoft.Maps.Events.invoke(ppin, 'click', e); }\r\n                this._mapclicks = 0;\r\n            } else {\r\n                if (this._spiderOptions.markerSelected) { this._spiderOptions.markerSelected(this.GetMarkerFromBingMarker(pin), null); }\r\n                if (Microsoft.Maps.Events.hasHandler(pin, 'click')) { Microsoft.Maps.Events.invoke(pin, 'click', e); }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delegate handling the click event on the map (outside a spider cluster). Depending on the\r\n     * spider options, closes the cluster or increments the click counter.\r\n     *\r\n     * @param e - Mouse event\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    private OnMapClick(e: Microsoft.Maps.IMouseEventArgs | Microsoft.Maps.IMapTypeChangeEventArgs): void {\r\n        if (this._mapclicks === -1) {\r\n            return;\r\n        } else if (++this._mapclicks >= this._spiderOptions.collapseClusterOnNthClick) {\r\n            this.HideSpiderCluster();\r\n        } else {\r\n            // do nothing as this._mapclicks has already been incremented above\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delegate handling the map view changed end event. Hides the spider cluster if the zoom level has changed.\r\n     *\r\n     * @param e - Mouse event.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    private OnMapViewChangeEnd(e: Microsoft.Maps.IMouseEventArgs | Microsoft.Maps.IMapTypeChangeEventArgs): void {\r\n        const z: number = (<Microsoft.Maps.Map>e.target).getZoom();\r\n        const hasZoomChanged: boolean = (z !== this._currentZoom);\r\n        this._currentZoom = z;\r\n        if (hasZoomChanged) {\r\n            this.HideSpiderCluster();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delegate handling the map view change start event. Depending on the spider options, hides the\r\n     * the exploded spider or does nothing.\r\n     *\r\n     * @param e - Mouse event.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    private OnMapViewChangeStart(e: Microsoft.Maps.IMouseEventArgs | Microsoft.Maps.IMapTypeChangeEventArgs): void {\r\n        if (this._spiderOptions.collapseClusterOnMapChange) {\r\n            this.HideSpiderCluster();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delegate invoked on mouse out on an exploded spider marker. Resets the hover style on the stick.\r\n     *\r\n     * @param e - Mouse event.\r\n     */\r\n    private OnSpiderMouseOut(e: Microsoft.Maps.IMouseEventArgs): void {\r\n        const pin: Microsoft.Maps.Pushpin = <Microsoft.Maps.Pushpin>e.primitive;\r\n        if (pin instanceof Microsoft.Maps.Pushpin && pin.metadata && pin.metadata.isClusterMarker) {\r\n            const m: BingSpiderClusterMarker = this.GetSpiderMarkerFromBingMarker(pin);\r\n            m.Stick.setOptions(this._spiderOptions.stickStyle);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoked on mouse over on an exploded spider marker. Sets the hover style on the stick. Also invokes the click event\r\n     * on the underlying original marker dependent on the spider options.\r\n     *\r\n     * @param e - Mouse event.\r\n     */\r\n    private OnSpiderMouseOver(e: Microsoft.Maps.IMouseEventArgs): void {\r\n        const pin: Microsoft.Maps.Pushpin = <Microsoft.Maps.Pushpin>e.primitive;\r\n        if (pin instanceof Microsoft.Maps.Pushpin && pin.metadata && pin.metadata.isClusterMarker) {\r\n            const m: BingSpiderClusterMarker = this.GetSpiderMarkerFromBingMarker(pin);\r\n            m.Stick.setOptions(this._spiderOptions.stickHoverStyle);\r\n            if (this._spiderOptions.invokeClickOnHover) {\r\n                const p: BingMarker = m.ParentMarker;\r\n                const ppin: Microsoft.Maps.Pushpin = p.NativePrimitve;\r\n                if (Microsoft.Maps.Events.hasHandler(ppin, 'click')) { Microsoft.Maps.Events.invoke(ppin, 'click', e); }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the options for spider behavior.\r\n     *\r\n     * @param options ISpiderClusterOptions containing the options enumeration controlling the spider cluster behavior. The supplied options\r\n     * are merged with the default/existing options.\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    private SetSpiderOptions(options: ISpiderClusterOptions): void {\r\n        if (options) {\r\n            if (typeof options.circleSpiralSwitchover === 'number') {\r\n                this._spiderOptions.circleSpiralSwitchover = options.circleSpiralSwitchover;\r\n            }\r\n            if (typeof options.collapseClusterOnMapChange === 'boolean') {\r\n                this._spiderOptions.collapseClusterOnMapChange = options.collapseClusterOnMapChange;\r\n            }\r\n            if (typeof options.collapseClusterOnNthClick === 'number') {\r\n                this._spiderOptions.collapseClusterOnNthClick = options.collapseClusterOnNthClick;\r\n            }\r\n            if (typeof options.invokeClickOnHover === 'boolean') {\r\n                this._spiderOptions.invokeClickOnHover = options.invokeClickOnHover;\r\n            }\r\n            if (typeof options.minSpiralAngleSeperation === 'number') {\r\n                this._spiderOptions.minSpiralAngleSeperation = options.minSpiralAngleSeperation;\r\n            }\r\n            if (typeof options.spiralDistanceFactor === 'number') {\r\n                this._spiderOptions.spiralDistanceFactor = options.spiralDistanceFactor;\r\n            }\r\n            if (typeof options.minCircleLength === 'number') {\r\n                this._spiderOptions.minCircleLength = options.minCircleLength;\r\n            }\r\n            if (options.stickHoverStyle) {\r\n                this._spiderOptions.stickHoverStyle = options.stickHoverStyle;\r\n            }\r\n            if (options.stickStyle) {\r\n                this._spiderOptions.stickStyle = options.stickStyle;\r\n            }\r\n            if (options.markerSelected) {\r\n                this._spiderOptions.markerSelected = options.markerSelected;\r\n            }\r\n            if (options.markerUnSelected) {\r\n                this._spiderOptions.markerUnSelected = options.markerUnSelected;\r\n            }\r\n            if (typeof options.visible === 'boolean') {\r\n                this._spiderOptions.visible = options.visible;\r\n            }\r\n            this.SetOptions(<IClusterOptions>options);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Expands a cluster into it's open spider layout.\r\n     *\r\n     * @param cluster The cluster to show in it's open spider layout..\r\n     *\r\n     * @memberof BingClusterLayer\r\n     */\r\n    private ShowSpiderCluster(cluster: Microsoft.Maps.ClusterPushpin): void {\r\n        this.HideSpiderCluster();\r\n        this._currentCluster = cluster;\r\n\r\n        if (cluster && cluster.containedPushpins) {\r\n            // Create spider data.\r\n            const m: Microsoft.Maps.Map = (<BingMapService>this._maps).MapInstance;\r\n            const pins: Array<Microsoft.Maps.Pushpin> = cluster.containedPushpins;\r\n            const center: Microsoft.Maps.Location = cluster.getLocation();\r\n            const centerPoint: Microsoft.Maps.Point =\r\n                <Microsoft.Maps.Point>m.tryLocationToPixel(center, Microsoft.Maps.PixelReference.control);\r\n            let stick: Microsoft.Maps.Polyline;\r\n            let angle = 0;\r\n            const makeSpiral: boolean = pins.length > this._spiderOptions.circleSpiralSwitchover;\r\n            let legPixelLength: number;\r\n            let stepAngle: number;\r\n            let stepLength: number;\r\n\r\n            if (makeSpiral) {\r\n                legPixelLength = this._spiderOptions.minCircleLength / Math.PI;\r\n                stepLength = 2 * Math.PI * this._spiderOptions.spiralDistanceFactor;\r\n            }\r\n            else {\r\n                stepAngle = 2 * Math.PI / pins.length;\r\n                legPixelLength = (this._spiderOptions.spiralDistanceFactor / stepAngle / Math.PI / 2) * pins.length;\r\n                if (legPixelLength < this._spiderOptions.minCircleLength) { legPixelLength = this._spiderOptions.minCircleLength; }\r\n            }\r\n\r\n            for (let i = 0, len = pins.length; i < len; i++) {\r\n                // Calculate spider pin location.\r\n                if (!makeSpiral) {\r\n                    angle = stepAngle * i;\r\n                }\r\n                else {\r\n                    angle += this._spiderOptions.minSpiralAngleSeperation / legPixelLength + i * 0.0005;\r\n                    legPixelLength += stepLength / angle;\r\n                }\r\n                const point: Microsoft.Maps.Point =\r\n                    new Microsoft.Maps.Point(centerPoint.x + legPixelLength * Math.cos(angle),\r\n                        centerPoint.y + legPixelLength * Math.sin(angle));\r\n                const loc: Microsoft.Maps.Location =\r\n                    <Microsoft.Maps.Location>m.tryPixelToLocation(point, Microsoft.Maps.PixelReference.control);\r\n\r\n                // Create stick to pin.\r\n                stick = new Microsoft.Maps.Polyline([center, loc], this._spiderOptions.stickStyle);\r\n                this._spiderLayer.add(stick);\r\n\r\n                // Create pin in spiral that contains same metadata as parent pin.\r\n                const pin: Microsoft.Maps.Pushpin = new Microsoft.Maps.Pushpin(loc);\r\n                pin.metadata = pins[i].metadata || {};\r\n                pin.metadata.isClusterMarker = true;\r\n                pin.setOptions(this.GetBasicPushpinOptions(pins[i]));\r\n                this._spiderLayer.add(pin);\r\n\r\n                const spiderMarker: BingSpiderClusterMarker = new BingSpiderClusterMarker(pin, null, this._spiderLayer);\r\n                spiderMarker.Stick = stick;\r\n                spiderMarker.ParentMarker = <BingMarker>this.GetMarkerFromBingMarker(pins[i]);\r\n                this._spiderMarkers.push(spiderMarker);\r\n                this._spiderMarkerLookup.set(pin, spiderMarker);\r\n\r\n            }\r\n            this._mapclicks = 0;\r\n        }\r\n    }\r\n\r\n}\r\n","import { ILatLong } from '../../interfaces/ilatlong';\r\nimport { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\r\nimport { InfoWindow } from '../info-window';\r\nimport { BingMapService } from '../../services/bing/bing-map.service';\r\nimport { BingConversions } from '../../services/bing/bing-conversions';\r\n\r\n/**\r\n * Concrete implementation of the {@link InfoWindow} contract for the Bing Maps V8 map architecture.\r\n *\r\n * @export\r\n */\r\nexport class BingInfoWindow implements InfoWindow {\r\n\r\n    private _isOpen: boolean;\r\n\r\n    /**\r\n     * Gets whether the info box is currently open.\r\n     *\r\n     * @readonly\r\n     * @memberof BingInfoWindow\r\n     */\r\n    public get IsOpen(): boolean {\r\n        if (this._infoBox && this._infoBox.getOptions().visible === true) { return true; }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets native primitve underlying the model.\r\n     *\r\n     * @memberof BingInfoWindow\r\n     * @property\r\n     * @readonly\r\n     */\r\n    public get NativePrimitve(): Microsoft.Maps.Infobox {\r\n        return this._infoBox;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of BingInfoWindow.\r\n     * @param _infoBox - A {@link Microsoft.Maps.Infobox} instance underlying the model\r\n     * @memberof BingInfoWindow\r\n     */\r\n    constructor(private _infoBox: Microsoft.Maps.Infobox) {\r\n        this._isOpen = false;\r\n    }\r\n\r\n    /**\r\n     * Adds an event listener to the InfoWindow.\r\n     *\r\n     * @param eventType - String containing the event for which to register the listener (e.g. \"click\")\r\n     * @param fn - Delegate invoked when the event occurs.\r\n     *\r\n     * @memberof BingInfoWindow\r\n     * @method\r\n     */\r\n    public AddListener(eventType: string, fn: Function): void {\r\n        Microsoft.Maps.Events.addHandler(this._infoBox, eventType, (e) => {\r\n            if (e.eventName === 'infoboxChanged') {\r\n                if (this._infoBox.getOptions().visible === true) { this._isOpen = true; }\r\n                else {\r\n                    if (this._infoBox.getOptions().visible === false && this._isOpen === true) {\r\n                        this._isOpen = false;\r\n                        fn(e);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                fn(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the info window.\r\n     *\r\n     * @memberof BingInfoWindow\r\n     * @method\r\n     */\r\n    public Close(): void {\r\n        const o: Microsoft.Maps.IInfoboxOptions = {};\r\n        o.visible = false;\r\n        this._infoBox.setOptions(o);\r\n    }\r\n\r\n    /**\r\n     * Gets the position of the info window.\r\n     *\r\n     * @returns - Returns the geo coordinates of the info window.\r\n     * @memberof BingInfoWindow\r\n     * @method\r\n     */\r\n    public GetPosition(): ILatLong {\r\n        const p: ILatLong = {\r\n            latitude: this._infoBox.getLocation().latitude,\r\n            longitude: this._infoBox.getLocation().longitude\r\n        };\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Opens the info window.\r\n     *\r\n     * @memberof BingInfoWindow\r\n     * @method\r\n     */\r\n    public Open(): void {\r\n        const o: Microsoft.Maps.IInfoboxOptions = {};\r\n        o.visible = true;\r\n        this._infoBox.setOptions(o);\r\n    }\r\n\r\n    /**\r\n     * Sets the info window options.\r\n     *\r\n     * @param options - Info window options to set. The options will be merged with any existing options.\r\n     *\r\n     * @memberof BingInfoWindow\r\n     * @method\r\n     */\r\n    public SetOptions(options: IInfoWindowOptions): void {\r\n        const o: Microsoft.Maps.IInfoboxOptions = BingConversions.TranslateInfoBoxOptions(options);\r\n        this._infoBox.setOptions(o);\r\n    }\r\n\r\n    /**\r\n     * Sets the info window position.\r\n     *\r\n     * @param position - Geo coordinates to move the anchor of the info window to.\r\n     *\r\n     * @memberof BingInfoWindow\r\n     * @method\r\n     */\r\n    public SetPosition(position: ILatLong): void {\r\n        const l: Microsoft.Maps.Location = BingConversions.TranslateLocation(position);\r\n        this._infoBox.setLocation(l);\r\n    }\r\n}\r\n","import { ILabelOptions } from '../interfaces/ilabel-options';\r\n\r\n/**\r\n * Abstract base implementing a label to be placed on the map.\r\n *\r\n * @export\r\n * @abstract\r\n */\r\nexport abstract class MapLabel {\r\n// export class MapLabel extends Microsoft.Maps.CustomOverlay {\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    protected _canvas: HTMLCanvasElement;\r\n\r\n    /**\r\n     * Returns the default label style for the platform\r\n     *\r\n     * @readonly\r\n     * @abstract\r\n     * @memberof MapLabel\r\n     */\r\n    public abstract get DefaultLabelStyle(): ILabelOptions;\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates a new MapLabel\r\n     * @param options Optional properties to set.\r\n     */\r\n    constructor(options: { [key: string]: any }) {\r\n        this.Set('fontFamily', 'sans-serif');\r\n        this.Set('fontSize', 12);\r\n        this.Set('fontColor', '#ffffff');\r\n        this.Set('strokeWeight', 4);\r\n        this.Set('strokeColor', '#000000');\r\n        this.Set('align', 'center');\r\n        this.SetValues(options);\r\n    }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Deletes the label from the map. This method does not atually delete the label itself, so\r\n     * it can be readded to map later.\r\n     * @memberof MapLabel\r\n     * @method\r\n     */\r\n    public Delete(): void {\r\n        this.SetMap(null);\r\n    }\r\n\r\n    /**\r\n     * Delegate called when underlying properties change.\r\n     *\r\n     * @param prop - The property or properties that have changed.\r\n     * @memberof MapLabel\r\n     * @method\r\n     */\r\n    public Changed(prop: string | Array<string>): void {\r\n        let shouldRunDrawCanvas = false;\r\n        let shouldRunDraw = false;\r\n        if (!Array.isArray(prop)) { prop = [prop]; }\r\n        prop.forEach(p => {\r\n            switch (p) {\r\n                case 'fontFamily':\r\n                case 'fontSize':\r\n                case 'fontColor':\r\n                case 'strokeWeight':\r\n                case 'strokeColor':\r\n                case 'align':\r\n                case 'text':\r\n                    shouldRunDrawCanvas = true;\r\n                    break;\r\n                case 'maxZoom':\r\n                case 'minZoom':\r\n                case 'offset':\r\n                case 'hidden':\r\n                case 'position':\r\n                    shouldRunDraw = true;\r\n                    break;\r\n            }\r\n        });\r\n        if (shouldRunDrawCanvas) { this.DrawCanvas(); }\r\n        if (shouldRunDraw) { this.Draw(); }\r\n    }\r\n\r\n    /**\r\n     * Gets the value of a setting.\r\n     *\r\n     * @param key - Key specifying the setting.\r\n     * @returns - The value of the setting.\r\n     * @memberof MapLabel\r\n     * @abstract\r\n     * @method\r\n     */\r\n    public abstract Get(key: string): any;\r\n\r\n    /**\r\n     * Gets the map associted with the label.\r\n     *\r\n     * @returns - A native map object for the underlying implementation. Implementing derivatives should return the\r\n     * actual native object.\r\n     * @memberof MapLabel\r\n     * @method\r\n     * @abstract\r\n     */\r\n    public abstract GetMap(): any;\r\n\r\n    /**\r\n     * Set the value for a setting.\r\n     *\r\n     * @param key - Key specifying the setting.\r\n     * @param val - The value to set.\r\n     * @memberof MapLabel\r\n     * @abstract\r\n     * @method\r\n     */\r\n    public abstract Set(key: string, val: any): void;\r\n\r\n    /**\r\n     * Sets the map for the label. Settings this to null remove the label from hte map.\r\n     *\r\n     * @param map - A native map object for the underlying implementation. Implementing derivatives should return the\r\n     * actual native object.\r\n     * @memberof MapLabel\r\n     * @method\r\n     */\r\n    public abstract SetMap(map: any): void;\r\n\r\n    /**\r\n     * Applies settings to the object\r\n     *\r\n     * @param options - An object containing the settings key value pairs.\r\n     * @memberof MapLabel\r\n     * @abstract\r\n     * @method\r\n     */\r\n    public abstract SetValues(options: { [key: string]: any }): void;\r\n\r\n    ///\r\n    /// Protected methods\r\n    ///\r\n\r\n    /**\r\n     * Get the visibility of the label. Visibility depends on Zoom settings.\r\n     * @returns - blank string if visible, 'hidden' if invisible.\r\n     * @protected\r\n     */\r\n    protected GetVisible() {\r\n        const minZoom: number = this.Get('minZoom');\r\n        const maxZoom: number = this.Get('maxZoom');\r\n        const hidden: boolean = this.Get('hidden');\r\n\r\n        if (hidden) {return 'hidden'; }\r\n        if (minZoom === undefined && maxZoom === undefined) { return ''; }\r\n        if (!this.GetMap()) { return ''; }\r\n\r\n        const mapZoom: number = this.GetMap().getZoom();\r\n        if (mapZoom < minZoom || mapZoom > maxZoom) { return 'hidden'; }\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Draws the label on the map.\r\n     * @memberof MapLabel\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected abstract Draw(): void;\r\n\r\n    /**\r\n     * Draws the label to the canvas 2d context.\r\n     * @memberof MapLabel\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected DrawCanvas () {\r\n        if (!this._canvas) { return; }\r\n\r\n        const style: CSSStyleDeclaration = this._canvas.style;\r\n        style.zIndex = this.Get('zIndex');\r\n\r\n        const ctx: CanvasRenderingContext2D = this._canvas.getContext('2d');\r\n        ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        ctx.strokeStyle = this.Get('strokeColor');\r\n        ctx.font = this.Get('fontSize') + 'px ' + this.Get('fontFamily');\r\n\r\n        const backgroundColor: string = this.Get('backgroundColor');\r\n        const strokeWeight: number = Number(this.Get('strokeWeight'));\r\n        const text: string = this.Get('text');\r\n        const textMeasure: TextMetrics = ctx.measureText(text);\r\n        const textWidth: number = textMeasure.width;\r\n        if (text && strokeWeight && strokeWeight > 0) {\r\n                ctx.lineWidth = strokeWeight;\r\n                ctx.strokeText(text, 4, 4);\r\n        }\r\n        if (backgroundColor && backgroundColor !== '') {\r\n            ctx.fillStyle = backgroundColor;\r\n            ctx.fillRect(0, 0, textWidth + 8, (parseInt(ctx.font, 10) * 2) - 2);\r\n        }\r\n        ctx.fillStyle = this.Get('fontColor');\r\n        ctx.fillText(text, 4, 4);\r\n\r\n        style.marginLeft = this.GetMarginLeft(textWidth) + 'px';\r\n        style.marginTop = '-0.4em';\r\n        style.pointerEvents = 'none';\r\n            // Bring actual text top in line with desired latitude.\r\n            // Cheaper than calculating height of text.\r\n    }\r\n\r\n    /**\r\n     * Gets the appropriate margin-left for the canvas.\r\n     * @param textWidth  - The width of the text, in pixels.\r\n     * @returns - The margin-left, in pixels.\r\n     * @protected\r\n     * @method\r\n     * @memberof MapLabel\r\n     */\r\n    protected GetMarginLeft(textWidth: number): number {\r\n        switch (this.Get('align')) {\r\n            case 'left':    return 0;\r\n            case 'right':   return -textWidth;\r\n        }\r\n        return textWidth / -2;\r\n    }\r\n\r\n    /**\r\n     * Delegate called when the label is added to the map. Generates and configures\r\n     * the canvas.\r\n     *\r\n     * @memberof MapLabel\r\n     * @method\r\n     * @protected\r\n     * @abstract\r\n     */\r\n    protected abstract OnAdd(): void;\r\n\r\n    /**\r\n     * Called when the label is removed from the map.\r\n     * @method\r\n     * @protected\r\n     * @memberof MapLabel\r\n     */\r\n    protected OnRemove() {\r\n        if (this._canvas && this._canvas.parentNode) {\r\n            this._canvas.parentNode.removeChild(this._canvas);\r\n        }\r\n    }\r\n}\r\n\r\n","import { BingMapService } from '../../services/bing/bing-map.service';\r\nimport { BingConversions } from '../../services/bing/bing-conversions';\r\nimport { ILabelOptions } from '../../interfaces/ilabel-options';\r\nimport { MapLabel } from '../map-label';\r\n\r\nlet id: number = 0;\r\n\r\n/**\r\n * Implements map a labled to be placed on the map.\r\n *\r\n * @export\r\n */\r\nexport class BingMapLabel extends MapLabel {\r\n\r\n    /**\r\n     * Returns the default label style for the platform\r\n     *\r\n     * @readonly\r\n     * @abstract\r\n     * @memberof BingMapLabel\r\n     */\r\n    public get DefaultLabelStyle(): ILabelOptions {\r\n        return {\r\n            fontSize: 12,\r\n            fontFamily: 'sans-serif',\r\n            fontColor: '#ffffff',\r\n            strokeWeight: 2,\r\n            strokeColor: '#000000'\r\n        };\r\n    }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates a new MapLabel\r\n     * @param options Optional properties to set.\r\n     */\r\n    constructor(options: { [key: string]: any }) {\r\n        options.fontSize = options.fontSize || 12;\r\n        options.fontColor = options.fontColor || '#ffffff';\r\n        options.strokeWeight = options.strokeWeight || 2;\r\n        options.strokeColor = options.strokeColor || '#000000';\r\n        super(options);\r\n        (<any>this)._options.beneathLabels = false;\r\n    }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Gets the value of a setting.\r\n     *\r\n     * @param key - Key specifying the setting.\r\n     * @returns - The value of the setting.\r\n     * @memberof BingMapLabel\r\n     * @method\r\n     */\r\n    public Get(key: string): any {\r\n        return (<any>this)[key];\r\n    }\r\n\r\n    /**\r\n     * Gets the map associted with the label.\r\n     *\r\n     * @memberof BingMapLabel\r\n     * @method\r\n     */\r\n    public GetMap(): Microsoft.Maps.Map {\r\n        return (<any>this).getMap();\r\n    }\r\n\r\n    /**\r\n     * Set the value for a setting.\r\n     *\r\n     * @param key - Key specifying the setting.\r\n     * @param val - The value to set.\r\n     * @memberof BingMapLabel\r\n     * @method\r\n     */\r\n    public Set(key: string, val: any): void {\r\n        if (key === 'position' && !val.hasOwnProperty('altitude') && val.hasOwnProperty('latitude') && val.hasOwnProperty('longitude')) {\r\n            val = new Microsoft.Maps.Location(val.latitude, val.longitude);\r\n        }\r\n        if (this.Get(key) !== val) {\r\n            (<any>this)[key] = val;\r\n            this.Changed(key);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the map for the label. Settings this to null remove the label from hte map.\r\n     *\r\n     * @param map - Map to associated with the label.\r\n     * @memberof BingMapLabel\r\n     * @method\r\n     */\r\n    public SetMap(map: Microsoft.Maps.Map): void {\r\n        const m: Microsoft.Maps.Map = this.GetMap();\r\n        if (map === m) { return; }\r\n        if (m) {\r\n            m.layers.remove(this);\r\n        }\r\n        if (map != null) {\r\n            map.layers.insert(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Applies settings to the object\r\n     *\r\n     * @param options - An object containing the settings key value pairs.\r\n     * @memberof BingMapLabel\r\n     * @method\r\n     */\r\n    public SetValues(options: { [key: string]: any }): void {\r\n        const p: Array<string> = new Array<string>();\r\n        for (const key in options) {\r\n            if (key !== '') {\r\n                if (key === 'position' && !options[key].hasOwnProperty('altitude') &&\r\n                    options[key].hasOwnProperty('latitude') && options[key].hasOwnProperty('longitude')) {\r\n                    options[key] = new Microsoft.Maps.Location(options[key].latitude, options[key].longitude);\r\n                }\r\n                if (this.Get(key) !== options[key]) {\r\n                    (<any>this)[key] = options[key];\r\n                    p.push(key);\r\n                }\r\n            }\r\n        }\r\n        if (p.length > 0) { this.Changed(p); }\r\n    }\r\n\r\n    ///\r\n    /// Protected methods\r\n    ///\r\n\r\n    /**\r\n     * Draws the label on the map.\r\n     * @memberof BingMapLabel\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected Draw(): void {\r\n        const visibility: string = this.GetVisible();\r\n        const m: Microsoft.Maps.Map = this.GetMap();\r\n        if (!this._canvas) { return; }\r\n        if (!m) { return; }\r\n        const style: CSSStyleDeclaration = this._canvas.style;\r\n        if (visibility !== '') {\r\n            // label is not visible, don't calculate positions etc.\r\n            style['visibility'] = visibility;\r\n            return;\r\n        }\r\n\r\n        let offset: Microsoft.Maps.Point = this.Get('offset');\r\n        const latLng: Microsoft.Maps.Location = this.Get('position');\r\n        if (!latLng) { return; }\r\n        if (!offset) { offset = new Microsoft.Maps.Point(0, 0); }\r\n\r\n        const pos: Microsoft.Maps.Point = <Microsoft.Maps.Point>m.tryLocationToPixel(\r\n            latLng,\r\n            Microsoft.Maps.PixelReference.control);\r\n        style['top'] = (pos.y + offset.y) + 'px';\r\n        style['left'] = (pos.x + offset.x) + 'px';\r\n        style['visibility'] = visibility;\r\n    }\r\n\r\n    /**\r\n     * Delegate called when the label is added to the map. Generates and configures\r\n     * the canvas.\r\n     *\r\n     * @memberof BingMapLabel\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected OnAdd() {\r\n        this._canvas = document.createElement('canvas');\r\n        this._canvas.id = `xMapLabel${id++}`;\r\n        const style: CSSStyleDeclaration = this._canvas.style;\r\n        style.position = 'absolute';\r\n\r\n        const ctx: CanvasRenderingContext2D = this._canvas.getContext('2d');\r\n        ctx.lineJoin = 'round';\r\n        ctx.textBaseline = 'top';\r\n\r\n        (<any>this).setHtmlElement(this._canvas);\r\n    }\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n\r\n    /**\r\n     * Delegate callled when the label is loaded\r\n     * @memberof BingMapLabel\r\n     * @method\r\n     */\r\n    private OnLoad() {\r\n        Microsoft.Maps.Events.addHandler(this.GetMap(), 'viewchange', () => {\r\n            this.Changed('position');\r\n        });\r\n        this.DrawCanvas();\r\n        this.Draw();\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function to extend the CustomOverlay into the MapLabel\r\n *\r\n * @export\r\n * @method\r\n */\r\nexport function MixinMapLabelWithOverlayView() {\r\n    const x = BingMapLabel.prototype;\r\n    BingMapLabel.prototype = <any> new Microsoft.Maps.CustomOverlay();\r\n    for (const y in x) { if ((<any>x)[y] != null) { (<any>BingMapLabel.prototype)[y] = (<any>x)[y]; }}\r\n    (<any>BingMapLabel.prototype)['onAdd'] = x['OnAdd'];\r\n    (<any>BingMapLabel.prototype)['onLoad'] = x['OnLoad'];\r\n    (<any>BingMapLabel.prototype)['onRemove'] = x['OnRemove'];\r\n}\r\n","import { ILatLong } from '../../interfaces/ilatlong';\r\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\r\nimport { IPolygonEvent } from '../../interfaces/ipolygon-event';\r\nimport { BingConversions } from '../../services/bing/bing-conversions';\r\nimport { BingMapService } from '../../services/bing/bing-map.service';\r\nimport { Polygon } from '../polygon';\r\nimport { BingMapLabel } from './bing-label';\r\n\r\n/**\r\n * Concrete implementation for a polygon model for Bing Maps V8.\r\n *\r\n * @export\r\n */\r\nexport class BingPolygon extends Polygon implements Polygon {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _map: Microsoft.Maps.Map = null;\r\n    private _isEditable: boolean = false;\r\n    private _title: string = '';\r\n    private _maxZoom: number = -1;\r\n    private _minZoom: number = -1;\r\n    private _showLabel: boolean = false;\r\n    private _showTooltip: boolean = false;\r\n    private _label: BingMapLabel = null;\r\n    private _tooltip: BingMapLabel = null;\r\n    private _hasToolTipReceiver: boolean = false;\r\n    private _tooltipVisible: boolean = false;\r\n    private _mouseOverListener: Microsoft.Maps.IHandlerId;\r\n    private _mouseMoveListener: Microsoft.Maps.IHandlerId;\r\n    private _mouseOutListener: Microsoft.Maps.IHandlerId;\r\n    private _metadata: Map<string, any> = new Map<string, any>();\r\n    private _originalPath: Array<Array<ILatLong>>;\r\n    private _editingCompleteEmitter: (event: IPolygonEvent) => void;\r\n\r\n    ///\r\n    /// Property declarations\r\n    ///\r\n\r\n    /**\r\n     * Gets or sets the maximum zoom at which the label is displayed. Ignored or ShowLabel is false.\r\n     *\r\n     * @memberof GooglePolygon\r\n     * @property\r\n     */\r\n    public get LabelMaxZoom(): number { return this._maxZoom; }\r\n    public set LabelMaxZoom(val: number) {\r\n        this._maxZoom = val;\r\n        this.ManageLabel();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the minimum zoom at which the label is displayed. Ignored or ShowLabel is false.\r\n     *\r\n     * @memberof GooglePolygon\r\n     * @property\r\n     */\r\n    public get LabelMinZoom(): number { return this._minZoom; }\r\n    public set LabelMinZoom(val: number) {\r\n        this._minZoom = val;\r\n        this.ManageLabel();\r\n    }\r\n\r\n    /**\r\n     * Gets the polygon metadata.\r\n     *\r\n     * @readonly\r\n     * @memberof BingPolygon\r\n     */\r\n    public get Metadata(): Map<string, any> { return this._metadata; }\r\n\r\n    /**\r\n     * Gets the native primitve implementing the polygon, in this case {@link Microsoft.Maps.Polygon}\r\n     *\r\n     * @readonly\r\n     * @memberof BingPolygon\r\n     */\r\n    public get NativePrimitve(): Microsoft.Maps.Polygon { return this._polygon; }\r\n\r\n    /**\r\n     * Gets or sets whether to show the label\r\n     *\r\n     * @abstract\r\n     * @memberof BingPolygon\r\n     * @property\r\n     */\r\n    public get ShowLabel(): boolean { return this._showLabel; }\r\n    public set ShowLabel(val: boolean) {\r\n        this._showLabel = val;\r\n        this.ManageLabel();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets whether to show the tooltip\r\n     *\r\n     * @abstract\r\n     * @memberof BingPolygon\r\n     * @property\r\n     */\r\n    public get ShowTooltip(): boolean { return this._showTooltip; }\r\n    public set ShowTooltip(val: boolean) {\r\n        this._showTooltip = val;\r\n        this.ManageTooltip();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the title off the polygon\r\n     *\r\n     * @abstract\r\n     * @memberof BingPolygon\r\n     * @property\r\n     */\r\n    public get Title(): string { return this._title; }\r\n    public set Title(val: string) {\r\n        this._title = val;\r\n        this.ManageLabel();\r\n        this.ManageTooltip();\r\n    }\r\n\r\n    ///\r\n    /// constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of BingPolygon.\r\n     * @param _polygon - The {@link Microsoft.Maps.Polygon} underlying the model.\r\n     * @param _mapService Instance of the Map Service.\r\n     * @param _layer - The context layer.\r\n     * @memberof BingPolygon\r\n     */\r\n    constructor(\r\n        private _polygon: Microsoft.Maps.Polygon,\r\n        protected _mapService: BingMapService,\r\n        protected _layer: Microsoft.Maps.Layer,\r\n    ) {\r\n        super();\r\n        this._map = this._mapService.MapInstance;\r\n        this._originalPath = this.GetPaths();\r\n    }\r\n\r\n    /**\r\n     * Adds a delegate for an event.\r\n     *\r\n     * @param eventType - String containing the event name.\r\n     * @param fn - Delegate function to execute when the event occurs.\r\n\r\n     * @memberof BingPolygon\r\n     */\r\n    public AddListener(eventType: string, fn: Function): void {\r\n        const supportedEvents = ['click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown', 'mouseout', 'mouseover', 'mouseup'];\r\n        if (supportedEvents.indexOf(eventType) !== -1) {\r\n            Microsoft.Maps.Events.addHandler(this._polygon, eventType, (e) => {\r\n                fn(e);\r\n            });\r\n        }\r\n        if (eventType === 'mousemove') {\r\n            let handlerId: Microsoft.Maps.IHandlerId;\r\n            Microsoft.Maps.Events.addHandler(this._polygon, 'mouseover', e => {\r\n                handlerId = Microsoft.Maps.Events.addHandler(this._map, 'mousemove', m => fn(m));\r\n            });\r\n            Microsoft.Maps.Events.addHandler(this._polygon, 'mouseout', e => {\r\n                if (handlerId) { Microsoft.Maps.Events.removeHandler(handlerId); }\r\n            });\r\n        } if (eventType === 'pathchanged') {\r\n            this._editingCompleteEmitter = <(event: IPolygonEvent) => void>fn;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deleted the polygon.\r\n     *\r\n     * @memberof BingPolygon\r\n     */\r\n    public Delete(): void {\r\n        if (this._layer) { this._layer.remove(this.NativePrimitve); }\r\n        else {\r\n            this._map.entities.remove(this.NativePrimitve);\r\n        }\r\n        if (this._label) { this._label.Delete(); }\r\n        if (this._tooltip) { this._tooltip.Delete(); }\r\n    }\r\n\r\n    /**\r\n     * Gets whether the polygon is draggable.\r\n     *\r\n     * @returns - True if the polygon is dragable, false otherwise.\r\n     *\r\n     * @memberof BingPolygon\r\n     */\r\n    public GetDraggable(): boolean {\r\n        ///\r\n        /// Bing polygons are not draggable by default.\r\n        /// See https://social.msdn.microsoft.com/Forums/en-US/\r\n        ///     7aaae748-4d5f-4be5-a7bb-90498e08b41c/how-can-i-make-polygonpolyline-draggable-in-bing-maps-8?\r\n        ///     forum=bingmaps\r\n        /// for a possible approach to be implemented in the model.\r\n        ///\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the polygon path can be edited.\r\n     *\r\n     * @returns - True if the path can be edited, false otherwise.\r\n     *\r\n     * @memberof BingPolygon\r\n     */\r\n    public GetEditable(): boolean {\r\n        return this._isEditable;\r\n    }\r\n\r\n    /**\r\n     * Gets the polygon path.\r\n     *\r\n     * @returns - Array of {@link ILatLong} objects describing the polygon path.\r\n     *\r\n     * @memberof BingPolygon\r\n     */\r\n    public GetPath(): Array<ILatLong> {\r\n        const p: Array<Microsoft.Maps.Location> = this._polygon.getLocations();\r\n        const path: Array<ILatLong> = new Array<ILatLong>();\r\n        p.forEach(l => path.push({ latitude: l.latitude, longitude: l.longitude }));\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Gets the polygon paths.\r\n     *\r\n     * @returns - Array of Array of {@link ILatLong} objects describing multiple polygon paths.\r\n     *\r\n     * @memberof BingPolygon\r\n     */\r\n    public GetPaths(): Array<Array<ILatLong>> {\r\n        const p: Array<Array<Microsoft.Maps.Location>> = this._polygon.getRings();\r\n        const paths: Array<Array<ILatLong>> = new Array<Array<ILatLong>>();\r\n        p.forEach(x => {\r\n            const path: Array<ILatLong> = new Array<ILatLong>();\r\n            x.forEach(y => path.push({ latitude: y.latitude, longitude: y.longitude }));\r\n            paths.push(path);\r\n        });\r\n        return paths;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the polygon is visible.\r\n     *\r\n     * @returns - True if the polygon is visible, false otherwise.\r\n     *\r\n     * @memberof BingPolygon\r\n     */\r\n    public GetVisible(): boolean {\r\n        return this._polygon.getVisible();\r\n    }\r\n\r\n    /**\r\n     * Sets whether the polygon is dragable.\r\n     *\r\n     * @param draggable - True to make the polygon dragable, false otherwise.\r\n     *\r\n     * @memberof BingPolygon\r\n     */\r\n    public SetDraggable(draggable: boolean): void {\r\n        ///\r\n        /// Bing polygons are not draggable by default.\r\n        /// See https://social.msdn.microsoft.com/Forums/en-US/\r\n        ///     7aaae748-4d5f-4be5-a7bb-90498e08b41c/how-can-i-make-polygonpolyline-draggable-in-bing-maps-8\r\n        //      ?forum=bingmaps\r\n        /// for a possible approach to be implemented in the model.\r\n        ///\r\n        throw (new Error('The bing maps implementation currently does not support draggable polygons.'));\r\n    }\r\n\r\n    /**\r\n     * Sets wether the polygon path is editable.\r\n     *\r\n     * @param editable - True to make polygon path editable, false otherwise.\r\n     *\r\n     * @memberof BingPolygon\r\n     */\r\n    public SetEditable(editable: boolean): void {\r\n        const isChanged = this._isEditable !== editable;\r\n        this._isEditable = editable;\r\n        if (!isChanged) {\r\n            return;\r\n        }\r\n\r\n        if (this._isEditable) {\r\n            this._originalPath = this.GetPaths();\r\n            this._mapService.GetDrawingTools().then(t => {\r\n                t.edit(this._polygon);\r\n            });\r\n        }\r\n        else {\r\n            this._mapService.GetDrawingTools().then(t => {\r\n                t.finish((editedPolygon: Microsoft.Maps.Polygon) => {\r\n                    if (editedPolygon !== this._polygon || !this._editingCompleteEmitter) {\r\n                        return;\r\n                    }\r\n                    const newPath: Array<Array<ILatLong>> = this.GetPaths();\r\n                    const originalPath: Array<Array<ILatLong>> = this._originalPath;\r\n                    this.SetPaths(newPath);\r\n                        // this is necessary for the new path to persist it appears.\r\n                    this._editingCompleteEmitter({\r\n                        Click: null,\r\n                        Polygon: this,\r\n                        OriginalPath: originalPath,\r\n                        NewPath: newPath\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the polygon options\r\n     *\r\n     * @param options - {@link ILatLong} object containing the options. The options are merged with hte ones\r\n     * already on the underlying model.\r\n     *\r\n     * @memberof Polygon\r\n     */\r\n    public SetOptions(options: IPolygonOptions): void {\r\n        const o: Microsoft.Maps.IPolygonOptions = BingConversions.TranslatePolygonOptions(options);\r\n        this._polygon.setOptions(o);\r\n        if (options.visible != null && this._showLabel && this._label) { this._label.Set('hidden', !options.visible); }\r\n\r\n        if (typeof options.editable !== 'undefined') {\r\n            this.SetEditable(options.editable);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the polygon path.\r\n     *\r\n     * @param path - An Array of {@link ILatLong} (or array of arrays) describing the polygons path.\r\n     *\r\n     * @memberof BingPolygon\r\n     */\r\n    public SetPath(path: Array<ILatLong>): void {\r\n        const p: Array<Microsoft.Maps.Location> = new Array<Microsoft.Maps.Location>();\r\n        path.forEach(x => p.push(new Microsoft.Maps.Location(x.latitude, x.longitude)));\r\n        this._originalPath = [path];\r\n        this._polygon.setLocations(p);\r\n        if (this._label) {\r\n            this._centroid = null;\r\n            this.ManageLabel();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the polygon path or paths.\r\n     *\r\n     * @param paths\r\n     * An Array of {@link ILatLong} (or array of arrays) describing the polygons path(s).\r\n     *\r\n     * @memberof BingPolygon\r\n     */\r\n    public SetPaths(paths: Array<Array<ILatLong>> | Array<ILatLong>): void {\r\n        if (paths == null) { return; }\r\n        if (!Array.isArray(paths)) { return; }\r\n        if (paths.length === 0) {\r\n            this._polygon.setRings(new Array<Microsoft.Maps.Location>());\r\n            if (this._label) {\r\n                this._label.Delete();\r\n                this._label = null;\r\n            }\r\n            return;\r\n        }\r\n        if (Array.isArray(paths[0])) {\r\n            // parameter is an array or arrays\r\n            const p: Array<Array<Microsoft.Maps.Location>> = new Array<Array<Microsoft.Maps.Location>>();\r\n            (<Array<Array<ILatLong>>>paths).forEach(path => {\r\n                const _p: Array<Microsoft.Maps.Location> = new Array<Microsoft.Maps.Location>();\r\n                path.forEach(x => _p.push(new Microsoft.Maps.Location(x.latitude, x.longitude)));\r\n                p.push(_p);\r\n            });\r\n            this._originalPath = <Array<Array<ILatLong>>>paths;\r\n            this._polygon.setRings(p);\r\n            if (this._label) {\r\n                this._centroid = null;\r\n                this.ManageLabel();\r\n            }\r\n        }\r\n        else {\r\n            // parameter is a simple array....\r\n            this.SetPath(<Array<ILatLong>>paths);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets whether the polygon is visible.\r\n     *\r\n     * @param visible - True to set the polygon visible, false otherwise.\r\n     *\r\n     * @memberof BingPolygon\r\n     */\r\n    public SetVisible(visible: boolean): void {\r\n        this._polygon.setOptions(<Microsoft.Maps.IPolygonOptions>{ visible: visible });\r\n        if (this._showLabel && this._label) { this._label.Set('hidden', !visible); }\r\n    }\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n\r\n    /**\r\n     * Configures the label for the polygon\r\n     * @memberof Polygon\r\n     */\r\n    private ManageLabel(): void {\r\n        if (this.GetPath == null || this.GetPath().length === 0) { return; }\r\n        if (this._showLabel && this._title != null && this._title !== '') {\r\n            const o: { [key: string]: any } = {\r\n                text: this._title,\r\n                position: BingConversions.TranslateLocation(this.Centroid)\r\n            };\r\n            if (o.position == null) { return; }\r\n            if (this._minZoom !== -1) { o.minZoom = this._minZoom; }\r\n            if (this._maxZoom !== -1) { o.maxZoom = this._maxZoom; }\r\n            if (this._label == null) {\r\n                this._label = new BingMapLabel(o);\r\n                this._label.SetMap(this._map);\r\n            }\r\n            else {\r\n                this._label.SetValues(o);\r\n            }\r\n            this._label.Set('hidden', !this.GetVisible());\r\n        }\r\n        else {\r\n            if (this._label) {\r\n                this._label.SetMap(null);\r\n                this._label = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Configures the tooltip for the polygon\r\n     * @memberof Polygon\r\n     */\r\n    private ManageTooltip(): void {\r\n        if (this._showTooltip && this._title != null && this._title !== '') {\r\n            const o: { [key: string]: any } = {\r\n                text: this._title,\r\n                align: 'left',\r\n                offset: new Microsoft.Maps.Point(0, 25),\r\n                backgroundColor: 'bisque',\r\n                hidden: true,\r\n                fontSize: 12,\r\n                fontColor: '#000000',\r\n                strokeWeight: 0\r\n            };\r\n            if (this._tooltip == null) {\r\n                this._tooltip = new BingMapLabel(o);\r\n                this._tooltip.SetMap(this._map);\r\n            }\r\n            else {\r\n                this._tooltip.SetValues(o);\r\n            }\r\n            if (!this._hasToolTipReceiver) {\r\n                this._mouseOverListener = Microsoft.Maps.Events.addHandler(\r\n                    this._polygon, 'mouseover', (e: Microsoft.Maps.IMouseEventArgs) => {\r\n                        this._tooltip.Set('position', e.location);\r\n                        if (!this._tooltipVisible) {\r\n                            this._tooltip.Set('hidden', false);\r\n                            this._tooltipVisible = true;\r\n                        }\r\n                        this._mouseMoveListener = Microsoft.Maps.Events.addHandler(\r\n                            this._map, 'mousemove', (m: Microsoft.Maps.IMouseEventArgs) => {\r\n                                if (this._tooltipVisible && m.location && m.primitive === this._polygon) {\r\n                                    this._tooltip.Set('position', m.location);\r\n                                }\r\n                            });\r\n                    });\r\n                this._mouseOutListener = Microsoft.Maps.Events.addHandler(\r\n                    this._polygon, 'mouseout', (e: Microsoft.Maps.IMouseEventArgs) => {\r\n                        if (this._tooltipVisible) {\r\n                            this._tooltip.Set('hidden', true);\r\n                            this._tooltipVisible = false;\r\n                        }\r\n                        if (this._mouseMoveListener) { Microsoft.Maps.Events.removeHandler(this._mouseMoveListener); }\r\n                    });\r\n                this._hasToolTipReceiver = true;\r\n            }\r\n        }\r\n        if ((!this._showTooltip || this._title === '' || this._title == null)) {\r\n            if (this._hasToolTipReceiver) {\r\n                if (this._mouseOutListener) { Microsoft.Maps.Events.removeHandler(this._mouseOutListener); }\r\n                if (this._mouseOverListener) { Microsoft.Maps.Events.removeHandler(this._mouseOverListener); }\r\n                if (this._mouseMoveListener) { Microsoft.Maps.Events.removeHandler(this._mouseMoveListener); }\r\n                this._hasToolTipReceiver = false;\r\n            }\r\n            if (this._tooltip) {\r\n                this._tooltip.SetMap(null);\r\n                this._tooltip = null;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","import { ILatLong } from '../../interfaces/ilatlong';\r\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\r\nimport { BingConversions } from '../../services/bing/bing-conversions';\r\nimport { Polyline } from '../polyline';\r\nimport { BingMapLabel } from './bing-label';\r\n\r\n/**\r\n * Concrete implementation for a polyline model for Bing Maps V8.\r\n *\r\n * @export\r\n */\r\nexport class BingPolyline extends Polyline implements Polyline {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _isEditable: boolean = true;\r\n\r\n    ///\r\n    /// Property declarations\r\n    ///\r\n    private _title: string = '';\r\n    private _showTooltip: boolean = false;\r\n    private _tooltip: BingMapLabel = null;\r\n    private _hasToolTipReceiver: boolean = false;\r\n    private _tooltipVisible: boolean = false;\r\n    private _mouseOverListener: Microsoft.Maps.IHandlerId;\r\n    private _mouseMoveListener: Microsoft.Maps.IHandlerId;\r\n    private _mouseOutListener: Microsoft.Maps.IHandlerId;\r\n    private _metadata: Map<string, any> = new Map<string, any>();\r\n\r\n    /**\r\n     * Gets the polyline metadata.\r\n     *\r\n     * @readonly\r\n     * @memberof BingPolyline\r\n     */\r\n    public get Metadata(): Map<string, any> { return this._metadata; }\r\n\r\n    /**\r\n     * Gets the Navitve Polyline underlying the model\r\n     *\r\n     * @readonly\r\n     * @memberof BingPolyline\r\n     */\r\n    public get NativePrimitve(): Microsoft.Maps.Polyline { return this._polyline; }\r\n\r\n    /**\r\n     * Gets or sets whether to show the tooltip\r\n     *\r\n     * @abstract\r\n     * @memberof BingPolyline\r\n     * @property\r\n     */\r\n    public get ShowTooltip(): boolean { return this._showTooltip; }\r\n    public set ShowTooltip(val: boolean) {\r\n        this._showTooltip = val;\r\n        this.ManageTooltip();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the title off the polyline\r\n     *\r\n     * @abstract\r\n     * @memberof BingPolyline\r\n     * @property\r\n     */\r\n    public get Title(): string { return this._title; }\r\n    public set Title(val: string) {\r\n        this._title = val;\r\n        this.ManageTooltip();\r\n    }\r\n\r\n    ///\r\n    /// constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of BingPolygon.\r\n     * @param _polyline - The {@link Microsoft.Maps.Polyline} underlying the model.\r\n     * @param _map - The context map.\r\n     * @param _layer - The context layer.\r\n     * @memberof BingPolyline\r\n     */\r\n    constructor(private _polyline: Microsoft.Maps.Polyline, protected _map: Microsoft.Maps.Map, protected _layer: Microsoft.Maps.Layer) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Adds a delegate for an event.\r\n     *\r\n     * @param eventType - String containing the event name.\r\n     * @param fn - Delegate function to execute when the event occurs.\r\n     * @memberof BingPolyline\r\n     */\r\n    public AddListener(eventType: string, fn: Function): void {\r\n        const supportedEvents = ['click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown', 'mouseout', 'mouseover', 'mouseup' ];\r\n        if (supportedEvents.indexOf(eventType) !== -1) {\r\n            Microsoft.Maps.Events.addHandler(this._polyline, eventType, (e) => {\r\n                fn(e);\r\n            });\r\n        }\r\n        if (eventType === 'mousemove') {\r\n            let handlerId: Microsoft.Maps.IHandlerId;\r\n            Microsoft.Maps.Events.addHandler(this._polyline, 'mouseover', e => {\r\n                handlerId = Microsoft.Maps.Events.addHandler(this._map, 'mousemove', m => fn(m));\r\n            });\r\n            Microsoft.Maps.Events.addHandler(this._polyline, 'mouseout', e => {\r\n                if (handlerId) { Microsoft.Maps.Events.removeHandler(handlerId); }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deleted the polyline.\r\n     *\r\n     * @memberof BingPolyline\r\n     */\r\n    public Delete(): void {\r\n        if (this._layer) { this._layer.remove(this.NativePrimitve); }\r\n        else {\r\n            this._map.entities.remove(this.NativePrimitve);\r\n        }\r\n        if (this._tooltip) { this._tooltip.Delete(); }\r\n    }\r\n\r\n    /**\r\n     * Gets whether the polyline is draggable.\r\n     *\r\n     * @returns - True if the polyline is dragable, false otherwise.\r\n     *\r\n     * @memberof BingPolyline\r\n     */\r\n    public GetDraggable(): boolean {\r\n        ///\r\n        /// Bing polygons are not draggable by default.\r\n        /// See https://social.msdn.microsoft.com/Forums/en-US/\r\n        ///     7aaae748-4d5f-4be5-a7bb-90498e08b41c/how-can-i-make-polygonpolyline-draggable-in-bing-maps-8\r\n        ///     ?forum=bingmaps\r\n        /// for a possible approach to be implemented in the model.\r\n        ///\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the polyline path can be edited.\r\n     *\r\n     * @returns - True if the path can be edited, false otherwise.\r\n     *\r\n     * @memberof BingPolyline\r\n     */\r\n    public GetEditable(): boolean {\r\n        return this._isEditable;\r\n    }\r\n\r\n    /**\r\n     * Gets the polyline path.\r\n     *\r\n     * @returns - Array of {@link ILatLong} objects describing the polyline path.\r\n     *\r\n     * @memberof BingPolyline\r\n     */\r\n    public GetPath(): Array<ILatLong> {\r\n        const p: Array<Microsoft.Maps.Location> = this._polyline.getLocations();\r\n        const path: Array<ILatLong> = new Array<ILatLong>();\r\n        p.forEach(l => path.push({ latitude: l.latitude, longitude: l.longitude }));\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the polyline is visible.\r\n     *\r\n     * @returns - True if the polyline is visible, false otherwise.\r\n     *\r\n     * @memberof BingPolyline\r\n     */\r\n    public GetVisible(): boolean {\r\n        return this._polyline.getVisible();\r\n    }\r\n\r\n    /**\r\n     * Sets whether the polyline is dragable.\r\n     *\r\n     * @param draggable - True to make the polyline dragable, false otherwise.\r\n     *\r\n     * @memberof BingPolyline\r\n     */\r\n    public SetDraggable(draggable: boolean): void {\r\n        ///\r\n        /// Bing polygons are not draggable by default.\r\n        /// See https://social.msdn.microsoft.com/Forums/en-US/\r\n        ///     7aaae748-4d5f-4be5-a7bb-90498e08b41c/how-can-i-make-polygonpolyline-draggable-in-bing-maps-8\r\n        ///     ?forum=bingmaps\r\n        /// for a possible approach to be implemented in the model.\r\n        ///\r\n        throw(new Error('The bing maps implementation currently does not support draggable polylines.'));\r\n    }\r\n\r\n    /**\r\n     * Sets wether the polyline path is editable.\r\n     *\r\n     * @param editable - True to make polyline path editable, false otherwise.\r\n     *\r\n     * @memberof BingPolyline\r\n     */\r\n    public SetEditable(editable: boolean): void {\r\n        this._isEditable = editable;\r\n    }\r\n\r\n    /**\r\n     * Sets the polyline options\r\n     *\r\n     * @param options - {@link ILatLong} object containing the options. The options are merged with hte ones\r\n     * already on the underlying model.\r\n     *\r\n     * @memberof BingPolyline\r\n     */\r\n    public SetOptions(options: IPolylineOptions): void {\r\n        const o: Microsoft.Maps.IPolylineOptions = BingConversions.TranslatePolylineOptions(options);\r\n        this._polyline.setOptions(o);\r\n        if (options.path) {\r\n            this.SetPath(<Array<ILatLong>>options.path);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the polyline path.\r\n     *\r\n     * @param path - An Array of {@link ILatLong} (or array of arrays) describing the polylines path.\r\n     *\r\n     * @memberof BingPolyline\r\n     */\r\n    public SetPath(path: Array<ILatLong>): void {\r\n        const p: Array<Microsoft.Maps.Location> = new Array<Microsoft.Maps.Location>();\r\n        path.forEach(x => p.push(new Microsoft.Maps.Location(x.latitude, x.longitude)));\r\n        this._polyline.setLocations(p);\r\n    }\r\n\r\n    /**\r\n     * Sets whether the polyline is visible.\r\n     *\r\n     * @param visible - True to set the polyline visible, false otherwise.\r\n     *\r\n     * @memberof BingPolyline\r\n     */\r\n    public SetVisible(visible: boolean): void {\r\n        this._polyline.setOptions(<Microsoft.Maps.IPolylineOptions>{ visible: visible });\r\n    }\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n\r\n    /**\r\n     * Configures the tooltip for the polygon\r\n     * @memberof Polygon\r\n     */\r\n    private ManageTooltip(): void {\r\n        if (this._showTooltip && this._title != null && this._title !== '') {\r\n            const o: { [key: string]: any } = {\r\n                text: this._title,\r\n                align: 'left',\r\n                offset: new Microsoft.Maps.Point(0, 25),\r\n                backgroundColor: 'bisque',\r\n                hidden: true,\r\n                fontSize: 12,\r\n                fontColor: '#000000',\r\n                strokeWeight: 0\r\n            };\r\n            if (this._tooltip == null) {\r\n                this._tooltip = new BingMapLabel(o);\r\n                this._tooltip.SetMap(this._map);\r\n            }\r\n            else {\r\n                this._tooltip.SetValues(o);\r\n            }\r\n            if (!this._hasToolTipReceiver) {\r\n                this._mouseOverListener = Microsoft.Maps.Events.addHandler(\r\n                        this._polyline, 'mouseover', (e: Microsoft.Maps.IMouseEventArgs) => {\r\n                    this._tooltip.Set('position', e.location);\r\n                    if (!this._tooltipVisible) {\r\n                        this._tooltip.Set('hidden', false);\r\n                        this._tooltipVisible = true;\r\n                    }\r\n                });\r\n                this._mouseMoveListener = Microsoft.Maps.Events.addHandler(\r\n                            this._map, 'mousemove', (e: Microsoft.Maps.IMouseEventArgs) => {\r\n                    if (this._tooltipVisible && e.location && e.primitive === this._polyline) {\r\n                        this._tooltip.Set('position', e.location);\r\n                    }\r\n                });\r\n                this._mouseOutListener = Microsoft.Maps.Events.addHandler(\r\n                            this._polyline, 'mouseout', (e: Microsoft.Maps.IMouseEventArgs) => {\r\n                    if (this._tooltipVisible) {\r\n                        this._tooltip.Set('hidden', true);\r\n                        this._tooltipVisible = false;\r\n                    }\r\n                });\r\n                this._hasToolTipReceiver = true;\r\n            }\r\n        }\r\n        if ((!this._showTooltip || this._title === '' || this._title == null)) {\r\n            if (this._hasToolTipReceiver) {\r\n                if (this._mouseOutListener) { Microsoft.Maps.Events.removeHandler(this._mouseOutListener) ; }\r\n                if (this._mouseOverListener) { Microsoft.Maps.Events.removeHandler(this._mouseOverListener); }\r\n                if (this._mouseMoveListener) { Microsoft.Maps.Events.removeHandler(this._mouseMoveListener); }\r\n                this._hasToolTipReceiver = false;\r\n            }\r\n            if (this._tooltip) {\r\n                this._tooltip.SetMap(null);\r\n                this._tooltip = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { IMapEventLookup } from '../../interfaces/imap-event-lookup';\r\n\r\n/**\r\n * This contstant translates the abstract map events into their corresponding bing map\r\n * equivalents.\r\n */\r\nexport const BingMapEventsLookup: IMapEventLookup = {\r\n    click :             'click',\r\n    dblclick :          'dblclick',\r\n    rightclick :        'rightclick',\r\n    resize :            'resize',\r\n    boundschanged :     'viewchangeend',\r\n    centerchanged :     'viewchangeend',\r\n    zoomchanged :       'viewchangeend',\r\n    mouseover:          'mouseover',\r\n    mouseout :          'mouseout',\r\n    mousemove :         'mousemove',\r\n    infowindowclose:    'infoboxChanged'\r\n};\r\n","import { ILatLong } from '../../interfaces/ilatlong';\r\nimport { BingConversions } from '../../services/bing/bing-conversions';\r\nimport { CanvasOverlay } from '../canvas-overlay';\r\nimport { MapLabel } from '../map-label';\r\nimport { BingMapLabel } from './bing-label';\r\n\r\n/**\r\n * Concrete implementing a canvas overlay to be placed on the map for Bing Maps.\r\n *\r\n * @export\r\n */\r\nexport class BingCanvasOverlay extends CanvasOverlay {\r\n\r\n    ///\r\n    /// field declarations\r\n    ///\r\n    private _viewChangeEvent: Microsoft.Maps.IHandlerId;\r\n    private _viewChangeEndEvent: Microsoft.Maps.IHandlerId;\r\n    private _mapResizeEvent: Microsoft.Maps.IHandlerId;\r\n\r\n\r\n    /**\r\n     * Creates a new instance of the BingCanvasOverlay class.\r\n     * @param drawCallback A callback function that is triggered when the canvas is ready to be\r\n     * rendered for the current map view.\r\n     * @memberof BingCanvasOverlay\r\n     */\r\n    constructor(drawCallback: (canvas: HTMLCanvasElement) => void) {\r\n        super(drawCallback);\r\n    }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Obtains geo coordinates for the click location\r\n     *\r\n     * @abstract\r\n     * @param e - The mouse event. Expected to implement {@link Microsoft.Maps.IMouseEventArgs}.\r\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\r\n     * @memberof BingCanvasOverlay\r\n     */\r\n    public GetCoordinatesFromClick(e: Microsoft.Maps.IMouseEventArgs): ILatLong {\r\n        return { latitude: e.location.latitude, longitude: e.location.longitude };\r\n    }\r\n\r\n    /**\r\n     * Gets the map associted with the label.\r\n     *\r\n     * @memberof BingCanvasOverlay\r\n     * @method\r\n     */\r\n    public GetMap(): Microsoft.Maps.Map {\r\n        return (<any>this).getMap();\r\n    }\r\n\r\n    /**\r\n     * Returns a MapLabel instance for the current platform that can be used as a tooltip.\r\n     * This method only generates the map label. Content and placement is the responsibility\r\n     * of the caller. Note that this method returns null until OnLoad has been called.\r\n     *\r\n     * @returns - The label to be used for the tooltip.\r\n     * @memberof BingCanvasOverlay\r\n     * @method\r\n     */\r\n    public GetToolTipOverlay(): MapLabel {\r\n        const o: { [key: string]: any } = {\r\n            align: 'left',\r\n            offset: new Microsoft.Maps.Point(0, 25),\r\n            backgroundColor: 'bisque',\r\n            hidden: true,\r\n            fontSize: 12,\r\n            fontColor: '#000000',\r\n            strokeWeight: 0\r\n        };\r\n        const label: MapLabel = new BingMapLabel(o);\r\n        label.SetMap(this.GetMap());\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * CanvasOverlay loaded, attach map events for updating canvas.\r\n     * @abstract\r\n     * @method\r\n     * @memberof BingCanvasOverlay\r\n     */\r\n    public OnLoad() {\r\n        const map: Microsoft.Maps.Map = (<any>this).getMap();\r\n\r\n        // Get the current map view information.\r\n        this._zoomStart = map.getZoom();\r\n        this._centerStart = <ILatLong>map.getCenter();\r\n\r\n        // Redraw the canvas.\r\n        this.Redraw(true);\r\n\r\n        // When the map moves, move the canvas accordingly.\r\n        this._viewChangeEvent = Microsoft.Maps.Events.addHandler(map, 'viewchange', (e) => {\r\n            if (map.getMapTypeId() === Microsoft.Maps.MapTypeId.streetside) {\r\n                // Don't show the canvas if the map is in Streetside mode.\r\n                this._canvas.style.display = 'none';\r\n            }\r\n            else {\r\n                // Re-drawing the canvas as it moves would be too slow. Instead, scale and translate canvas element.\r\n                const zoomCurrent: number = map.getZoom();\r\n                const centerCurrent: Microsoft.Maps.Location = map.getCenter();\r\n\r\n                // Calculate map scale based on zoom level difference.\r\n                const scale: number = Math.pow(2, zoomCurrent - this._zoomStart);\r\n\r\n                // Calculate the scaled dimensions of the canvas.\r\n                const newWidth: number = map.getWidth() * scale;\r\n                const newHeight: number = map.getHeight() * scale;\r\n\r\n                // Calculate offset of canvas based on zoom and center offsets.\r\n                const pixelPoints: Array<Microsoft.Maps.Point> = <Array<Microsoft.Maps.Point>>map.tryLocationToPixel([\r\n                        BingConversions.TranslateLocation(this._centerStart),\r\n                        centerCurrent\r\n                    ], Microsoft.Maps.PixelReference.control);\r\n                const centerOffsetX: number = pixelPoints[1].x - pixelPoints[0].x;\r\n                const centerOffsetY: number = pixelPoints[1].y - pixelPoints[0].y;\r\n                const x: number = (-(newWidth - map.getWidth()) / 2) - centerOffsetX;\r\n                const y: number = (-(newHeight - map.getHeight()) / 2) - centerOffsetY;\r\n\r\n                // Update the canvas CSS position and dimensions.\r\n                this.UpdatePosition(x, y, newWidth, newHeight);\r\n            }\r\n        });\r\n\r\n        // When the map stops moving, render new data on the canvas.\r\n        this._viewChangeEndEvent = Microsoft.Maps.Events.addHandler(map, 'viewchangeend', (e) => {\r\n            this.UpdateCanvas();\r\n        });\r\n\r\n        // Update the position of the overlay when the map is resized.\r\n        this._mapResizeEvent = Microsoft.Maps.Events.addHandler(map, 'mapresize', (e) => {\r\n            this.UpdateCanvas();\r\n        });\r\n\r\n        // set the overlay to ready state\r\n        this._readyResolver(true);\r\n    }\r\n\r\n    /**\r\n     * Sets the map for the label. Settings this to null remove the label from hte map.\r\n     *\r\n     * @param map - Map to associated with the label.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     */\r\n    public SetMap(map: Microsoft.Maps.Map): void {\r\n        const m: Microsoft.Maps.Map = this.GetMap();\r\n        if (map === m) { return; }\r\n        if (m) {\r\n            m.layers.remove(this);\r\n        }\r\n        if (map != null) {\r\n            map.layers.insert(this);\r\n        }\r\n    }\r\n\r\n    ///\r\n    /// Protected methods\r\n    ///\r\n\r\n    /**\r\n     * Attaches the canvas to the map.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     */\r\n    protected SetCanvasElement(el: HTMLCanvasElement): void {\r\n        (<any>this).setHtmlElement(el);\r\n    }\r\n\r\n    /**\r\n     * Remove the map event handlers.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected RemoveEventHandlers(): void {\r\n        // Remove all event handlers from the map.\r\n        Microsoft.Maps.Events.removeHandler(this._viewChangeEvent);\r\n        Microsoft.Maps.Events.removeHandler(this._viewChangeEndEvent);\r\n        Microsoft.Maps.Events.removeHandler(this._mapResizeEvent);\r\n    }\r\n\r\n    /**\r\n     * Updates the Canvas size based on the map size.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected Resize(): void {\r\n        const map: Microsoft.Maps.Map = (<any>this).getMap();\r\n\r\n        // Clear canvas by updating dimensions. This also ensures canvas stays the same size as the map.\r\n        this._canvas.width = map.getWidth();\r\n        this._canvas.height = map.getHeight();\r\n    }\r\n\r\n    /**\r\n     * Updates the Canvas.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected UpdateCanvas(): void {\r\n        const map: Microsoft.Maps.Map = (<any>this).getMap();\r\n\r\n        // Only render the canvas if it isn't in streetside mode.\r\n        if (map.getMapTypeId() !== Microsoft.Maps.MapTypeId.streetside) {\r\n            this._canvas.style.display = '';\r\n\r\n            // Reset CSS position and dimensions of canvas.\r\n            this.UpdatePosition(0, 0, map.getWidth(), map.getHeight());\r\n\r\n            // Redraw the canvas.\r\n            this.Redraw(true);\r\n\r\n            // Get the current map view information.\r\n            this._zoomStart = map.getZoom();\r\n            this._centerStart = <ILatLong>map.getCenter();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function to extend the OverlayView into the CanvasOverlay\r\n *\r\n * @export\r\n * @method\r\n */\r\nexport function MixinCanvasOverlay() {\r\n    const x = BingCanvasOverlay.prototype;\r\n    BingCanvasOverlay.prototype = <any> new Microsoft.Maps.CustomOverlay();\r\n    for (const y in x) { if ((<any>x)[y] != null) { (<any>BingCanvasOverlay.prototype)[y] = (<any>x)[y]; }}\r\n    (<any>BingCanvasOverlay.prototype)['onAdd'] = x['OnAdd'];\r\n    (<any>BingCanvasOverlay.prototype)['onLoad'] = x['OnLoad'];\r\n    (<any>BingCanvasOverlay.prototype)['onRemove'] = x['OnRemove'];\r\n}\r\n","export let google: any;\r\n\r\nexport interface GoogleMap extends MVCObject {\r\n  data?: Data;\r\n  constructor(el: HTMLElement, opts?: MapOptions): void;\r\n  panTo(latLng: LatLng|LatLngLiteral): void;\r\n  setZoom(zoom: number): void;\r\n  getCenter(): LatLng;\r\n  setCenter(latLng: LatLng|LatLngLiteral): void;\r\n  getBounds(): LatLngBounds;\r\n  getZoom(): number;\r\n  getDiv(): HTMLDivElement;\r\n  getProjection(): any;\r\n  setOptions(options: MapOptions): void;\r\n  panToBounds(latLngBounds: LatLngBounds|LatLngBoundsLiteral): void;\r\n  fitBounds(bounds: LatLngBounds|LatLngBoundsLiteral): void;\r\n}\r\n\r\nexport interface LatLng {\r\n  constructor(lat: number, lng: number): void;\r\n  lat(): number;\r\n  lng(): number;\r\n}\r\n\r\nexport interface Marker extends MVCObject {\r\n  constructor(options?: MarkerOptions): void;\r\n  setMap(map: GoogleMap): void;\r\n  setPosition(latLng: LatLng|LatLngLiteral): void;\r\n  setTitle(title: string): void;\r\n  setLabel(label: string|MarkerLabel): void;\r\n  setPosition(latlng: LatLng|LatLngLiteral): void;\r\n  setDraggable(draggable: boolean): void;\r\n  setIcon(icon: string): void;\r\n  setOpacity(opacity: number): void;\r\n  setOptions(options: MarkerOptions): void;\r\n  setVisible(visible: boolean): void;\r\n  setZIndex(zIndex: number): void;\r\n  getLabel(): MarkerLabel;\r\n  getPosition(): LatLng;\r\n  getVisible(): boolean;\r\n}\r\n\r\nexport interface MarkerOptions {\r\n  position: LatLng|LatLngLiteral;\r\n  title?: string;\r\n  map?: GoogleMap;\r\n  label?: string|MarkerLabel;\r\n  draggable?: boolean;\r\n  clickable?: boolean;\r\n  icon?: string;\r\n  opacity?: number;\r\n  visible?: boolean;\r\n  zIndex?: number;\r\n}\r\n\r\nexport interface MarkerLabel {\r\n  color: string;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n  fontWeight: string;\r\n  text: string;\r\n}\r\n\r\nexport interface ClusterStyle {\r\n  url?: string;\r\n  height?: number;\r\n  width?: number;\r\n  anchor?: Array<number>;\r\n  textColor?: string;\r\n  textSize?: number;\r\n  backgroundPosition?: string;\r\n}\r\n\r\nexport interface MarkerClusterer {\r\n  isZoomOnClick(): boolean;\r\n  isAverageCenter(): boolean;\r\n  getMarkers(): Array<Marker>;\r\n  getTotalMarkers(): number;\r\n  setMaxZoom(maxZoom: number): void;\r\n  getMaxZoom(): number;\r\n  addMarkers(markers: Array<Marker>, opt_nodraw?: boolean): void;\r\n  addMarker(marker: Marker, opt_nodraw?: boolean): void;\r\n  removeMarkers(markers: Array<Marker>, opt_nodraw?: boolean): void;\r\n  removeMarker(marker: Marker, opt_nodraw?: boolean): void;\r\n  getTotalClusters(): number;\r\n  getMap(): GoogleMap;\r\n  setMap(map: GoogleMap): void;\r\n  getGridSize(): number;\r\n  setGridSize(gridSize: number): void;\r\n  getMinClusterSize(): number;\r\n  setMinClusterSize(minClusterSize: number): void;\r\n  clearMarkers(): void;\r\n  setStyles(styles: Array<ClusterStyle>): void;\r\n  getStyles(): Array<ClusterStyle>;\r\n  setCalculator(callback: (markers: Array<Marker>, numStyles: number) => { text: string, index: number}): void;\r\n  getCalculator(): (markers: Array<Marker>, numStyles: number) => { text: string, index: number};\r\n  resetViewport(hide?: boolean): void;\r\n  redraw(): void;\r\n}\r\n\r\nexport interface Circle extends MVCObject {\r\n  getBounds(): LatLngBounds;\r\n  getCenter(): LatLng;\r\n  getDraggable(): boolean;\r\n  getEditable(): boolean;\r\n  getMap(): GoogleMap;\r\n  getRadius(): number;\r\n  getVisible(): boolean;\r\n  setCenter(center: LatLng|LatLngLiteral): void;\r\n  setDraggable(draggable: boolean): void;\r\n  setEditable(editable: boolean): void;\r\n  setMap(map: GoogleMap): void;\r\n  setOptions(options: CircleOptions): void;\r\n  setRadius(radius: number): void;\r\n  setVisible(visible: boolean): void;\r\n}\r\n\r\nexport interface CircleOptions {\r\n  center?: LatLng|LatLngLiteral;\r\n  clickable?: boolean;\r\n  draggable?: boolean;\r\n  editable?: boolean;\r\n  fillColor?: string;\r\n  fillOpacity?: number;\r\n  map?: GoogleMap;\r\n  radius?: number;\r\n  strokeColor?: string;\r\n  strokeOpacity?: number;\r\n  strokePosition?: 'CENTER'|'INSIDE'|'OUTSIDE';\r\n  strokeWeight?: number;\r\n  visible?: boolean;\r\n  zIndex?: number;\r\n}\r\n\r\nexport interface LatLngBounds {\r\n  contains(latLng: LatLng): boolean;\r\n  equals(other: LatLngBounds|LatLngBoundsLiteral): boolean;\r\n  extend(point: LatLng): void;\r\n  getCenter(): LatLng;\r\n  getNorthEast(): LatLng;\r\n  getSouthWest(): LatLng;\r\n  intersects(other: LatLngBounds|LatLngBoundsLiteral): boolean;\r\n  isEmpty(): boolean;\r\n  toJSON(): LatLngBoundsLiteral;\r\n  toSpan(): LatLng;\r\n  toString(): string;\r\n  toUrlValue(precision?: number): string;\r\n  union(other: LatLngBounds|LatLngBoundsLiteral): LatLngBounds;\r\n}\r\n\r\nexport interface LatLngBoundsLiteral {\r\n  east: number;\r\n  north: number;\r\n  south: number;\r\n  west: number;\r\n}\r\n\r\nexport interface LatLngLiteral {\r\n  lat: number;\r\n  lng: number;\r\n}\r\n\r\nexport interface MouseEvent { latLng: LatLng; }\r\n\r\nexport interface MapOptions {\r\n  center?: LatLng|LatLngLiteral;\r\n  zoom?: number;\r\n  minZoom?: number;\r\n  maxZoom?: number;\r\n  disableDoubleClickZoom?: boolean;\r\n  disableDefaultUI?: boolean;\r\n  scrollwheel?: boolean;\r\n  backgroundColor?: string;\r\n  draggable?: boolean;\r\n  draggableCursor?: string;\r\n  draggingCursor?: string;\r\n  keyboardShortcuts?: boolean;\r\n  styles?: MapTypeStyle[];\r\n  zoomControl?: boolean;\r\n  zoomControlOptions?: ZoomControlOptions;\r\n  streetViewControl?: boolean;\r\n  streetViewControlOptions?: StreetViewControlOptions;\r\n  scaleControl?: boolean;\r\n  scaleControlOptions?: ScaleControlOptions;\r\n  mapTypeControl?: boolean;\r\n  mapTypeControlOptions?: MapTypeControlOptions;\r\n  panControl?: boolean;\r\n  panControlOptions?: PanControlOptions;\r\n  rotateControl?: boolean;\r\n  rotateControlOptions?: RotateControlOptions;\r\n  fullscreenControl?: boolean;\r\n  fullscreenControlOptions?: FullscreenControlOptions;\r\n  mapTypeId?: string|MapTypeId;\r\n  clickableIcons?: boolean;\r\n  gestureHandling?: 'cooperative'|'greedy'|'none'|'auto';\r\n}\r\n\r\nexport interface MapTypeStyle {\r\n  elementType?: 'all'|'geometry'|'geometry.fill'|'geometry.stroke'|'labels'|'labels.icon'|\r\n      'labels.text'|'labels.text.fill'|'labels.text.stroke';\r\n  featureType?: 'administrative'|'administrative.country'|'administrative.land_parcel'|\r\n      'administrative.locality'|'administrative.neighborhood'|'administrative.province'|'all'|\r\n      'landscape'|'landscape.man_made'|'landscape.natural'|'landscape.natural.landcover'|\r\n      'landscape.natural.terrain'|'poi'|'poi.attraction'|'poi.business'|'poi.government'|\r\n      'poi.medical'|'poi.park'|'poi.place_of_worship'|'poi.school'|'poi.sports_complex'|'road'|\r\n      'road.arterial'|'road.highway'|'road.highway.controlled_access'|'road.local'|'transit'|\r\n      'transit.line'|'transit.station'|'transit.station.airport'|'transit.station.bus'|\r\n      'transit.station.rail'|'water';\r\n  stylers: MapTypeStyler[];\r\n}\r\n\r\n/**\r\n *  If more than one key is specified in a single MapTypeStyler, all but one will be ignored.\r\n */\r\nexport interface MapTypeStyler {\r\n  color?: string;\r\n  gamma?: number;\r\n  hue?: string;\r\n  invert_lightness?: boolean;\r\n  lightness?: number;\r\n  saturation?: number;\r\n  visibility?: string;\r\n  weight?: number;\r\n}\r\n\r\nexport interface InfoWindow extends MVCObject {\r\n  constructor(opts?: InfoWindowOptions): void;\r\n  close(): void;\r\n  getContent(): string|Node;\r\n  getPosition(): LatLng;\r\n  getZIndex(): number;\r\n  open(map?: GoogleMap, anchor?: MVCObject): void;\r\n  setContent(content: string|Node): void;\r\n  setOptions(options: InfoWindowOptions): void;\r\n  setPosition(position: LatLng|LatLngLiteral): void;\r\n  setZIndex(zIndex: number): void;\r\n}\r\n\r\nexport interface MVCObject { addListener(eventName: string, handler: Function): MapsEventListener; }\r\n\r\nexport interface MapsEventListener { remove(): void; }\r\n\r\nexport interface Size {\r\n  height: number;\r\n  width: number;\r\n  constructor(width: number, height: number, widthUnit?: string, heightUnit?: string): void;\r\n  equals(other: Size): boolean;\r\n  toString(): string;\r\n}\r\n\r\nexport interface InfoWindowOptions {\r\n  content?: string|Node;\r\n  disableAutoPan?: boolean;\r\n  maxWidth?: number;\r\n  pixelOffset?: Size;\r\n  position?: LatLng|LatLngLiteral;\r\n  zIndex?: number;\r\n}\r\n\r\nexport interface Point {\r\n  x: number;\r\n  y: number;\r\n  equals(other: Point): boolean;\r\n  toString(): string;\r\n}\r\n\r\nexport interface GoogleSymbol {\r\n  anchor?: Point;\r\n  fillColor?: string;\r\n  fillOpacity?: string;\r\n  labelOrigin?: Point;\r\n  path?: string;\r\n  rotation?: number;\r\n  scale?: number;\r\n  strokeColor?: string;\r\n  strokeOpacity?: number;\r\n  strokeWeight?: number;\r\n}\r\n\r\nexport interface IconSequence {\r\n  fixedRotation?: boolean;\r\n  icon?: GoogleSymbol;\r\n  offset?: string;\r\n  repeat?: string;\r\n}\r\n\r\nexport interface PolylineOptions {\r\n  clickable?: boolean;\r\n  draggable?: boolean;\r\n  editable?: boolean;\r\n  geodesic?: boolean;\r\n  icon?: Array<IconSequence>;\r\n  map?: GoogleMap;\r\n  path?: Array<LatLng>|Array<LatLng|LatLngLiteral>;\r\n  strokeColor?: string;\r\n  strokeOpacity?: number;\r\n  strokeWeight?: number;\r\n  visible?: boolean;\r\n  zIndex?: number;\r\n}\r\n\r\nexport interface Polyline extends MVCObject {\r\n  getDraggable(): boolean;\r\n  getEditable(): boolean;\r\n  getMap(): GoogleMap;\r\n  getPath(): Array<LatLng>;\r\n  getVisible(): boolean;\r\n  setDraggable(draggable: boolean): void;\r\n  setEditable(editable: boolean): void;\r\n  setMap(map: GoogleMap): void;\r\n  setOptions(options: PolylineOptions): void;\r\n  setPath(path: Array<LatLng|LatLngLiteral>): void;\r\n  setVisible(visible: boolean): void;\r\n}\r\n\r\n/**\r\n * PolyMouseEvent gets emitted when the user triggers mouse events on a polyline.\r\n */\r\nexport interface PolyMouseEvent extends MouseEvent {\r\n  edge: number;\r\n  path: number;\r\n  vertex: number;\r\n}\r\n\r\nexport interface PolygonOptions {\r\n  clickable?: boolean;\r\n  draggable?: boolean;\r\n  editable?: boolean;\r\n  fillColor?: string;\r\n  fillOpacity?: number;\r\n  geodesic?: boolean;\r\n  icon?: Array<IconSequence>;\r\n  map?: GoogleMap;\r\n  paths?: Array<LatLng|LatLngLiteral>|Array<Array<LatLng|LatLngLiteral>>;\r\n  strokeColor?: string;\r\n  strokeOpacity?: number;\r\n  strokeWeight?: number;\r\n  visible?: boolean;\r\n  zIndex?: number;\r\n}\r\n\r\nexport interface Polygon extends MVCObject {\r\n  zIndex: number;\r\n  getDraggable(): boolean;\r\n  getEditable(): boolean;\r\n  getMap(): GoogleMap;\r\n  getPath(): Array<LatLng>;\r\n  getPaths(): Array<Array<LatLng>>;\r\n  getVisible(): boolean;\r\n  setDraggable(draggable: boolean): void;\r\n  setEditable(editable: boolean): void;\r\n  setMap(map: GoogleMap): void;\r\n  setPath(path: Array<LatLng>|Array<LatLng|LatLngLiteral>): void;\r\n  setOptions(options: PolygonOptions): void;\r\n  setPaths(paths: Array<Array<LatLng|LatLngLiteral>>|Array<LatLng|LatLngLiteral>): void;\r\n  setVisible(visible: boolean): void;\r\n}\r\n\r\nexport interface KmlLayer extends MVCObject {\r\n  getDefaultViewport(): LatLngBounds;\r\n  getMap(): GoogleMap;\r\n  getMetadata(): KmlLayerMetadata;\r\n  getStatus(): KmlLayerStatus;\r\n  getUrl(): string;\r\n  getZIndex(): number;\r\n  setMap(map: GoogleMap): void;\r\n  setOptions(options: KmlLayerOptions): void;\r\n  setUrl(url: string): void;\r\n  setZIndex(zIndex: number): void;\r\n}\r\n\r\n/**\r\n * See: https://developers.google.com/maps/documentation/javascript/reference?hl=de#KmlLayerStatus\r\n */\r\nexport type KmlLayerStatus = 'DOCUMENT_NOT_FOUND' |\r\n    'DOCUMENT_TOO_LARGE' | 'FETCH_ERROR' | 'INVALID_DOCUMENT' | 'INVALID_REQUEST' |\r\n    'LIMITS_EXCEEDED' | 'OK' | 'TIMED_OUT' | 'UNKNOWN';\r\n\r\n/**\r\n * See: https://developers.google.com/maps/documentation/javascript/reference?hl=de#KmlLayerMetadata\r\n */\r\nexport interface KmlLayerMetadata {\r\n  author: KmlAuthor;\r\n  description: string;\r\n  hasScreenOverlays: boolean;\r\n  name: string;\r\n  snippet: string;\r\n}\r\n\r\nexport interface KmlAuthor {\r\n  email: string;\r\n  name: string;\r\n  uri: string;\r\n}\r\n\r\nexport interface KmlLayerOptions {\r\n  clickable?: boolean;\r\n  map?: GoogleMap;\r\n  preserveViewport?: boolean;\r\n  screenOverlays?: boolean;\r\n  suppressInfoWindows?: boolean;\r\n  url?: string;\r\n  zIndex?: number;\r\n}\r\n\r\nexport interface KmlFeatureData {\r\n  author: KmlAuthor;\r\n  description: string;\r\n  id: string;\r\n  infoWindowHtml: string;\r\n  name: string;\r\n  snippet: string;\r\n}\r\n\r\nexport interface KmlMouseEvent extends MouseEvent {\r\n  featureData: KmlFeatureData;\r\n  pixelOffset: Size;\r\n}\r\n\r\nexport interface Data extends MVCObject {\r\n  features: Feature[];\r\n  constructor(options?: DataOptions): void;\r\n  addGeoJson(geoJson: Object, options?: GeoJsonOptions): Feature[];\r\n  remove(feature: Feature): void;\r\n  setControlPosition(controlPosition: ControlPosition): void;\r\n  setControls(controls: string[]): void;\r\n  setDrawingMode(drawingMode: string): void;\r\n  setMap(map: GoogleMap): void;\r\n  /* tslint:disable */\r\n  /*\r\n  * Tslint configuration check-parameters will prompt errors for these lines of code.\r\n  * https://palantir.github.io/tslint/rules/no-unused-variable/\r\n  */\r\n  setStyle(style: () => void): void;\r\n  forEach(callback: (feature: Feature) => void): void;\r\n  /* tslint:enable */\r\n}\r\n\r\nexport interface Feature extends MVCObject {\r\n  id?: number|string|undefined;\r\n  geometry: Geometry;\r\n  properties: any;\r\n}\r\n\r\nexport interface DataOptions {\r\n  controlPosition?: ControlPosition;\r\n  controls?: string[];\r\n  drawingMode?: string;\r\n  featureFactory?: (geometry: Geometry) => Feature;\r\n  map?: GoogleMap;\r\n  style?: () => void;\r\n}\r\n\r\nexport interface DataMouseEvent extends MouseEvent {\r\n  feature: Feature;\r\n}\r\n\r\nexport interface GeoJsonOptions {\r\n  idPropertyName: string;\r\n}\r\n\r\nexport interface Geometry {\r\n  type: string;\r\n}\r\n\r\n/**\r\n * Identifiers used to specify the placement of controls on the map. Controls are\r\n * positioned relative to other controls in the same layout position. Controls that\r\n * are added first are positioned closer to the edge of the map.\r\n */\r\nexport enum ControlPosition {\r\n  BOTTOM_CENTER,\r\n  BOTTOM_LEFT,\r\n  BOTTOM_RIGHT,\r\n  LEFT_BOTTOM,\r\n  LEFT_CENTER,\r\n  LEFT_TOP,\r\n  RIGHT_BOTTOM,\r\n  RIGHT_CENTER,\r\n  RIGHT_TOP,\r\n  TOP_CENTER,\r\n  TOP_LEFT,\r\n  TOP_RIGHT\r\n}\r\n\r\nexport enum MapTypeId {\r\n  /** This map type displays a transparent layer of major streets on satellite images. */\r\n  hybrid,\r\n  /** This map type displays a normal street map. */\r\n  roadmap,\r\n  /** This map type displays satellite images. */\r\n  satellite,\r\n  /** This map type displays maps with physical features such as terrain and vegetation. */\r\n  terrain\r\n}\r\n\r\n/***** Controls *****/\r\n/** Options for the rendering of the map type control. */\r\nexport interface MapTypeControlOptions {\r\n  /** IDs of map types to show in the control. */\r\n  mapTypeIds?: (MapTypeId|string)[];\r\n  /**\r\n   * Position id. Used to specify the position of the control on the map.\r\n   * The default position is TOP_RIGHT.\r\n   */\r\n  position?: ControlPosition;\r\n  /** Style id. Used to select what style of map type control to display. */\r\n  style?: MapTypeControlStyle;\r\n}\r\n\r\nexport enum MapTypeControlStyle {\r\n  DEFAULT,\r\n  DROPDOWN_MENU,\r\n  HORIZONTAL_BAR\r\n}\r\n\r\nexport interface OverviewMapControlOptions {\r\n  opened?: boolean;\r\n}\r\n\r\n/** Options for the rendering of the pan control. */\r\nexport interface PanControlOptions {\r\n  /**\r\n   * Position id. Used to specify the position of the control on the map.\r\n   * The default position is TOP_LEFT.\r\n   */\r\n  position?: ControlPosition;\r\n}\r\n\r\n/** Options for the rendering of the rotate control. */\r\nexport interface RotateControlOptions {\r\n  /**\r\n   * Position id. Used to specify the position of the control on the map.\r\n   * The default position is TOP_LEFT.\r\n   */\r\n  position?: ControlPosition;\r\n}\r\n\r\n/** Options for the rendering of the scale control. */\r\nexport interface ScaleControlOptions {\r\n  /** Style id. Used to select what style of scale control to display. */\r\n  style?: ScaleControlStyle;\r\n}\r\n\r\nexport enum ScaleControlStyle {\r\n  DEFAULT\r\n}\r\n\r\n/** Options for the rendering of the Street View pegman control on the map. */\r\nexport interface StreetViewControlOptions {\r\n  /**\r\n   * Position id. Used to specify the position of the control on the map. The\r\n   * default position is embedded within the navigation (zoom and pan) controls.\r\n   * If this position is empty or the same as that specified in the\r\n   * zoomControlOptions or panControlOptions, the Street View control will be\r\n   * displayed as part of the navigation controls. Otherwise, it will be displayed\r\n   * separately.\r\n   */\r\n  position?: ControlPosition;\r\n}\r\n\r\n/** Options for the rendering of the zoom control. */\r\nexport interface ZoomControlOptions {\r\n  /**\r\n   * Position id. Used to specify the position of the control on the map.\r\n   * The default position is TOP_LEFT.\r\n   */\r\n  position?: ControlPosition;\r\n  style?: ZoomControlStyle;\r\n}\r\n\r\nexport enum ZoomControlStyle {\r\n  DEFAULT,\r\n  LARGE,\r\n  SMALL\r\n}\r\n\r\n/** Options for the rendering of the fullscreen control. */\r\nexport interface FullscreenControlOptions {\r\n  /**\r\n   * Position id. Used to specify the position of the control on the map.\r\n   * The default position is RIGHT_TOP.\r\n   */\r\n  position?: ControlPosition;\r\n}\r\n\r\nexport declare class OverlayView {\r\n    public set(key: string, value: any): void;\r\n    public get(key: string): any;\r\n    public setValues(options: any): void;\r\n    public getPanes(): any;\r\n    public getProjection(): any;\r\n    public getMap(): GoogleMap;\r\n}\r\n","import { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\r\nimport { IBox } from '../../interfaces/ibox';\r\nimport { IMapOptions } from '../../interfaces/imap-options';\r\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\r\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\r\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\r\nimport { ILatLong } from '../../interfaces/ilatlong';\r\nimport * as GoogleMapTypes from './google-map-types';\r\nimport { MapTypeId } from '../../models/map-type-id';\r\n\r\ndeclare var google: any;\r\n\r\n\r\n/**\r\n * This class contains helperfunctions to map various interfaces used to represent options and structures into the\r\n * corresponding Google Maps specific implementations.\r\n *\r\n * @export\r\n */\r\nexport class GoogleConversions {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n\r\n    /**\r\n     * Map option attributes that are supported for conversion to Google Map properties\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    private static _mapOptionsAttributes: string[] = [\r\n        'backgroundColor',\r\n        'center',\r\n        'clickableIcons',\r\n        'disableDefaultUI',\r\n        'disableDoubleClickZoom',\r\n        'draggable',\r\n        'draggableCursor',\r\n        'draggingCursor',\r\n        'disableZooming',\r\n        'fullscreenControl',\r\n        'fullscreenControlOptions',\r\n        'gestureHandling',\r\n        'heading',\r\n        'keyboardShortcuts',\r\n        'mapTypeControl',\r\n        'mapTypeControlOptions',\r\n        'mapTypeId',\r\n        'maxZoom',\r\n        'minZoom',\r\n        'noClear',\r\n        'panControl',\r\n        'panControlOptions',\r\n        'rotateControl',\r\n        'rotateControlOptions',\r\n        'scaleControl',\r\n        'scaleControlOptions',\r\n        'scrollwheel',\r\n        'showMapTypeSelector',\r\n        'streetView',\r\n        'streetViewControl',\r\n        'streetViewControlOptions',\r\n        'styles',\r\n        'tilt',\r\n        'zoom',\r\n        'zoomControl',\r\n        'zoomControlOptions'\r\n    ];\r\n\r\n    /**\r\n     * InfoWindow option attributes that are supported for conversion to Google Map properties\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    private static _infoWindowOptionsAttributes: string[] = [\r\n        'actions',\r\n        'description',\r\n        'htmlContent',\r\n        'id',\r\n        'position',\r\n        'pixelOffset',\r\n        'showCloseButton',\r\n        'showPointer',\r\n        'pushpin',\r\n        'title',\r\n        'titleClickHandler',\r\n        'typeName',\r\n        'visible',\r\n        'width',\r\n        'height'\r\n    ];\r\n\r\n    /**\r\n     * Marker option attributes that are supported for conversion to Google Map properties\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    private static _markerOptionsAttributes: string[] = [\r\n        'anchor',\r\n        'position',\r\n        'title',\r\n        'text',\r\n        'label',\r\n        'draggable',\r\n        'icon',\r\n        'width',\r\n        'height',\r\n        'iconInfo',\r\n        'metadata',\r\n        'visible'\r\n    ];\r\n\r\n    /**\r\n     * Cluster option attributes that are supported for conversion to Google Map properties\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    private static _clusterOptionsAttributes: string[] = [\r\n        'callback',\r\n        'clusteredPinCallback',\r\n        'clusteringEnabled',\r\n        'gridSize',\r\n        'layerOffset',\r\n        'placementMode',\r\n        'visible',\r\n        'zIndex'\r\n    ];\r\n\r\n    /**\r\n     * Polygon option attributes that are supported for conversion to Google Map properties\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    private static _polygonOptionsAttributes: string[] = [\r\n        'clickable',\r\n        'draggable',\r\n        'editable',\r\n        'fillColor',\r\n        'fillOpacity',\r\n        'geodesic',\r\n        'paths',\r\n        'strokeColor',\r\n        'strokeOpacity',\r\n        'strokeWeight',\r\n        'visible',\r\n        'zIndex'\r\n    ];\r\n\r\n    /**\r\n     * Polyline option attributes that are supported for conversion to Google Map properties\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    private static _polylineOptionsAttributes: string[] = [\r\n        'clickable',\r\n        'draggable',\r\n        'editable',\r\n        'geodesic',\r\n        'strokeColor',\r\n        'strokeOpacity',\r\n        'strokeWeight',\r\n        'visible',\r\n        'zIndex'\r\n    ];\r\n\r\n    /**\r\n     * Maps an IBox object to a GoogleMapTypes.LatLngBoundsLiteral object.\r\n     *\r\n     * @param bounds - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    public static TranslateBounds(bounds: IBox): GoogleMapTypes.LatLngBoundsLiteral {\r\n        const b: GoogleMapTypes.LatLngBoundsLiteral = {\r\n            east: bounds.maxLongitude,\r\n            north: bounds.maxLatitude,\r\n            south: bounds.minLatitude,\r\n            west: bounds.minLongitude,\r\n        };\r\n        return b;\r\n    }\r\n\r\n    /**\r\n     * Maps an IInfoWindowOptions object to a GoogleMapTypes.InfoWindowOptions object.\r\n     *\r\n     * @param options - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    public static TranslateInfoWindowOptions(options: IInfoWindowOptions): GoogleMapTypes.InfoWindowOptions {\r\n        const o: GoogleMapTypes.InfoWindowOptions | any = {};\r\n        Object.keys(options)\r\n            .filter(k => GoogleConversions._infoWindowOptionsAttributes.indexOf(k) !== -1)\r\n            .forEach((k) => {\r\n                if (k === 'htmlContent') {\r\n                    o.content = (<any>options)[k];\r\n                } else {\r\n                    o[k] = (<any>options)[k];\r\n                }\r\n            });\r\n        if (o.content == null || o.content === '') {\r\n            if (options.title !== '' && options.description !== '') {\r\n                o.content = `${options.title}: ${options.description}`;\r\n            }\r\n            else if (options.description !== '') { o.content = options.description; }\r\n            else { o.content = options.title; }\r\n        }\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Maps an ILatLong object to a GoogleMapTypes.LatLngLiteral object.\r\n     *\r\n     * @param latlong - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    public static TranslateLocation(latlong: ILatLong): GoogleMapTypes.LatLngLiteral {\r\n        const l: GoogleMapTypes.LatLngLiteral = { lat: latlong.latitude, lng: latlong.longitude };\r\n        return l;\r\n    }\r\n\r\n    /**\r\n     * Maps an GoogleMapTypes.LatLngLiteral object to a ILatLong object.\r\n     *\r\n     * @param latlng - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    public static TranslateLatLng(latlng: GoogleMapTypes.LatLngLiteral): ILatLong {\r\n        const l: ILatLong = { latitude: latlng.lat, longitude: latlng.lng };\r\n        return l;\r\n    }\r\n\r\n    /**\r\n     * Maps an ILatLong object to a GoogleMapTypes.LatLng object.\r\n     *\r\n     * @param latlong - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    public static TranslateLocationObject(latlong: ILatLong): GoogleMapTypes.LatLng {\r\n        const l: GoogleMapTypes.LatLng = new google.maps.LatLng(latlong.latitude, latlong.longitude);\r\n        return l;\r\n    }\r\n\r\n    /**\r\n     * Maps an GoogleMapTypes.LatLng object to a ILatLong object.\r\n     *\r\n     * @param latlng - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    public static TranslateLatLngObject(latlng: GoogleMapTypes.LatLng): ILatLong {\r\n        const l: ILatLong = { latitude: latlng.lat(), longitude: latlng.lng() };\r\n        return l;\r\n    }\r\n\r\n    /**\r\n     * Maps an ILatLong array to a array of GoogleMapTypes.LatLng object.\r\n     *\r\n     * @param latlongArray - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    public static TranslateLocationObjectArray(latlongArray: Array<ILatLong>): Array<GoogleMapTypes.LatLng> {\r\n        // use for loop for performance in case we deal with large numbers of points and paths...\r\n        const p: Array<GoogleMapTypes.LatLng> = new Array<GoogleMapTypes.LatLng>();\r\n        for (let i = 0; i < latlongArray.length; i++) {\r\n            p.push(GoogleConversions.TranslateLocationObject(latlongArray[i]));\r\n        }\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Maps a MapTypeId object to a Google maptype string.\r\n     *\r\n     * @param mapTypeId - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    public static TranslateMapTypeId(mapTypeId: MapTypeId): string {\r\n        switch (mapTypeId) {\r\n            case MapTypeId.road: return GoogleMapTypes.MapTypeId[GoogleMapTypes.MapTypeId.roadmap];\r\n            case MapTypeId.grayscale: return GoogleMapTypes.MapTypeId[GoogleMapTypes.MapTypeId.terrain];\r\n            case MapTypeId.hybrid: return GoogleMapTypes.MapTypeId[GoogleMapTypes.MapTypeId.hybrid];\r\n            case MapTypeId.ordnanceSurvey: return GoogleMapTypes.MapTypeId[GoogleMapTypes.MapTypeId.terrain];\r\n            default: return GoogleMapTypes.MapTypeId[GoogleMapTypes.MapTypeId.satellite];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Maps an IMarkerOptions object to a GoogleMapTypes.MarkerOptions object.\r\n     *\r\n     * @param options - Object to be mapped.\r\n     * @returns - Promise that when resolved contains the mapped object.\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    public static TranslateMarkerOptions(options: IMarkerOptions): GoogleMapTypes.MarkerOptions {\r\n        const o: GoogleMapTypes.MarkerOptions | any = {};\r\n        Object.keys(options)\r\n            .filter(k => GoogleConversions._markerOptionsAttributes.indexOf(k) !== -1)\r\n            .forEach((k) => {\r\n                if (k === 'position') {\r\n                    const latlng = GoogleConversions.TranslateLocationObject(options[k]);\r\n                    o.position = latlng;\r\n                }\r\n                else {\r\n                    o[k] = (<any>options)[k];\r\n                }\r\n            });\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Maps an IMapOptions object to a GoogleMapTypes.MapOptions object.\r\n     *\r\n     * @param options - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    public static TranslateOptions(options: IMapOptions): GoogleMapTypes.MapOptions {\r\n        const o: GoogleMapTypes.MapOptions = {};\r\n        Object.keys(options)\r\n            .filter(k => GoogleConversions._mapOptionsAttributes.indexOf(k) !== -1)\r\n            .forEach((k) => {\r\n                if (k === 'center') {\r\n                    o.center = GoogleConversions.TranslateLocation(options.center);\r\n                }\r\n                else if (k === 'mapTypeId') {\r\n                    o.mapTypeId = GoogleConversions.TranslateMapTypeId(options.mapTypeId);\r\n                }\r\n                else if (k === 'disableZooming') {\r\n                    o.gestureHandling = 'none';\r\n                    o.zoomControl =  false;\r\n                }\r\n                else if (k === 'showMapTypeSelector') {\r\n                    o.mapTypeControl = false;\r\n                }\r\n                else {\r\n                    (<any>o)[k] = (<any>options)[k];\r\n                }\r\n            });\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Translates an array of locations or an array or arrays of location to and array of arrays of Bing Map Locations\r\n     *\r\n     * @param paths - ILatLong based locations to convert.\r\n     * @returns - converted locations.\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    public static TranslatePaths(paths: Array<ILatLong> | Array<Array<ILatLong>>): Array<Array<GoogleMapTypes.LatLng>> {\r\n        const p: Array<Array<GoogleMapTypes.LatLng>> = new Array<Array<GoogleMapTypes.LatLng>>();\r\n        if (paths == null || !Array.isArray(paths) || paths.length === 0) {\r\n            p.push(new Array<GoogleMapTypes.LatLng>());\r\n        }\r\n        else if (Array.isArray(paths[0])) {\r\n            // parameter is an array or arrays\r\n            // use for loop for performance in case we deal with large numbers of points and paths...\r\n            const p1 = <Array<Array<ILatLong>>>paths;\r\n            for (let i = 0; i < p1.length; i++) {\r\n                p.push(GoogleConversions.TranslateLocationObjectArray(p1[i]));\r\n            }\r\n        }\r\n        else {\r\n            // parameter is a simple array....\r\n            p.push(GoogleConversions.TranslateLocationObjectArray(<Array<ILatLong>>paths));\r\n        }\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     *  Maps an IPolygonOptions object to a GoogleMapTypes.PolygonOptions.\r\n     *\r\n     * @param options - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    public static TranslatePolygonOptions(options: IPolygonOptions): GoogleMapTypes.PolygonOptions {\r\n        const o: GoogleMapTypes.PolygonOptions | any = {};\r\n        Object.keys(options)\r\n            .filter(k => GoogleConversions._polygonOptionsAttributes.indexOf(k) !== -1)\r\n            .forEach((k) => {\r\n                if (k === 'paths') {\r\n                    if (!Array.isArray(options.paths)) { return; }\r\n                    if (options.paths.length === 0) {\r\n                        o.paths = new Array<GoogleMapTypes.LatLng>();\r\n                    }\r\n                    else if (Array.isArray(options.paths[0])) {\r\n                        o.paths = new Array<Array<GoogleMapTypes.LatLngLiteral>>();\r\n                        // use for loop for performance in case we deal with large numbers of points and paths..\r\n                        const p1 = <Array<Array<ILatLong>>>options.paths;\r\n                        for (let i = 0; i < p1.length; i++) {\r\n                            o.paths[i] = new Array<GoogleMapTypes.LatLngLiteral>();\r\n                            for (let j = 0; j < p1[i].length; j++) {\r\n                                o.paths[i][j] = {lat: p1[i][j].latitude, lng: p1[i][j].longitude};\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        o.paths = new Array<GoogleMapTypes.LatLngLiteral>();\r\n                        // use for loop for performance in case we deal with large numbers of points and paths..\r\n                        const p1 = <Array<ILatLong>>options.paths;\r\n                        for (let i = 0; i < p1.length; i++) {\r\n                            o.paths[i] = {lat: p1[i].latitude, lng: p1[i].longitude};\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    o[k] = (<any>options)[k];\r\n                }\r\n            });\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     *  Maps an IPolylineOptions object to a GoogleMapTypes.PolylineOptions.\r\n     *\r\n     * @param options - Object to be mapped.\r\n     * @returns - Mapped object.\r\n     *\r\n     * @memberof GoogleConversions\r\n     */\r\n    public static TranslatePolylineOptions(options: IPolylineOptions): GoogleMapTypes.PolylineOptions {\r\n        const o: GoogleMapTypes.PolylineOptions | any = {};\r\n        Object.keys(options)\r\n            .filter(k => GoogleConversions._polylineOptionsAttributes.indexOf(k) !== -1)\r\n            .forEach((k) => {\r\n                o[k] = (<any>options)[k];\r\n            });\r\n        return o;\r\n    }\r\n}\r\n","import { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\r\nimport { ILatLong } from '../../interfaces/ilatlong';\r\nimport { GoogleConversions } from '../../services/google/google-conversions';\r\nimport { GoogleMapService} from '../../services/google/google-map.service';\r\nimport { InfoWindow } from '../info-window';\r\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\r\n\r\ndeclare var google: any;\r\n\r\n/**\r\n * Concrete implementation for a {@link InfoWindow}} model for Google Maps.\r\n *\r\n * @export\r\n */\r\nexport class GoogleInfoWindow implements InfoWindow {\r\n\r\n    private _isOpen: boolean;\r\n\r\n    /**\r\n     * Gets whether the info box is currently open.\r\n     *\r\n     * @readonly\r\n     * @memberof InfoWGoogleInfoWindowindow\r\n     */\r\n    public get IsOpen(): boolean {\r\n        if (this._isOpen === true) { return true; }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying native object.\r\n     *\r\n     * @property\r\n     * @readonly\r\n     */\r\n    public get NativePrimitve(): GoogleMapTypes.InfoWindow {\r\n        return this._infoWindow;\r\n    }\r\n\r\n    ///\r\n    /// constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of GoogleInfoWindow.\r\n     * @param _infoWindow - A {@link GoogleMapTypes.InfoWindow} instance underlying the model.\r\n     * @param _mapService - An instance of the {@link GoogleMapService}.\r\n     * @memberof GoogleInfoWindow\r\n     */\r\n    constructor(private _infoWindow: GoogleMapTypes.InfoWindow, private _mapService: GoogleMapService) { }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n   /**\r\n     * Adds an event listener to the InfoWindow.\r\n     *\r\n     * @param eventType - String containing the event for which to register the listener (e.g. \"click\")\r\n     * @param fn - Delegate invoked when the event occurs.\r\n     *\r\n     * @memberof GoogleInfoWindow\r\n     * @method\r\n     */\r\n    public AddListener(eventType: string, fn: Function): void {\r\n        this._infoWindow.addListener(eventType, (e: any) => {\r\n            if (eventType === 'closeclick') { this._isOpen = false; }\r\n            fn(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Closes the info window.\r\n     *\r\n     * @memberof GoogleInfoWindow\r\n     * @method\r\n     */\r\n    public Close() {\r\n        this._isOpen = false;\r\n        this._infoWindow.close();\r\n    }\r\n\r\n    /**\r\n     * Gets the position of the info window\r\n     *\r\n     * @returns - The geo coordinates of the info window.\r\n     *\r\n     * @memberof GoogleInfoWindow\r\n     * @method\r\n     */\r\n    public GetPosition(): ILatLong {\r\n        return GoogleConversions.TranslateLatLngObject(this._infoWindow.getPosition());\r\n    }\r\n\r\n    /**\r\n     * Opens the info window\r\n     *\r\n     * @param [anchor] - Optional Anchor.\r\n     *\r\n     * @memberof GoogleInfoWindow\r\n     * @method\r\n     */\r\n    public Open(anchor?: any) {\r\n        this._mapService.MapPromise.then(m => {\r\n            this._isOpen = true;\r\n            this._infoWindow.open(m, anchor);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the info window options\r\n     *\r\n     * @param options - The options to set. This object will be merged with the existing options.\r\n     *\r\n     * @memberof GoogleInfoWindow\r\n     * @method\r\n     */\r\n    public SetOptions(options: IInfoWindowOptions): void {\r\n        const o: GoogleMapTypes.InfoWindowOptions = GoogleConversions.TranslateInfoWindowOptions(options);\r\n        this._infoWindow.setOptions(o);\r\n    }\r\n\r\n    /**\r\n     * Sets the info window position\r\n     *\r\n     * @param position - Geo coordinates at which to anchor the info window.\r\n     *\r\n     * @memberof GoogleInfoWindow\r\n     * @method\r\n     */\r\n    public SetPosition(position: ILatLong): void {\r\n        const l: GoogleMapTypes.LatLngLiteral = GoogleConversions.TranslateLocation(position);\r\n        this._infoWindow.setPosition(l);\r\n    }\r\n}\r\n","import { GoogleConversions } from '../../services/google/google-conversions';\r\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\r\nimport { ILatLong } from '../../interfaces/ilatlong';\r\nimport { Marker } from '../marker';\r\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\r\n\r\n/**\r\n * Concrete implementation of the {@link Marker} contract for the Google Maps map architecture.\r\n *\r\n * @export\r\n */\r\nexport class GoogleMarker implements Marker {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _metadata: Map<string, any> = new Map<string, any>();\r\n    private _isFirst = false;\r\n    private _isLast = true;\r\n\r\n    ///\r\n    /// Public properties\r\n    ///\r\n\r\n    /**\r\n     * Indicates that the marker is the first marker in a set.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public get IsFirst(): boolean { return this._isFirst; }\r\n    public set IsFirst(val: boolean) { this._isFirst = val; }\r\n\r\n    /**\r\n     * Indicates that the marker is the last marker in the set.\r\n     *\r\n     * @memberof Marker\r\n     */\r\n    public get IsLast(): boolean { return this._isLast; }\r\n    public set IsLast(val: boolean) { this._isLast = val; }\r\n\r\n    /**\r\n     * Gets the marker metadata.\r\n     *\r\n     * @readonly\r\n     * @memberof BingMarker\r\n     */\r\n    public get Metadata(): Map<string, any> { return this._metadata; }\r\n\r\n    /**\r\n     * Gets the native primitve implementing the marker, in this case {@link Microsoft.Maps.Pushpin}\r\n     *\r\n     * @readonly\r\n     * @abstract\r\n     * @memberof BingMarker\r\n     */\r\n    public get NativePrimitve(): GoogleMapTypes.Marker { return this._marker; }\r\n\r\n    /**\r\n     * Gets the Location of the marker\r\n     *\r\n     * @readonly\r\n     * @abstract\r\n     * @memberof BingMarker\r\n     */\r\n    public get Location(): ILatLong {\r\n        const l: GoogleMapTypes.LatLng = this._marker.getPosition();\r\n        return {\r\n            latitude: l.lat(),\r\n            longitude: l.lng()\r\n        };\r\n    }\r\n\r\n    ///\r\n    /// Constructors\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of GoogleMarker.\r\n     * @param _marker\r\n     *\r\n     * @memberof GoogleMarker\r\n     */\r\n    constructor(private _marker: GoogleMapTypes.Marker) { }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Adds an event listener to the marker.\r\n     *\r\n     * @param eventType - String containing the event for which to register the listener (e.g. \"click\")\r\n     * @param fn - Delegate invoked when the event occurs.\r\n     *\r\n     * @memberof GoogleMarker\r\n     */\r\n    public AddListener(eventType: string, fn: Function): void {\r\n        this._marker.addListener(eventType, fn);\r\n    }\r\n\r\n    /**\r\n     * Deletes the marker.\r\n     *\r\n     *\r\n     * @memberof GoogleMarker\r\n     */\r\n    public DeleteMarker(): void {\r\n        this._marker.setMap(null);\r\n    }\r\n\r\n    /**\r\n     * Gets the marker label\r\n     *\r\n     * @memberof GoogleMarker\r\n     */\r\n    public GetLabel(): string {\r\n        return this._marker.getLabel().text;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the marker is visible.\r\n     *\r\n     * @returns - True if the marker is visible, false otherwise.\r\n     *\r\n     * @memberof GoogleMarker\r\n     */\r\n    public GetVisible(): boolean {\r\n        return this._marker.getVisible();\r\n    }\r\n\r\n    /**\r\n     * Sets the anchor for the marker. Use this to adjust the root location for the marker to accomodate various marker image sizes.\r\n     *\r\n     * @param anchor - Point coordinates for the marker anchor.\r\n     *\r\n     * @memberof GoogleMarker\r\n     */\r\n    public SetAnchor(anchor: any): void {\r\n        // not implemented\r\n        // TODO: we need to switch the model to complex icons for google to\r\n        // support anchors, sizes and origins.\r\n        // https://developers.google.com/maps/documentation/javascript/markers\r\n    }\r\n\r\n    /**\r\n     * Sets the draggability of a marker.\r\n     *\r\n     * @param draggable - True to mark the marker as draggable, false otherwise.\r\n     *\r\n     * @memberof GoogleMarker\r\n     */\r\n    public SetDraggable(draggable: boolean): void {\r\n        this._marker.setDraggable(draggable);\r\n    }\r\n\r\n    /**\r\n     * Sets the icon for the marker.\r\n     *\r\n     * @param icon - String containing the icon in various forms (url, data url, etc.)\r\n     *\r\n     * @memberof GoogleMarker\r\n     */\r\n    public SetIcon(icon: string): void {\r\n        this._marker.setIcon(icon);\r\n    }\r\n\r\n    /**\r\n     * Sets the marker label.\r\n     *\r\n     * @param label - String containing the label to set.\r\n     *\r\n     * @memberof GoogleMarker\r\n     */\r\n    public SetLabel(label: string): void {\r\n        this._marker.setLabel(label);\r\n    }\r\n\r\n    /**\r\n     * Sets the marker position.\r\n     *\r\n     * @param latLng - Geo coordinates to set the marker position to.\r\n     *\r\n     * @memberof GoogleMarker\r\n     */\r\n    public SetPosition(latLng: ILatLong): void {\r\n        const p: GoogleMapTypes.LatLng = GoogleConversions.TranslateLocationObject(latLng);\r\n        this._marker.setPosition(p);\r\n    }\r\n\r\n    /**\r\n     * Sets the marker title.\r\n     *\r\n     * @param title - String containing the title to set.\r\n     *\r\n     * @memberof GoogleMarker\r\n     */\r\n    public SetTitle(title: string): void {\r\n        this._marker.setTitle(title);\r\n    }\r\n\r\n    /**\r\n     * Sets the marker options.\r\n     *\r\n     * @param options - {@link IMarkerOptions} object containing the marker options to set. The supplied options are\r\n     * merged with the underlying marker options.\r\n     *\r\n     * @memberof GoogleMarker\r\n     */\r\n    public SetOptions(options: IMarkerOptions): void {\r\n        const o: GoogleMapTypes.MarkerOptions = GoogleConversions.TranslateMarkerOptions(options);\r\n        this._marker.setOptions(o);\r\n    }\r\n\r\n    /**\r\n     * Sets whether the marker is visible.\r\n     *\r\n     * @param visible - True to set the marker visible, false otherwise.\r\n     *\r\n     * @memberof GoogleMarker\r\n     */\r\n    public SetVisible(visible: boolean): void {\r\n        this._marker.setVisible(visible);\r\n    }\r\n\r\n}\r\n","import * as GoogleMapTypes from '../../services/google/google-map-types';\r\nimport { MapLabel } from '../map-label';\r\nimport { ILabelOptions } from '../../interfaces/ilabel-options';\r\ndeclare var google: any;\r\n\r\n/**\r\n * Implements map a labled to be placed on the map.\r\n *\r\n * @export\r\n */\r\nexport class GoogleMapLabel extends MapLabel {\r\n\r\n    /**\r\n     * Returns the default label style for the platform\r\n     *\r\n     * @readonly\r\n     * @abstract\r\n     * @memberof GoogleMapLabel\r\n     */\r\n    public get DefaultLabelStyle(): ILabelOptions {\r\n        return {\r\n            fontSize: 12,\r\n            fontFamily: 'sans-serif',\r\n            fontColor: '#ffffff',\r\n            strokeWeight: 3,\r\n            strokeColor: '#000000'\r\n        };\r\n    }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates a new MapLabel\r\n     * @param options Optional properties to set.\r\n     */\r\n    constructor(options: { [key: string]: any }) {\r\n        options.fontSize = options.fontSize || 12;\r\n        options.fontColor = options.fontColor || '#ffffff';\r\n        options.strokeWeight = options.strokeWeight || 3;\r\n        options.strokeColor = options.strokeColor || '#000000';\r\n        super(options);\r\n    }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Gets the value of a setting.\r\n     *\r\n     * @param key - Key specifying the setting.\r\n     * @returns - The value of the setting.\r\n     * @memberof MapLabel\r\n     * @method\r\n     */\r\n    public Get(key: string): any {\r\n        return (<any>this).get(key);\r\n    }\r\n\r\n    /**\r\n     * Gets the map associted with the label.\r\n     *\r\n     * @memberof GoogleMapLabel\r\n     * @method\r\n     */\r\n    public GetMap(): GoogleMapTypes.GoogleMap {\r\n        return (<any>this).getMap();\r\n    }\r\n\r\n    /**\r\n     * Set the value for a setting.\r\n     *\r\n     * @param key - Key specifying the setting.\r\n     * @param val - The value to set.\r\n     * @memberof MapLabel\r\n     * @method\r\n     */\r\n    public Set(key: string, val: any): void {\r\n        if (key === 'position' && val.hasOwnProperty('latitude') && val.hasOwnProperty('longitude')) {\r\n            val = new google.maps.LatLng(val.latitude, val.longitude);\r\n        }\r\n        if (this.Get(key) !== val) {\r\n            (<any>this).set(key, val);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the map for the label. Settings this to null remove the label from hte map.\r\n     *\r\n     * @param map - Map to associated with the label.\r\n     * @memberof GoogleMapLabel\r\n     * @method\r\n     */\r\n    public SetMap(map: GoogleMapTypes.GoogleMap): void {\r\n        (<any>this).setMap(map);\r\n    }\r\n\r\n    /**\r\n     * Applies settings to the object\r\n     *\r\n     * @param options - An object containing the settings key value pairs.\r\n     * @memberof MapLabel\r\n     * @method\r\n     */\r\n    public SetValues(options: { [key: string]: any }): void {\r\n        for (const key in options) {\r\n            if (key !== '') {\r\n                if (key === 'position' &&  options[key].hasOwnProperty('latitude') &&  options[key].hasOwnProperty('longitude')) {\r\n                    options[key] = new google.maps.LatLng( options[key].latitude,  options[key].longitude);\r\n                }\r\n                if (this.Get(key) === options[key]) { delete options[key]; }\r\n            }\r\n        }\r\n        (<any>this).setValues(options);\r\n    }\r\n\r\n    ///\r\n    /// Protected methods\r\n    ///\r\n\r\n    /**\r\n     * Draws the label on the map.\r\n     * @memberof GoogleMapLabel\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected Draw(): void {\r\n        const projection = (<any>this).getProjection();\r\n        const visibility: string = this.GetVisible();\r\n        if (!projection) {\r\n            // The map projection is not ready yet so do nothing\r\n            return;\r\n        }\r\n        if (!this._canvas) {\r\n            // onAdd has not been called yet.\r\n            return;\r\n        }\r\n        const style: CSSStyleDeclaration = this._canvas.style;\r\n        if (visibility !== '') {\r\n            // label is not visible, don't calculate positions etc.\r\n            style['visibility'] = visibility;\r\n            return;\r\n        }\r\n\r\n        let offset: GoogleMapTypes.Point = this.Get('offset');\r\n        let latLng: GoogleMapTypes.LatLng|GoogleMapTypes.LatLngLiteral = this.Get('position');\r\n        if (!latLng) { return; }\r\n        if (!(latLng instanceof google.maps.LatLng)) { latLng = new google.maps.LatLng(latLng.lat, latLng.lng); }\r\n        if (!offset) { offset = new google.maps.Point(0, 0); }\r\n\r\n        const pos = projection.fromLatLngToDivPixel(latLng);\r\n        style['top'] = (pos.y + offset.y) + 'px';\r\n        style['left'] = (pos.x + offset.x) + 'px';\r\n        style['visibility'] = visibility;\r\n    }\r\n\r\n    /**\r\n     * Delegate called when the label is added to the map. Generates and configures\r\n     * the canvas.\r\n     *\r\n     * @memberof GoogleMapLabel\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected OnAdd() {\r\n        this._canvas = document.createElement('canvas');\r\n        const style: CSSStyleDeclaration = this._canvas.style;\r\n        style.position = 'absolute';\r\n\r\n        const ctx: CanvasRenderingContext2D = this._canvas.getContext('2d');\r\n        ctx.lineJoin = 'round';\r\n        ctx.textBaseline = 'top';\r\n\r\n        this.DrawCanvas();\r\n        const panes = (<any>this).getPanes();\r\n        if (panes) {\r\n            panes.overlayLayer.appendChild(this._canvas);\r\n                // 4: floatPane (infowindow)\r\n                // 3: overlayMouseTarget (mouse events)\r\n                // 2: markerLayer (marker images)\r\n                // 1: overlayLayer (polygons, polylines, ground overlays, tile layer overlays)\r\n                // 0: mapPane (lowest pane above the map tiles)\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function to extend the OverlayView into the MapLabel\r\n *\r\n * @export\r\n * @method\r\n */\r\nexport function MixinMapLabelWithOverlayView() {\r\n    const x = GoogleMapLabel.prototype;\r\n    GoogleMapLabel.prototype = new google.maps.OverlayView;\r\n    for (const y in x) { if ((<any>x)[y] != null) { (<any>GoogleMapLabel.prototype)[y] = (<any>x)[y]; }}\r\n    (<any>GoogleMapLabel.prototype)['changed'] = x['Changed'];\r\n    (<any>GoogleMapLabel.prototype)['onAdd'] = x['OnAdd'];\r\n    (<any>GoogleMapLabel.prototype)['draw'] = x['Draw'];\r\n    (<any>GoogleMapLabel.prototype)['onRemove'] = x['OnRemove'];\r\n}\r\n","import { ILatLong } from '../../interfaces/ilatlong';\r\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\r\nimport { IPolygonEvent } from '../../interfaces/ipolygon-event';\r\nimport { GoogleConversions } from '../../services/google/google-conversions';\r\nimport { Polygon } from '../polygon';\r\nimport { GoogleMapLabel } from './google-label';\r\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\r\n\r\ndeclare var google: any;\r\n\r\n/**\r\n * Concrete implementation for a polygon model for Google Maps.\r\n *\r\n * @export\r\n */\r\nexport class GooglePolygon extends Polygon implements Polygon {\r\n\r\n    private _title: string = '';\r\n    private _showLabel: boolean = false;\r\n    private _showTooltip: boolean = false;\r\n    private _maxZoom: number = -1;\r\n    private _minZoom: number = -1;\r\n    private _label: GoogleMapLabel = null;\r\n    private _tooltip: GoogleMapLabel = null;\r\n    private _tooltipVisible: boolean = false;\r\n    private _hasToolTipReceiver: boolean = false;\r\n    private _originalPath: Array<Array<ILatLong>>;\r\n    private _mouseOverListener: GoogleMapTypes.MapsEventListener = null;\r\n    private _mouseOutListener: GoogleMapTypes.MapsEventListener = null;\r\n    private _mouseMoveListener: GoogleMapTypes.MapsEventListener = null;\r\n    private _metadata: Map<string, any> = new Map<string, any>();\r\n    private _editingCompleteEmitter: (event: IPolygonEvent) => void = null;\r\n\r\n    ///\r\n    /// Property declarations\r\n    ///\r\n\r\n    /**\r\n     * Gets or sets the maximum zoom at which the label is displayed. Ignored or ShowLabel is false.\r\n     *\r\n     * @memberof GooglePolygon\r\n     * @property\r\n     */\r\n    public get LabelMaxZoom(): number { return this._maxZoom; }\r\n    public set LabelMaxZoom(val: number) {\r\n        this._maxZoom = val;\r\n        this.ManageLabel();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the minimum zoom at which the label is displayed. Ignored or ShowLabel is false.\r\n     *\r\n     * @memberof GooglePolygon\r\n     * @property\r\n     */\r\n    public get LabelMinZoom(): number { return this._minZoom; }\r\n    public set LabelMinZoom(val: number) {\r\n        this._minZoom = val;\r\n        this.ManageLabel();\r\n    }\r\n\r\n    /**\r\n     * Gets the polygon metadata.\r\n     *\r\n     * @readonly\r\n     * @memberof GoolePolygon\r\n     */\r\n    public get Metadata(): Map<string, any> { return this._metadata; }\r\n\r\n    /**\r\n     * Gets the native primitve implementing the polygon, in this case {@link GoogleMapTypes.Polygon}\r\n     *\r\n     * @readonly\r\n     * @memberof GooglePolygon\r\n     */\r\n    public get NativePrimitve(): GoogleMapTypes.Polygon { return this._polygon; }\r\n\r\n    /**\r\n     * Gets or sets whether to show the label\r\n     *\r\n     * @abstract\r\n     * @memberof GooglePolygon\r\n     * @property\r\n     */\r\n    public get ShowLabel(): boolean { return this._showLabel; }\r\n    public set ShowLabel(val: boolean) {\r\n        this._showLabel = val;\r\n        this.ManageLabel();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets whether to show the tooltip\r\n     *\r\n     * @abstract\r\n     * @memberof GooglePolygon\r\n     * @property\r\n     */\r\n    public get ShowTooltip(): boolean { return this._showTooltip; }\r\n    public set ShowTooltip(val: boolean) {\r\n        this._showTooltip = val;\r\n        this.ManageTooltip();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the title off the polygon\r\n     *\r\n     * @abstract\r\n     * @memberof GooglePolygon\r\n     * @property\r\n     */\r\n    public get Title(): string { return this._title; }\r\n    public set Title(val: string) {\r\n        this._title = val;\r\n        this.ManageLabel();\r\n        this.ManageTooltip();\r\n    }\r\n\r\n    ///\r\n    /// constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of GooglePolygon.\r\n     * @param _polygon - The {@link GoogleMapTypes.Polygon} underlying the model.\r\n     *\r\n     * @memberof GooglePolygon\r\n     */\r\n    constructor(private _polygon: GoogleMapTypes.Polygon) {\r\n        super();\r\n        this._originalPath = this.GetPaths();\r\n    }\r\n\r\n    /**\r\n     * Adds a delegate for an event.\r\n     *\r\n     * @param eventType - String containing the event name.\r\n     * @param fn - Delegate function to execute when the event occurs.\r\n\r\n     * @memberof GooglePolygon\r\n     */\r\n    public AddListener(eventType: string, fn: Function): void {\r\n        const supportedEvents = [\r\n            'click',\r\n            'dblclick',\r\n            'drag', 'dragend',\r\n            'dragstart',\r\n            'mousedown',\r\n            'mousemove',\r\n            'mouseout',\r\n            'mouseover',\r\n            'mouseup',\r\n            'rightclick'\r\n        ];\r\n        if (supportedEvents.indexOf(eventType) !== -1) {\r\n            this._polygon.addListener(eventType, fn);\r\n        }\r\n        if (eventType === 'pathchanged') {\r\n            this._editingCompleteEmitter = <(event: IPolygonEvent) => void>fn;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deleted the polygon.\r\n     *\r\n     * @memberof GooglePolygon\r\n     */\r\n    public Delete(): void {\r\n        this._polygon.setMap(null);\r\n        if (this._label) { this._label.Delete(); }\r\n        if (this._tooltip) { this._tooltip.Delete(); }\r\n    }\r\n\r\n    /**\r\n     * Gets whether the polygon is draggable.\r\n     *\r\n     * @returns - True if the polygon is dragable, false otherwise.\r\n     *\r\n     * @memberof GooglePolygon\r\n     */\r\n    public GetDraggable(): boolean {\r\n        return this._polygon.getDraggable();\r\n    }\r\n\r\n    /**\r\n     * Gets whether the polygon path can be edited.\r\n     *\r\n     * @returns - True if the path can be edited, false otherwise.\r\n     *\r\n     * @memberof GooglePolygon\r\n     */\r\n    public GetEditable(): boolean {\r\n        return this._polygon.getEditable();\r\n    }\r\n\r\n    /**\r\n     * Gets the polygon path.\r\n     *\r\n     * @returns - Array of {@link ILatLong} objects describing the polygon path.\r\n     *\r\n     * @memberof GooglePolygon\r\n     */\r\n    public GetPath(): Array<ILatLong> {\r\n        const p: Array<GoogleMapTypes.LatLng> = this._polygon.getPath();\r\n        const path: Array<ILatLong> = new Array<ILatLong>();\r\n        p.forEach(x => path.push({ latitude: x.lat(), longitude: x.lng() }));\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Gets the polygon paths.\r\n     *\r\n     * @returns - Array of Array of {@link ILatLong} objects describing multiple polygon paths.\r\n     *\r\n     * @memberof GooglePolygon\r\n     */\r\n    public GetPaths(): Array<Array<ILatLong>> {\r\n        const p: Array<Array<GoogleMapTypes.LatLng>> = this._polygon.getPaths();\r\n        const paths: Array<Array<ILatLong>> = new Array<Array<ILatLong>>();\r\n        p.forEach(x => {\r\n            const path: Array<ILatLong> = new Array<ILatLong>();\r\n            x.forEach(y => path.push({ latitude: y.lat(), longitude: y.lng() }));\r\n            paths.push(path);\r\n        });\r\n        return paths;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the polygon is visible.\r\n     *\r\n     * @returns - True if the polygon is visible, false otherwise.\r\n     *\r\n     * @memberof GooglePolygon\r\n     */\r\n    public GetVisible(): boolean {\r\n        return this._polygon.getVisible();\r\n    }\r\n\r\n    /**\r\n     * Sets whether the polygon is dragable.\r\n     *\r\n     * @param draggable - True to make the polygon dragable, false otherwise.\r\n     *\r\n     * @memberof GooglePolygon\r\n     */\r\n    public SetDraggable(draggable: boolean): void {\r\n        this._polygon.setDraggable(draggable);\r\n    }\r\n\r\n    /**\r\n     * Sets wether the polygon path is editable.\r\n     *\r\n     * @param editable - True to make polygon path editable, false otherwise.\r\n     *\r\n     * @memberof GooglePolygon\r\n     */\r\n    public SetEditable(editable: boolean): void {\r\n        const previous = this._polygon.getEditable();\r\n        this._polygon.setEditable(editable);\r\n        if (previous && !editable && this._editingCompleteEmitter) {\r\n            this._editingCompleteEmitter({\r\n                Click: null,\r\n                Polygon: this,\r\n                OriginalPath: this._originalPath,\r\n                NewPath: this.GetPaths()\r\n            });\r\n            this._originalPath = this.GetPaths();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the polygon options\r\n     *\r\n     * @param options - {@link ILatLong} object containing the options. The options are merged with hte ones\r\n     * already on the underlying model.\r\n     *\r\n     * @memberof GooglePolygon\r\n     */\r\n    public SetOptions(options: IPolygonOptions): void {\r\n        const o: GoogleMapTypes.PolygonOptions = GoogleConversions.TranslatePolygonOptions(options);\r\n\r\n        if (typeof o.editable !== 'undefined') {\r\n            this.SetEditable(o.editable);\r\n            delete o.editable;\r\n        }\r\n\r\n        this._polygon.setOptions(o);\r\n        if (options.visible != null && this._showLabel && this._label) { this._label.Set('hidden', !options.visible); }\r\n    }\r\n\r\n    /**\r\n     * Sets the polygon path.\r\n     *\r\n     * @param path - An Array of {@link ILatLong} (or array of arrays) describing the polygons path.\r\n     *\r\n     * @memberof GooglePolygon\r\n     */\r\n    public SetPath(path: Array<ILatLong>): void {\r\n        const p: Array<GoogleMapTypes.LatLng> = new Array<GoogleMapTypes.LatLng>();\r\n        path.forEach(x => p.push(new google.maps.LatLng(x.latitude, x.longitude)));\r\n        this._polygon.setPath(p);\r\n        this._originalPath = [path];\r\n        if (this._label) {\r\n            this._centroid = null;\r\n            this.ManageLabel();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the polygon path or paths.\r\n     *\r\n     * @param paths An Array of {@link ILatLong}\r\n     * (or array of arrays) describing the polygons path(s).\r\n     *\r\n     * @memberof GooglePolygon\r\n     */\r\n    public SetPaths(paths: Array<Array<ILatLong>> | Array<ILatLong>): void {\r\n        if (paths == null) { return; }\r\n        if (!Array.isArray(paths)) { return; }\r\n        if (paths.length === 0) {\r\n            this._polygon.setPaths(new Array<GoogleMapTypes.LatLng>());\r\n            if (this._label) {\r\n                this._label.Delete();\r\n                this._label = null;\r\n            }\r\n            return;\r\n        }\r\n        if (Array.isArray(paths[0])) {\r\n            // parameter is an array or arrays\r\n            const p: Array<Array<GoogleMapTypes.LatLng>> = new Array<Array<GoogleMapTypes.LatLng>>();\r\n            (<Array<Array<ILatLong>>>paths).forEach(path => {\r\n                const _p: Array<GoogleMapTypes.LatLng> = new Array<GoogleMapTypes.LatLng>();\r\n                path.forEach(x => _p.push(new google.maps.LatLng(x.latitude, x.longitude)));\r\n                p.push(_p);\r\n            });\r\n            this._polygon.setPaths(p);\r\n            this._originalPath = <Array<Array<ILatLong>>>paths;\r\n            if (this._label) {\r\n                this._centroid = null;\r\n                this.ManageLabel();\r\n            }\r\n        } else {\r\n            // parameter is a simple array....\r\n            this.SetPath(<Array<ILatLong>>paths);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets whether the polygon is visible.\r\n     *\r\n     * @param visible - True to set the polygon visible, false otherwise.\r\n     *\r\n     * @memberof GooglePolygon\r\n     */\r\n    public SetVisible(visible: boolean): void {\r\n        this._polygon.setVisible(visible);\r\n        if (this._showLabel && this._label) { this._label.Set('hidden', !visible); }\r\n    }\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n\r\n    /**\r\n     * Configures the label for the polygon\r\n     * @memberof GooglePolygon\r\n     */\r\n    private ManageLabel(): void {\r\n        if (this.GetPath == null || this.GetPath().length === 0) { return; }\r\n        if (this._showLabel && this._title != null && this._title !== '') {\r\n            const o: { [key: string]: any } = {\r\n                text: this._title,\r\n                position: GoogleConversions.TranslateLocationObject(this.Centroid)\r\n            };\r\n            if (o.position == null) { return; }\r\n            if (this._minZoom !== -1) { o.minZoom = this._minZoom; }\r\n            if (this._maxZoom !== -1) { o.maxZoom = this._maxZoom; }\r\n            if (this._label == null) {\r\n                o.map = this.NativePrimitve.getMap();\r\n                o.zIndex = this.NativePrimitve.zIndex ? this.NativePrimitve.zIndex + 1 : 100;\r\n                this._label = new GoogleMapLabel(o);\r\n            }\r\n            else {\r\n                this._label.SetValues(o);\r\n            }\r\n            this._label.Set('hidden', !this.GetVisible());\r\n        }\r\n        else {\r\n            if (this._label) {\r\n                this._label.SetMap(null);\r\n                this._label = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Configures the tooltip for the polygon\r\n     * @memberof GooglePolygon\r\n     */\r\n    private ManageTooltip(): void {\r\n        if (this._showTooltip && this._title != null && this._title !== '') {\r\n            const o: { [key: string]: any } = {\r\n                text: this._title,\r\n                align: 'left',\r\n                offset: new google.maps.Point(0, 25),\r\n                backgroundColor: 'bisque',\r\n                hidden: true,\r\n                fontSize: 12,\r\n                fontColor: '#000000',\r\n                strokeWeight: 0\r\n            };\r\n            if (this._tooltip == null) {\r\n                o.map = this.NativePrimitve.getMap();\r\n                o.zIndex = 100000;\r\n                this._tooltip = new GoogleMapLabel(o);\r\n            }\r\n            else {\r\n                this._tooltip.SetValues(o);\r\n            }\r\n            if (!this._hasToolTipReceiver) {\r\n                this._mouseOverListener = this.NativePrimitve.addListener('mouseover', (e: GoogleMapTypes.MouseEvent) => {\r\n                    this._tooltip.Set('position', e.latLng);\r\n                    if (!this._tooltipVisible) {\r\n                        this._tooltip.Set('hidden', false);\r\n                        this._tooltipVisible = true;\r\n                    }\r\n                });\r\n                this._mouseMoveListener = this.NativePrimitve.addListener('mousemove', (e: GoogleMapTypes.MouseEvent) => {\r\n                    if (this._tooltipVisible) { this._tooltip.Set('position', e.latLng); }\r\n                });\r\n                this._mouseOutListener = this.NativePrimitve.addListener('mouseout', (e: GoogleMapTypes.MouseEvent) => {\r\n                    if (this._tooltipVisible) {\r\n                        this._tooltip.Set('hidden', true);\r\n                        this._tooltipVisible = false;\r\n                    }\r\n                });\r\n                this._hasToolTipReceiver = true;\r\n            }\r\n        }\r\n        if ((!this._showTooltip || this._title === '' || this._title == null)) {\r\n            if (this._hasToolTipReceiver) {\r\n                if (this._mouseOutListener) { google.maps.event.removeListener(this._mouseOutListener); }\r\n                if (this._mouseOverListener) { google.maps.event.removeListener(this._mouseOverListener); }\r\n                if (this._mouseMoveListener) { google.maps.event.removeListener(this._mouseMoveListener); }\r\n                this._hasToolTipReceiver = false;\r\n            }\r\n            if (this._tooltip) {\r\n                this._tooltip.SetMap(null);\r\n                this._tooltip = null;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","import { ILatLong } from '../../interfaces/ilatlong';\r\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\r\nimport { GoogleConversions } from '../../services/google/google-conversions';\r\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\r\nimport { GoogleMapLabel } from './google-label';\r\nimport { Polyline } from '../polyline';\r\n\r\ndeclare var google: any;\r\n\r\n/**\r\n * Concrete implementation for a polyline model for Google Maps.\r\n *\r\n * @export\r\n */\r\nexport class GooglePolyline extends Polyline implements Polyline {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _title: string = '';\r\n    private _showTooltip: boolean = false;\r\n    private _tooltip: GoogleMapLabel = null;\r\n    private _tooltipVisible: boolean = false;\r\n    private _hasToolTipReceiver: boolean = false;\r\n    private _mouseOverListener: GoogleMapTypes.MapsEventListener = null;\r\n    private _mouseOutListener: GoogleMapTypes.MapsEventListener = null;\r\n    private _mouseMoveListener: GoogleMapTypes.MapsEventListener = null;\r\n    private _metadata: Map<string, any> = new Map<string, any>();\r\n\r\n    ///\r\n    /// Property declarations\r\n    ///\r\n\r\n    /**\r\n     * Gets the polyline metadata.\r\n     *\r\n     * @readonly\r\n     * @memberof GooglePolyline\r\n     */\r\n    public get Metadata(): Map<string, any> { return this._metadata; }\r\n\r\n    /**\r\n     * Gets the native primitve implementing the marker, in this case {@link GoogleMApTypes.Polyline}\r\n     *\r\n     * @readonly\r\n     * @memberof GooglePolygon\r\n     */\r\n    public get NativePrimitve(): GoogleMapTypes.Polyline { return this._polyline; }\r\n\r\n    /**\r\n     * Gets or sets whether to show the tooltip\r\n     *\r\n     * @abstract\r\n     * @memberof GooglePolygon\r\n     * @property\r\n     */\r\n    public get ShowTooltip(): boolean { return this._showTooltip; }\r\n    public set ShowTooltip(val: boolean) {\r\n        this._showTooltip = val;\r\n        this.ManageTooltip();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the title off the polygon\r\n     *\r\n     * @abstract\r\n     * @memberof GooglePolygon\r\n     * @property\r\n     */\r\n    public get Title(): string { return this._title; }\r\n    public set Title(val: string) {\r\n        this._title = val;\r\n        this.ManageTooltip();\r\n    }\r\n\r\n    ///\r\n    /// constructor\r\n    ///\r\n\r\n     /**\r\n     * Creates an instance of GooglePolygon.\r\n     * @param _polyline - The {@link GoogleMApTypes.Polyline} underlying the model.\r\n     *\r\n     * @memberof GooglePolyline\r\n     */\r\n    constructor(private _polyline: GoogleMapTypes.Polyline) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Adds a delegate for an event.\r\n     *\r\n     * @param eventType - String containing the event name.\r\n     * @param fn - Delegate function to execute when the event occurs.\r\n     * @memberof Polyline\r\n     */\r\n    public AddListener(eventType: string, fn: Function): void {\r\n        const supportedEvents = [\r\n            'click',\r\n            'dblclick',\r\n            'drag', 'dragend',\r\n            'dragstart',\r\n            'mousedown',\r\n            'mousemove',\r\n            'mouseout',\r\n            'mouseover',\r\n            'mouseup',\r\n            'rightclick'\r\n        ];\r\n        if (supportedEvents.indexOf(eventType) !== -1) {\r\n            this._polyline.addListener(eventType, fn);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deleted the polyline.\r\n     *\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public Delete(): void {\r\n        this._polyline.setMap(null);\r\n        if (this._tooltip) { this._tooltip.Delete(); }\r\n    }\r\n\r\n    /**\r\n     * Gets whether the polyline is draggable.\r\n     *\r\n     * @returns - True if the polyline is dragable, false otherwise.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public GetDraggable(): boolean {\r\n        return this._polyline.getDraggable();\r\n    }\r\n\r\n    /**\r\n     * Gets whether the polyline path can be edited.\r\n     *\r\n     * @returns - True if the path can be edited, false otherwise.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public GetEditable(): boolean {\r\n        return this._polyline.getEditable();\r\n    }\r\n\r\n    /**\r\n     * Gets the polyline path.\r\n     *\r\n     * @returns - Array of {@link ILatLong} objects describing the polyline path.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public GetPath(): Array<ILatLong> {\r\n        const p: Array<GoogleMapTypes.LatLng> = this._polyline.getPath();\r\n        const path: Array<ILatLong> = new Array<ILatLong>();\r\n        p.forEach(x => path.push({ latitude: x.lat(), longitude: x.lng() }));\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the polyline is visible.\r\n     *\r\n     * @returns - True if the polyline is visible, false otherwise.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public GetVisible(): boolean {\r\n        return this._polyline.getVisible();\r\n    }\r\n\r\n    /**\r\n     * Sets whether the polyline is dragable.\r\n     *\r\n     * @param draggable - True to make the polyline dragable, false otherwise.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public SetDraggable(draggable: boolean): void {\r\n        this._polyline.setDraggable(draggable);\r\n    }\r\n\r\n    /**\r\n     * Sets wether the polyline path is editable.\r\n     *\r\n     * @param editable - True to make polyline path editable, false otherwise.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public SetEditable(editable: boolean): void {\r\n        this._polyline.setEditable(editable);\r\n    }\r\n\r\n    /**\r\n     * Sets the polyline options\r\n     *\r\n     * @param options - {@link ILatLong} object containing the options. The options are merged with hte ones\r\n     * already on the underlying model.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public SetOptions(options: IPolylineOptions): void {\r\n        const o: GoogleMapTypes.PolylineOptions = GoogleConversions.TranslatePolylineOptions(options);\r\n        this._polyline.setOptions(o);\r\n        if (options.path) {\r\n            this.SetPath(<Array<ILatLong>>options.path);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the polyline path.\r\n     *\r\n     * @param path - An Array of {@link ILatLong} (or array of arrays) describing the polylines path.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public SetPath(path: Array<ILatLong>): void {\r\n        const p: Array<GoogleMapTypes.LatLng> = new Array<GoogleMapTypes.LatLng>();\r\n        path.forEach(x => p.push(new google.maps.LatLng(x.latitude, x.longitude)));\r\n        this._polyline.setPath(p);\r\n    }\r\n\r\n    /**\r\n     * Sets whether the polyline is visible.\r\n     *\r\n     * @param visible - True to set the polyline visible, false otherwise.\r\n     *\r\n     * @memberof Polyline\r\n     */\r\n    public SetVisible(visible: boolean): void {\r\n        this._polyline.setVisible(visible);\r\n    }\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n    /**\r\n     * Configures the tooltip for the polyline\r\n     * @memberof GooglePolyline\r\n     */\r\n    private ManageTooltip(): void {\r\n        if (this._showTooltip && this._title != null && this._title !== '') {\r\n            const o: { [key: string]: any } = {\r\n                text: this._title,\r\n                align: 'left',\r\n                offset: new google.maps.Point(0, 25),\r\n                backgroundColor: 'bisque',\r\n                hidden: true,\r\n                fontSize: 12,\r\n                fontColor: '#000000',\r\n                strokeWeight: 0\r\n            };\r\n            if (this._tooltip == null) {\r\n                o.map = this.NativePrimitve.getMap();\r\n                o.zIndex = 100000;\r\n                this._tooltip = new GoogleMapLabel(o);\r\n            }\r\n            else {\r\n                this._tooltip.SetValues(o);\r\n            }\r\n            if (!this._hasToolTipReceiver) {\r\n                this._mouseOverListener = this.NativePrimitve.addListener('mouseover', (e: GoogleMapTypes.MouseEvent) => {\r\n                    this._tooltip.Set('position', e.latLng);\r\n                    if (!this._tooltipVisible) {\r\n                        this._tooltip.Set('hidden', false);\r\n                        this._tooltipVisible = true;\r\n                    }\r\n                });\r\n                this._mouseMoveListener = this.NativePrimitve.addListener('mousemove', (e: GoogleMapTypes.MouseEvent) => {\r\n                    if (this._tooltipVisible) { this._tooltip.Set('position', e.latLng); }\r\n                });\r\n                this._mouseOutListener = this.NativePrimitve.addListener('mouseout', (e: GoogleMapTypes.MouseEvent) => {\r\n                    if (this._tooltipVisible) {\r\n                        this._tooltip.Set('hidden', true);\r\n                        this._tooltipVisible = false;\r\n                    }\r\n                });\r\n                this._hasToolTipReceiver = true;\r\n            }\r\n        }\r\n        if ((!this._showTooltip || this._title === '' || this._title == null)) {\r\n            if (this._hasToolTipReceiver) {\r\n                if (this._mouseOutListener) { google.maps.event.removeListener(this._mouseOutListener); }\r\n                if (this._mouseOverListener) { google.maps.event.removeListener(this._mouseOverListener); }\r\n                if (this._mouseMoveListener) { google.maps.event.removeListener(this._mouseMoveListener); }\r\n                this._hasToolTipReceiver = false;\r\n            }\r\n            if (this._tooltip) {\r\n                this._tooltip.SetMap(null);\r\n                this._tooltip = null;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","import { IMapEventLookup } from '../../interfaces/imap-event-lookup';\r\n\r\n/**\r\n * This contstant translates the abstract map events into their corresponding google map\r\n * equivalents.\r\n */\r\nexport const GoogleMapEventsLookup: IMapEventLookup = {\r\n    click :             'click',\r\n    dblclick :          'dblclick',\r\n    rightclick :        'rightclick',\r\n    resize :            'resize',\r\n    boundschanged :     'bounds_changed',\r\n    centerchanged :     'center_changed',\r\n    zoomchanged :       'zoom_changed',\r\n    mouseover:          'mouseover',\r\n    mouseout :          'mouseout',\r\n    mousemove :         'mousemove',\r\n    infowindowclose:    'closeclick'\r\n};\r\n","import { ILatLong } from '../../interfaces/ilatlong';\r\nimport { GoogleConversions } from '../../services/google/google-conversions';\r\nimport { CanvasOverlay } from '../canvas-overlay';\r\nimport { MapLabel } from '../map-label';\r\nimport { GoogleMapLabel } from './google-label';\r\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\r\ndeclare var google: any;\r\n\r\n/**\r\n * Concrete implementing a canvas overlay to be placed on the map for Google Maps.\r\n *\r\n * @export\r\n */\r\nexport class GoogleCanvasOverlay extends CanvasOverlay {\r\n\r\n    ///\r\n    /// field declarations\r\n    ///\r\n    private _viewChangeEndEvent: GoogleMapTypes.MapsEventListener;\r\n    private _mapResizeEvent: GoogleMapTypes.MapsEventListener;\r\n\r\n    /**\r\n     * Creates a new instance of the GoogleCanvasOverlay class.\r\n     * @param drawCallback A callback function that is triggered when the canvas is ready to be\r\n     * rendered for the current map view.\r\n     * @memberof GoogleCanvasOverlay\r\n     */\r\n    constructor(drawCallback: (canvas: HTMLCanvasElement) => void) {\r\n        super(drawCallback);\r\n    }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Obtains geo coordinates for the click location\r\n     *\r\n     * @param e - The mouse event.\r\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\r\n     * @memberof GoogleCanvasOverlay\r\n     */\r\n    public GetCoordinatesFromClick(e: GoogleMapTypes.MouseEvent): ILatLong {\r\n        if (!e) { return null; }\r\n        if (!e.latLng) { return null; }\r\n        if (!e.latLng.lat || !e.latLng.lng) { return null; }\r\n        return { latitude: e.latLng.lat(), longitude: e.latLng.lng() };\r\n    }\r\n\r\n    /**\r\n     * Gets the map associted with the label.\r\n     *\r\n     * @memberof GoogleCanvasOverlay\r\n     * @method\r\n     */\r\n    public GetMap(): GoogleMapTypes.GoogleMap {\r\n        return (<any>this).getMap();\r\n    }\r\n\r\n    /**\r\n     * Returns a MapLabel instance for the current platform that can be used as a tooltip.\r\n     * This method only generates the map label. Content and placement is the responsibility\r\n     * of the caller.\r\n     *\r\n     * @returns - The label to be used for the tooltip.\r\n     * @memberof GoogleCanvasOverlay\r\n     * @method\r\n     */\r\n    public GetToolTipOverlay(): MapLabel {\r\n        const o: { [key: string]: any } = {\r\n            align: 'left',\r\n            offset: new google.maps.Point(0, 25),\r\n            backgroundColor: 'bisque',\r\n            hidden: true,\r\n            fontSize: 12,\r\n            fontColor: '#000000',\r\n            strokeWeight: 0\r\n        };\r\n        o.zIndex = 100000;\r\n        const label: MapLabel = new GoogleMapLabel(o);\r\n        label.SetMap(this.GetMap());\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * Called when the custom overlay is added to the map. Triggers Onload....\r\n     * @memberof GoogleCanvasOverlay\r\n     */\r\n    public OnAdd(): void {\r\n        super.OnAdd();\r\n        this.OnLoad();\r\n        this._canvas.style.zIndex = '100';\r\n            // move the canvas above primitives such as polygons.\r\n\r\n        // set the overlay to ready state\r\n        this._readyResolver(true);\r\n    }\r\n\r\n    /**\r\n     * Called whenever the canvas needs to be redrawn. This method does not do the actual\r\n     * update, it simply scales the canvas. The actual redraw happens once the map is idle.\r\n     * @memberof GoogleCanvasOverly\r\n     * @method\r\n     */\r\n    public OnDraw(): void {\r\n        const isStreetView: boolean = false;\r\n        const map: GoogleMapTypes.GoogleMap = this.GetMap();\r\n\r\n        if (isStreetView) {\r\n            // Don't show the canvas if the map is in Streetside mode.\r\n            this._canvas.style.display = 'none';\r\n        }\r\n        else {\r\n            // Re-drawing the canvas as it moves would be too slow. Instead, scale and translate canvas element.\r\n            // Upon idle or drag end, we can then redraw the canvas....\r\n            const zoomCurrent: number = map.getZoom();\r\n            const centerCurrent: GoogleMapTypes.LatLng = map.getCenter();\r\n\r\n            // Calculate map scale based on zoom level difference.\r\n            const scale: number = Math.pow(2, zoomCurrent - this._zoomStart);\r\n\r\n            // Calculate the scaled dimensions of the canvas.\r\n            const el: HTMLDivElement = map.getDiv();\r\n            const w: number = el.offsetWidth;\r\n            const h: number = el.offsetHeight;\r\n            const newWidth: number = w * scale;\r\n            const newHeight: number = h * scale;\r\n\r\n            // Calculate offset of canvas based on zoom and center offsets.\r\n            const projection = (<any>this).getProjection();\r\n            const cc = projection.fromLatLngToDivPixel(centerCurrent);\r\n\r\n            // Update the canvas CSS position and dimensions.\r\n            this.UpdatePosition(cc.x - newWidth / 2, cc.y - newHeight / 2, newWidth, newHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * CanvasOverlay loaded, attach map events for updating canvas.\r\n     * @method\r\n     * @memberof GoogleCanvasOverlay\r\n     */\r\n    public OnLoad(): void {\r\n        const isStreetView: boolean = false;\r\n        const map: GoogleMapTypes.GoogleMap = (<any>this).getMap();\r\n\r\n        // Get the current map view information.\r\n        this._zoomStart = map.getZoom();\r\n        const c: GoogleMapTypes.LatLng = map.getCenter();\r\n        this._centerStart = {\r\n            latitude: c.lat(),\r\n            longitude: c.lng()\r\n        };\r\n\r\n        // When the map stops moving, render new data on the canvas.\r\n        this._viewChangeEndEvent = google.maps.event.addListener(map, 'idle', (e: any) => {\r\n            this.UpdateCanvas();\r\n        });\r\n\r\n        // Update the position of the overlay when the map is resized.\r\n        this._mapResizeEvent = google.maps.event.addListener(map, 'resize', (e: any) => {\r\n            this.UpdateCanvas();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Associates the cnavas overlay with a map.\r\n     * @method\r\n     * @memberof GoogleCanvasOverlay\r\n     */\r\n    public SetMap(map: GoogleMapTypes.GoogleMap): void {\r\n        (<any>this).setMap(map);\r\n    }\r\n\r\n    ///\r\n    /// Protected methods\r\n    ///\r\n\r\n    /**\r\n     * Attaches the canvas to the map.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     */\r\n    protected SetCanvasElement(el: HTMLCanvasElement): void {\r\n        const panes = (<any>this).getPanes();\r\n        if (panes) {\r\n            if (el != null) {\r\n                panes.overlayLayer.appendChild(el);\r\n                // 4: floatPane (infowindow)\r\n                // 3: overlayMouseTarget (mouse events)\r\n                // 2: markerLayer (marker images)\r\n                // 1: overlayLayer (polygons, polylines, ground overlays, tile layer overlays)\r\n                // 0: mapPane (lowest pane above the map tiles)\r\n            }\r\n            else {\r\n                panes.overlayLayer.removeChild(this._canvas);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove the map event handlers.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected RemoveEventHandlers(): void {\r\n        // Remove all event handlers from the map.\r\n        if (this._viewChangeEndEvent) { google.maps.event.removeListener(this._viewChangeEndEvent); }\r\n        if (this._mapResizeEvent) { google.maps.event.removeListener(this._mapResizeEvent); }\r\n    }\r\n\r\n    /**\r\n     * Updates the Canvas size based on the map size.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected Resize(): void {\r\n        const map: GoogleMapTypes.GoogleMap = (<any>this).getMap();\r\n\r\n        // Clear canvas by updating dimensions. This also ensures canvas stays the same size as the map.\r\n        const el: HTMLDivElement = map.getDiv();\r\n        this._canvas.width = el.offsetWidth;\r\n        this._canvas.height = el.offsetHeight;\r\n    }\r\n\r\n    /**\r\n     * Updates the Canvas.\r\n     * @memberof CanvasOverlay\r\n     * @method\r\n     * @protected\r\n     */\r\n    protected UpdateCanvas(): void {\r\n        const map: GoogleMapTypes.GoogleMap = (<any>this).getMap();\r\n\r\n        // Only render the canvas if it isn't in streetside mode.\r\n        if (true) {\r\n            this._canvas.style.display = '';\r\n\r\n            // Reset CSS position and dimensions of canvas.\r\n            const el: HTMLDivElement = map.getDiv();\r\n            const w: number = el.offsetWidth;\r\n            const h: number = el.offsetHeight;\r\n            const centerPoint = (<any>this).getProjection().fromLatLngToDivPixel(map.getCenter());\r\n            this.UpdatePosition((centerPoint.x - w / 2), (centerPoint.y - h / 2), w, h);\r\n\r\n            // Redraw the canvas.\r\n            this.Redraw(true);\r\n\r\n            // Get the current map view information.\r\n            this._zoomStart = map.getZoom();\r\n            const c: GoogleMapTypes.LatLng = map.getCenter();\r\n            this._centerStart = {\r\n                latitude: c.lat(),\r\n                longitude: c.lng()\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function to extend the OverlayView into the CanvasOverlay\r\n *\r\n * @export\r\n * @method\r\n */\r\nexport function MixinCanvasOverlay() {\r\n    const x = GoogleCanvasOverlay.prototype;\r\n    GoogleCanvasOverlay.prototype = <any> new google.maps.OverlayView();\r\n    for (const y in x) { if ((<any>x)[y] != null) { (<any>GoogleCanvasOverlay.prototype)[y] = (<any>x)[y]; }}\r\n    (<any>GoogleCanvasOverlay.prototype)['onAdd'] = x['OnAdd'];\r\n    (<any>GoogleCanvasOverlay.prototype)['draw'] = x['OnDraw'];\r\n    (<any>GoogleCanvasOverlay.prototype)['onRemove'] = x['OnRemove'];\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MapService } from './map.service';\r\nimport { MarkerService } from './marker.service';\r\nimport { InfoBoxService } from './infobox.service';\r\nimport { LayerService } from './layer.service';\r\nimport { ClusterService } from './cluster.service';\r\nimport { PolygonService } from './polygon.service';\r\nimport { PolylineService } from './polyline.service';\r\n\r\n/**\r\n * Implements a factory to create all the implementation specifc services for a map implementation\r\n *\r\n * @export\r\n * @abstract\r\n */\r\n@Injectable()\r\nexport abstract class MapServiceFactory {\r\n\r\n    /**\r\n     * Creates the map service.\r\n     *\r\n     * @abstract\r\n     * @returns - {@link MapService} implementing a specific underlying map architecture.\r\n     *\r\n     * @memberof MapServiceFactory\r\n     */\r\n    abstract Create(): MapService;\r\n\r\n    /**\r\n     * Creates the cluster service.\r\n     *\r\n     * @abstract\r\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\r\n     * @returns - {@link ClusterService} implementation for the underlying map architecture.\r\n     *\r\n     * @memberof MapServiceFactory\r\n     */\r\n    abstract CreateClusterService(map: MapService): ClusterService;\r\n\r\n    /**\r\n     * Creates the info box service.\r\n     *\r\n     * @abstract\r\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\r\n     * @param marker - {@link MarkerService} implementation for thh underlying marker archticture.\r\n     * @returns - {@link InfoBoxService} implementation for the underlying map architecture.\r\n     *\r\n     * @memberof MapServiceFactory\r\n     */\r\n    abstract CreateInfoBoxService(map: MapService, marker: MarkerService): InfoBoxService;\r\n\r\n    /**\r\n     * Creates the layer service.\r\n     *\r\n     * @abstract\r\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\r\n     * @returns - {@link LayerService} implementation for the underlying map architecture.\r\n     *\r\n     * @memberof MapServiceFactory\r\n     */\r\n    abstract CreateLayerService(map: MapService): LayerService;\r\n\r\n    /**\r\n     * Creates the marker service.\r\n     *\r\n     * @abstract\r\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\r\n     * @param layers - {@link LayerService} implementation for the underlying map architecture.\r\n     * @param clusters  - {@link ClusterService} implementation for the underlying map architecture.\r\n     * @returns - {@link MarkerService} implementation for the underlying map architecture.\r\n     *\r\n     * @memberof MapServiceFactory\r\n     */\r\n    abstract CreateMarkerService(map: MapService, layers: LayerService, clusters: ClusterService): MarkerService;\r\n\r\n    /**\r\n     * Creates the polygon service.\r\n     *\r\n     * @abstract\r\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\r\n     * @param layers - {@link LayerService} implementation for the underlying map architecture.\r\n     * @returns - {@link PolygonService} implementation for the underlying map architecture.\r\n     *\r\n     * @memberof MapServiceFactory\r\n     */\r\n    abstract CreatePolygonService(map: MapService, layers: LayerService): PolygonService;\r\n\r\n    /**\r\n     * Creates the polyline service.\r\n     *\r\n     * @abstract\r\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\r\n     * @param layers - {@link LayerService} implementation for the underlying map architecture.\r\n     * @returns - {@link PolylineService} implementation for the underlying map architecture.\r\n     *\r\n     * @memberof MapServiceFactory\r\n     */\r\n    abstract CreatePolylineService(map: MapService, layers: LayerService): PolylineService;\r\n\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IMapOptions } from '../interfaces/imap-options';\r\nimport { ILayerOptions } from '../interfaces/ilayer-options';\r\nimport { ILatLong } from '../interfaces/ilatlong';\r\nimport { IPoint } from '../interfaces/ipoint';\r\nimport { ISize } from '../interfaces/isize';\r\nimport { IBox } from '../interfaces/ibox';\r\nimport { IPolygonOptions } from '../interfaces/ipolygon-options';\r\nimport { IPolylineOptions } from '../interfaces/ipolyline-options';\r\nimport { IMarkerOptions } from '../interfaces/imarker-options';\r\nimport { IInfoWindowOptions } from '../interfaces/iinfo-window-options';\r\nimport { Marker } from '../models/marker';\r\nimport { Layer } from '../models/layer';\r\nimport { Polygon } from '../models/polygon';\r\nimport { Polyline } from '../models/polyline';\r\nimport { InfoWindow } from '../models/info-window';\r\nimport { CanvasOverlay } from '../models/canvas-overlay';\r\n\r\n/**\r\n * Abstract class to implement map api. A concrete implementation should be created for each\r\n * Map provider supported (e.g. Bing, Goolge, ESRI)\r\n *\r\n * @export\r\n * @abstract\r\n */\r\n@Injectable()\r\nexport abstract class MapService {\r\n\r\n    ///\r\n    /// Public properties\r\n    ///\r\n\r\n    /**\r\n     * Gets the Map control instance underlying the implementation\r\n     *\r\n     * @readonly\r\n     * @memberof MapService\r\n     */\r\n    abstract get MapInstance(): any;\r\n\r\n    /**\r\n     * Gets a Promise for a Map control instance underlying the implementation. Use this instead of {@link MapInstance} if you\r\n     * are not sure if and when the instance will be created.\r\n     * @readonly\r\n     * @memberof MapService\r\n     */\r\n    abstract get MapPromise(): Promise<any>;\r\n\r\n    /**\r\n     * Gets the maps physical size.\r\n     *\r\n     * @readonly\r\n     * @abstract\r\n     * @memberof MapService\r\n     */\r\n    abstract get MapSize(): ISize;\r\n\r\n\r\n    ///\r\n    /// Public methods and MapService interface implementation\r\n    ///\r\n\r\n    /**\r\n     * Gets a random geo locations filling the bounding box.\r\n     *\r\n     * @param count - number of locations to return\r\n     * @param bounds  - bounding box.\r\n     * @returns - Array of geo locations.\r\n     * @memberof MapService\r\n     */\r\n    public static GetRandonLocations(count: number, bounds: IBox): Array<ILatLong> {\r\n        const a: Array<ILatLong> = [];\r\n        const _getRandomLocation = (b: IBox) => {\r\n            const lat: number = Math.random() * (b.maxLatitude - b.minLatitude) + b.minLatitude;\r\n            let lng: number = 0;\r\n            if (crossesDateLine) {\r\n                lng = Math.random() * (b.minLongitude + 360 - b.maxLongitude) + b.maxLongitude;\r\n                if (lng > 180) { lng = lng - 360; }\r\n            }\r\n            else {\r\n                lng = Math.random() * (b.maxLongitude - b.minLongitude) + b.minLongitude;\r\n            }\r\n            const p: ILatLong = { latitude: lat, longitude: lng };\r\n            return p;\r\n        };\r\n        let crossesDateLine: boolean = false;\r\n\r\n        if (bounds == null) { bounds = <IBox>{\r\n                maxLatitude: 360,\r\n                minLatitude: 0,\r\n                maxLongitude: 170,\r\n                minLongitude: 0\r\n            };\r\n        }\r\n        if (bounds.center.longitude < bounds.minLongitude  || bounds.center.longitude > bounds.maxLongitude) { crossesDateLine = true; }\r\n        if (!count || count <= 0) {\r\n            return [_getRandomLocation(bounds)];\r\n        }\r\n        for (let r = 0; r < count; r++) { a.push(_getRandomLocation(bounds)); }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * Creates a canvas overlay layer to perform custom drawing over the map with out\r\n     * some of the overhead associated with going through the Map objects.\r\n     * @param drawCallback A callback function that is triggered when the canvas is ready to be\r\n     * rendered for the current map view.\r\n     * @returns - Promise of a {@link CanvasOverlay} object.\r\n     * @memberof MapService\r\n     * @abstract\r\n     */\r\n    public abstract CreateCanvasOverlay(drawCallback: (canvas: HTMLCanvasElement) => void): Promise<CanvasOverlay>;\r\n\r\n    /**\r\n     * Creates a map cluster layer within the map context\r\n     *\r\n     * @param options - Options for the layer. See {@link IClusterOptions}.\r\n     * @returns - Promise of a {@link Layer} object, which models the underlying native layer object.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract CreateClusterLayer(options: ILayerOptions): Promise<Layer>;\r\n\r\n    /**\r\n     * Creates an information window for a map position\r\n     *\r\n     * @param [options] - Infowindow options. See {@link IInfoWindowOptions}\r\n     * @returns - Promise of a {@link InfoWindow} object, which models the underlying natvie infobox object.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract CreateInfoWindow(options?: IInfoWindowOptions): Promise<InfoWindow>;\r\n\r\n    /**\r\n     * Creates a map layer within the map context\r\n     *\r\n     * @param options - Options for the layer. See {@link ILayerOptions}\r\n     * @returns - Promise of a {@link Layer} object, which models the underlying native layer object.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract CreateLayer(options: ILayerOptions): Promise<Layer>;\r\n\r\n    /**\r\n     * Creates a map instance\r\n     *\r\n     * @param el - HTML element to host the map.\r\n     * @param mapOptions - Map options\r\n     * @returns - Promise fullfilled once the map has been created.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract CreateMap(el: HTMLElement, mapOptions: IMapOptions): Promise<void>;\r\n\r\n    /**\r\n     * Creates a map marker within the map context\r\n     *\r\n     * @param [options=<IMarkerOptions>{}] - Options for the marker. See {@link IMarkerOptions}.\r\n     * @returns - Promise of a {@link Marker} object, which models the underlying native pushpin object.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract CreateMarker(options: IMarkerOptions): Promise<Marker>;\r\n\r\n    /**\r\n     * Creates a polygon within the map context\r\n     *\r\n     * @abstract\r\n     * @param options - Options for the polygon. See {@link IPolygonOptions}.\r\n     * @returns - Promise of a {@link Polygon} object, which models the underlying native polygon.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract CreatePolygon(options: IPolygonOptions): Promise<Polygon>;\r\n\r\n    /**\r\n     * Creates a polyline within the map context\r\n     *\r\n     * @abstract\r\n     * @param options - Options for the polyline. See {@link IPolylineOptions}.\r\n     * @returns - Promise of a {@link Polyline} object (or an array thereof for complex paths),\r\n     * which models the underlying native polyline.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract CreatePolyline(options: IPolylineOptions): Promise<Polyline|Array<Polyline>>;\r\n\r\n    /**\r\n     * Deletes a layer from the map.\r\n     *\r\n     * @param layer - Layer to delete. See {@link Layer}.\r\n     * @returns - Promise fullfilled when the layer has been removed.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract DeleteLayer(layer: Layer): Promise<void>;\r\n\r\n    /**\r\n     * Dispaose the map and associated resoures.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract DisposeMap(): void;\r\n\r\n    /**\r\n     * Gets the geo coordinates of the map bounds\r\n     *\r\n     * @returns - A promise that when fullfilled contains the bounding box of the screen. See {@link IBox}.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract GetBounds(): Promise<IBox>;\r\n\r\n    /**\r\n     * Gets the geo coordinates of the map center\r\n     *\r\n     * @returns - A promise that when fullfilled contains the goe location of the center. See {@link ILatLong}.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract GetCenter(): Promise<ILatLong>;\r\n\r\n    /**\r\n     * Gets the current zoom level of the map.\r\n     *\r\n     * @returns - A promise that when fullfilled contains the zoom level.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract GetZoom(): Promise<number>;\r\n\r\n    /**\r\n     * Provides a conversion of geo coordinates to pixels on the map control.\r\n     *\r\n     * @param loc - The geo coordinates to translate.\r\n     * @returns - Promise of an {@link IPoint} interface representing the pixels. This promise resolves to null\r\n     * if the goe coordinates are not in the view port.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract LocationToPoint(loc: ILatLong): Promise<IPoint>;\r\n\r\n    /**\r\n     * Provides a conversion of geo coordinates to pixels on the map control.\r\n     *\r\n     * @param loc - The geo coordinates to translate.\r\n     * @returns - Promise of an {@link IPoint} interface array representing the pixels.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract LocationsToPoints(locs: Array<ILatLong>): Promise<Array<IPoint>>;\r\n\r\n    /**\r\n     * Centers the map on a geo location.\r\n     *\r\n     * @param latLng - GeoCoordinates around which to center the map. See {@link ILatLong}\r\n     * @returns - Promise that is fullfilled when the center operations has been completed.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract SetCenter(latLng: ILatLong): Promise<void>;\r\n\r\n    /**\r\n     * Sets the generic map options.\r\n     *\r\n     * @param options - Options to set.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract SetMapOptions(options: IMapOptions): void;\r\n\r\n    /**\r\n     * Sets the view options of the map.\r\n     *\r\n     * @param options - Options to set.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract SetViewOptions(options: IMapOptions): void;\r\n\r\n    /**\r\n     * Sets the zoom level of the map.\r\n     *\r\n     * @param zoom - Zoom level to set.\r\n     * @returns - A Promise that is fullfilled once the zoom operation is complete.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract SetZoom(zoom: number): Promise<void>;\r\n\r\n    /**\r\n     * Creates an event subscription\r\n     *\r\n     * @param eventName - The name of the event (e.g. 'click')\r\n     * @returns - An observable of tpye E that fires when the event occurs.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract SubscribeToMapEvent<E>(eventName: string): Observable<E>;\r\n\r\n    /**\r\n     * Triggers the given event name on the map instance.\r\n     *\r\n     * @param eventName - Event to trigger.\r\n     * @returns - A promise that is fullfilled once the event is triggered.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    abstract TriggerMapEvent(eventName: string): Promise<void>;\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IPoint } from '../interfaces/ipoint';\r\nimport { ILatLong } from '../interfaces/ilatlong';\r\nimport { Marker } from '../models/marker';\r\nimport { MapMarkerDirective } from '../components/map-marker';\r\n\r\n/**\r\n * The abstract class represents the contract defintions for a marker service to be implemented by an acutaly underlying\r\n * map architecture.\r\n *\r\n * @export\r\n * @abstract\r\n */\r\n@Injectable()\r\nexport abstract class MarkerService {\r\n\r\n    /**\r\n     * Adds a marker. Depending on the marker context, the marker will either by added to the map or a correcsponding layer.\r\n     *\r\n     * @abstract\r\n     * @param marker - The {@link MapMarkerDirective} to be added.\r\n     *\r\n     * @memberof MarkerService\r\n     */\r\n    public abstract AddMarker(marker: MapMarkerDirective): void;\r\n\r\n    /**\r\n     * Registers an event delegate for a marker.\r\n     *\r\n     * @abstract\r\n     * @param eventName - The name of the event to register (e.g. 'click')\r\n     * @param marker - The {@link MapMarker} for which to register the event.\r\n     * @returns - Observable emiting an instance of T each time the event occurs.\r\n     *\r\n     * @memberof MarkerService\r\n     */\r\n    public abstract CreateEventObservable<T>(eventName: string, marker: MapMarkerDirective): Observable<T>;\r\n\r\n    /**\r\n     * Deletes a marker.\r\n     *\r\n     * @abstract\r\n     * @param marker - {@link MapMarkerDirective} to be deleted.\r\n     * @returns - A promise fullfilled once the marker has been deleted.\r\n     *\r\n     * @memberof MarkerService\r\n     */\r\n    public abstract DeleteMarker(marker: MapMarkerDirective): Promise<void>;\r\n\r\n    /**\r\n     * Obtains geo coordinates for the marker on the click location\r\n     *\r\n     * @abstract\r\n     * @param e - The mouse event.\r\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\r\n     *\r\n     * @memberof MarkerService\r\n     */\r\n    public abstract GetCoordinatesFromClick(e: MouseEvent| any): ILatLong;\r\n\r\n    /**\r\n     * Obtains the marker model for the marker allowing access to native implementation functionatiliy.\r\n     *\r\n     * @abstract\r\n     * @param marker - The {@link MapMarkerDirective} for which to obtain the marker model.\r\n     * @returns - A promise that when fullfilled contains the {@link Marker} implementation of the underlying platform.\r\n     *\r\n     * @memberof MarkerService\r\n     */\r\n    public abstract GetNativeMarker(marker: MapMarkerDirective): Promise<Marker>;\r\n\r\n    /**\r\n     * Obtains the marker pixel location for the marker on the click location\r\n     *\r\n     * @abstract\r\n     * @param e - The mouse event.\r\n     * @returns - {@link ILatLong} containing the pixels of the marker on the map canvas.\r\n     *\r\n     * @memberof MarkerService\r\n     */\r\n    public abstract GetPixelsFromClick(e: MouseEvent| any): IPoint;\r\n\r\n    /**\r\n     * Converts a geo location to a pixel location relative to the map canvas.\r\n     *\r\n     * @abstract\r\n     * @param target - Either a {@link MapMarkerDirective} or a {@link ILatLong}\r\n     * for the basis of translation.\r\n     * @returns - A promise that when fullfilled contains a {@link IPoint}\r\n     * with the pixel coordinates of the MapMarkerDirective or ILatLong relative to the map canvas.\r\n     *\r\n     * @memberof MarkerService\r\n     */\r\n    public abstract LocationToPoint(target: MapMarkerDirective | ILatLong): Promise<IPoint>;\r\n\r\n    /**\r\n     * Updates the anchor position for the marker.\r\n     *\r\n     * @abstract\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the anchor.\r\n     * Anchor information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the anchor position has been updated.\r\n     *\r\n     * @memberof MarkerService\r\n     */\r\n    public abstract UpdateAnchor(maker: MapMarkerDirective): Promise<void>;\r\n\r\n    /**\r\n     * Updates whether the marker is draggable.\r\n     *\r\n     * @abstract\r\n     * @param - The {@link MapMarkerDirective} object for which to upate dragability.\r\n     * Dragability information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the marker has been updated.\r\n     *\r\n     * @memberof MarkerService\r\n     */\r\n    public abstract UpdateDraggable(marker: MapMarkerDirective): Promise<void>;\r\n\r\n    /**\r\n     * Updates the Icon on the marker.\r\n     *\r\n     * @abstract\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the icon.\r\n     * Icon information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the icon information has been updated.\r\n     *\r\n     * @memberof MarkerService\r\n     */\r\n    public abstract UpdateIcon(marker: MapMarkerDirective): Promise<void>;\r\n\r\n    /**\r\n     * Updates the label on the marker.\r\n     *\r\n     * @abstract\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the label.\r\n     * Label information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the label has been updated.\r\n     *\r\n     * @memberof MarkerService\r\n     */\r\n    public abstract UpdateLabel(marker: MapMarkerDirective): Promise<void>;\r\n\r\n    /**\r\n     * Updates the geo coordinates for the marker.\r\n     *\r\n     * @abstract\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the coordinates.\r\n     * Coordinate information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the position has been updated.\r\n     *\r\n     * @memberof MarkerService\r\n     */\r\n    public abstract UpdateMarkerPosition(marker: MapMarkerDirective): Promise<void>;\r\n\r\n    /**\r\n     * Updates the title on the marker.\r\n     *\r\n     * @abstract\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the title.\r\n     * Title information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the title has been updated.\r\n     *\r\n     * @memberof MarkerService\r\n     */\r\n    public abstract UpdateTitle(marker: MapMarkerDirective): Promise<void>;\r\n\r\n    /**\r\n     * Updates the visibility on the marker.\r\n     *\r\n     * @abstract\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the visibility.\r\n     * Visibility information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the visibility has been updated.\r\n     *\r\n     * @memberof MarkerService\r\n     */\r\n    public abstract UpdateVisible(marker: MapMarkerDirective): Promise<void>;\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { InfoBoxComponent } from '../components/infobox';\r\nimport { IInfoWindowOptions } from '../interfaces/iinfo-window-options';\r\nimport { ILatLong } from '../interfaces/ilatlong';\r\nimport { InfoWindow } from '../models/info-window';\r\n\r\n/**\r\n * This class defines the contract for an InfoBoxService. Each Map Architecture provider is expected the furnish a concrete implementation.\r\n *\r\n * @export\r\n * @abstract\r\n */\r\n@Injectable()\r\nexport abstract class InfoBoxService {\r\n\r\n    /**\r\n     * Adds an info window to the map or layer.\r\n     *\r\n     * @abstract\r\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\r\n     *\r\n     * @memberof InfoBoxService\r\n     */\r\n    abstract AddInfoWindow(info: InfoBoxComponent): void;\r\n\r\n    /**\r\n     * Closes an infobox that is open.\r\n     *\r\n     * @abstract\r\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\r\n     * @returns - A promise that is fullfilled when the infobox has been closed.\r\n     *\r\n     * @memberof InfoBoxService\r\n     */\r\n    abstract Close(info: InfoBoxComponent): Promise<void>;\r\n\r\n    /**\r\n     * Subscribe to events on the infowindow.\r\n     *\r\n     * @abstract\r\n     * @param eventName - The name of the event to register (e.g. 'click')\r\n     * @param infoComponent - The {@link InfoBoxComponent} for which to register the event.\r\n     * @returns - Observable emiting an instance of T each time the event occurs.\r\n     *\r\n     * @memberof InfoBoxService\r\n     */\r\n    abstract CreateEventObservable<T>(event: string, infoBoxComponent: InfoBoxComponent): Observable<T>;\r\n\r\n\r\n    /**\r\n     * Deletes an infobox.\r\n     *\r\n     * @abstract\r\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\r\n     * @returns - A promise that is fullfilled when the infobox has been deleted.\r\n     *\r\n     * @memberof InfoBoxService\r\n     */\r\n    abstract DeleteInfoWindow(info: InfoBoxComponent): Promise<void>;\r\n\r\n    /**\r\n     * Opens an infobox that is closed.\r\n     *\r\n     * @abstract\r\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\r\n     * @returns - A promise that is fullfilled when the infobox has been opened.\r\n     *\r\n     * @memberof InfoBoxService\r\n     */\r\n    abstract Open(info: InfoBoxComponent, loc?: ILatLong): Promise<void>;\r\n\r\n    /**\r\n     * Sets the infobox options.\r\n     *\r\n     * @abstract\r\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\r\n     * @param options - {@link IInfoWindowOptions} object containing the options to set. Options provided are\r\n     * merged with the existing options of the underlying infobox.\r\n     * @returns - A promise that is fullfilled when the infobox options have been updated.\r\n     *\r\n     * @memberof InfoBoxService\r\n     */\r\n    abstract SetOptions(info: InfoBoxComponent, options: IInfoWindowOptions): Promise<void>;\r\n\r\n    /**\r\n     * Set the position of the infobox based on the properties set on the InfoBox component.\r\n     *\r\n     * @abstract\r\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\r\n     * @param latlng - The position to set\r\n     * @returns - A promise that is fullfilled when the infobox position has been updated.\r\n     *\r\n     * @memberof InfoBoxService\r\n     */\r\n    abstract SetPosition(info: InfoBoxComponent, latlng?: ILatLong): Promise<void>;\r\n\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { IMarkerOptions } from '../interfaces/imarker-options';\r\nimport { IPolygonOptions } from '../interfaces/ipolygon-options';\r\nimport { IPolylineOptions } from '../interfaces/ipolyline-options';\r\nimport { IMarkerIconInfo } from '../interfaces/imarker-icon-info';\r\nimport { Marker } from '../models/marker';\r\nimport { Polygon } from '../models/polygon';\r\nimport { Polyline } from '../models/polyline';\r\nimport { Layer } from '../models/layer';\r\nimport { MapLayerDirective } from '../components/map-layer';\r\n\r\n/**\r\n * Abstract class to to define the layer service contract. Must be realized by implementing provider.\r\n *\r\n * @export\r\n * @abstract\r\n */\r\n@Injectable()\r\nexport abstract class LayerService {\r\n\r\n    /**\r\n     * Adds a layer to the map.\r\n     *\r\n     * @abstract\r\n     * @param layer - MapLayerDirective component object.\r\n     * Generally, MapLayerDirective will be injected with an instance of the\r\n     * LayerService and then self register on initialization.\r\n     *\r\n     * @memberof LayerService\r\n     */\r\n    public abstract AddLayer(layer: MapLayerDirective): void;\r\n\r\n    /**\r\n     * Adds a marker to the layer.\r\n     *\r\n     * @abstract\r\n     * @param layer - The id of the layer to which to add the marker.\r\n     * @param options - Marker options defining the marker.\r\n     * @returns - A promise that when fullfilled contains the an instance of the Marker model.\r\n     *\r\n     * @memberof LayerService\r\n     */\r\n    public abstract CreateMarker(layer: number, options: IMarkerOptions): Promise<Marker>;\r\n\r\n    /**\r\n     * Creates an array of unbound markers. Use this method to create arrays of markers to be used in bulk\r\n     * operations.\r\n     *\r\n     * @abstract\r\n     * @param options - Marker options defining the markers.\r\n     * @param markerIcon - Optional information to generate custom markers. This will be applied to all markers.\r\n     * @returns - A promise that when fullfilled contains the an arrays of the Marker models.\r\n     *\r\n     * @memberof LayerService\r\n     */\r\n    public abstract CreateMarkers(options: Array<IMarkerOptions>, markerIcon?: IMarkerIconInfo): Promise<Array<Marker>>;\r\n\r\n    /**\r\n     * Adds a polygon to the layer.\r\n     *\r\n     * @abstract\r\n     * @param layer - The id of the layer to which to add the line.\r\n     * @param options - Polygon options defining the line.\r\n     * @returns - A promise that when fullfilled contains the an instance of the Polygon model.\r\n     *\r\n     * @memberof LayerService\r\n     */\r\n    public abstract CreatePolygon(layer: number, options: IPolygonOptions): Promise<Polygon>;\r\n\r\n    /**\r\n     * Creates an array of unbound polygons. Use this method to create arrays of polygons to be used in bulk\r\n     * operations.\r\n     *\r\n     * @param layer - The id of the layer to which to add the polygon.\r\n     * @param options - Polygon options defining the polygons.\r\n     * @returns - A promise that when fullfilled contains the an arrays of the Polygon models.\r\n     *\r\n     * @memberof LayerService\r\n     */\r\n    public abstract CreatePolygons(layer: number, options: Array<IPolygonOptions>): Promise<Array<Polygon>>;\r\n\r\n    /**\r\n     * Adds a polyline to the layer.\r\n     *\r\n     * @abstract\r\n     * @param layer - The id of the layer to which to add the line.\r\n     * @param options - Polyline options defining the marker.\r\n     * @returns - A promise that when fullfilled contains the an instance of the Polyline (or an\r\n     * array of polylines for complex paths) model.\r\n     *\r\n     * @memberof LayerService\r\n     */\r\n    public abstract CreatePolyline(layer: number, options: IPolygonOptions): Promise<Polyline|Array<Polyline>>;\r\n\r\n    /**\r\n     * Creates an array of unbound polylines. Use this method to create arrays of polylines to be used in bulk\r\n     * operations.\r\n     *\r\n     * @param layer - The id of the layer to which to add the polylines.\r\n     * @param options - Polyline options defining the polylines.\r\n     * @returns - A promise that when fullfilled contains the an arrays of the Polyline models.\r\n     *\r\n     * @memberof LayerService\r\n     */\r\n    public abstract CreatePolylines(layer: number, options: Array<IPolylineOptions>): Promise<Array<Polyline|Array<Polyline>>>;\r\n\r\n    /**\r\n     * Deletes the layer\r\n     *\r\n     * @abstract\r\n     * @param layer - MapLayerDirective component object for which to retrieve the layer.\r\n     * @returns - A promise that is fullfilled when the layer has been removed.\r\n     *\r\n     * @memberof LayerService\r\n     */\r\n    public abstract DeleteLayer(layer: MapLayerDirective): Promise<void>;\r\n\r\n    /**\r\n     * Returns the Layer model represented by this layer.\r\n     *\r\n     * @abstract\r\n     * @param layer - MapLayerDirective component object or MapLayerId for which to retrieve the layer model.\r\n     * @returns - A promise that when resolved contains the Layer model.\r\n     *\r\n     * @memberof LayerService\r\n     */\r\n    public abstract GetNativeLayer(layer: MapLayerDirective|number): Promise<Layer>;\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IPolygonOptions } from '../interfaces/ipolygon-options';\r\nimport { ILatLong } from '../interfaces/ilatlong';\r\nimport { Polygon } from '../models/polygon';\r\nimport { MapPolygonDirective } from '../components/map-polygon';\r\n\r\n/**\r\n * The abstract class represents the contract defintions for a polygon service to be implemented by an acutaly underlying\r\n * map architecture.\r\n *\r\n * @export\r\n * @abstract\r\n */\r\n@Injectable()\r\nexport abstract class PolygonService {\r\n\r\n  /**\r\n   * Adds a polygon to a map. Depending on the polygon context, the polygon will either by added to the map or a\r\n   * correcsponding layer.\r\n   *\r\n   * @abstract\r\n   * @param polygon - The {@link MapPolygonDirective} to be added.\r\n   *\r\n   * @memberof PolygonService\r\n   */\r\n  public abstract AddPolygon(polygon: MapPolygonDirective): void;\r\n\r\n  /**\r\n    * Registers an event delegate for a marker.\r\n    *\r\n    * @abstract\r\n    * @param eventName - The name of the event to register (e.g. 'click')\r\n    * @param polygon - The {@link MapPolygonDirective} for which to register the event.\r\n    * @returns - Observable emiting an instance of T each time the event occurs.\r\n    *\r\n    * @memberof PolygonService\r\n    */\r\n  public abstract CreateEventObservable<T>(eventName: string, polygon: MapPolygonDirective): Observable<T>;\r\n\r\n  /**\r\n    * Deletes a polygon.\r\n    *\r\n    * @abstract\r\n    * @param polygon - {@link MapPolygonDirective} to be deleted.\r\n    * @returns - A promise fullfilled once the polygon has been deleted.\r\n    *\r\n    * @memberof PolygonService\r\n    */\r\n  public abstract DeletePolygon(polygon: MapPolygonDirective): Promise<void>;\r\n\r\n  /**\r\n   * Obtains geo coordinates for the marker on the click location\r\n   *\r\n   * @abstract\r\n   * @param e - The mouse event.\r\n   * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\r\n   *\r\n   * @memberof MarkerService\r\n   */\r\n  public abstract GetCoordinatesFromClick(e: MouseEvent | any): ILatLong;\r\n\r\n  /**\r\n   * Obtains the polygon model for the polygon allowing access to native implementation functionatiliy.\r\n   *\r\n   * @abstract\r\n   * @param polygon - The {@link MapPolygonDirective} for which to obtain the polygon model.\r\n   * @returns - A promise that when fullfilled contains the {@link Polygon} implementation of the underlying platform.\r\n   *\r\n   * @memberof PolygonService\r\n   */\r\n  public abstract GetNativePolygon(polygon: MapPolygonDirective): Promise<Polygon>;\r\n\r\n  /**\r\n   * Set the polygon options.\r\n   *\r\n   * @abstract\r\n   * @param polygon - {@link MapPolygonDirective} to be updated.\r\n   * @param options - {@link IPolygonOptions} object containing the options. Options will be merged with the\r\n   * options already on the underlying object.\r\n   * @returns - A promise fullfilled once the polygon options have been set.\r\n   *\r\n   * @memberof PolygonService\r\n   */\r\n  public abstract SetOptions(polygon: MapPolygonDirective, options: IPolygonOptions): Promise<void>;\r\n\r\n  /**\r\n   * Updates the Polygon path\r\n   *\r\n   * @abstract\r\n   * @param polygon - {@link MapPolygonDirective} to be updated.\r\n   * @returns - A promise fullfilled once the polygon has been updated.\r\n   *\r\n   * @memberof PolygonService\r\n   */\r\n  public abstract UpdatePolygon(polygon: MapPolygonDirective): Promise<void>;\r\n\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IPolylineOptions } from '../interfaces/ipolyline-options';\r\nimport { ILatLong } from '../interfaces/ilatlong';\r\nimport { Polyline } from '../models/polyline';\r\nimport { MapPolylineDirective } from '../components/map-polyline';\r\n\r\n/**\r\n * The abstract class represents the contract defintions for a polyline service to be implemented by an acutaly underlying\r\n * map architecture.\r\n *\r\n * @export\r\n * @abstract\r\n */\r\n@Injectable()\r\nexport abstract class PolylineService {\r\n\r\n  /**\r\n   * Adds a polyline to a map. Depending on the polyline context, the polyline will either by added to the map or a\r\n   * correcsponding layer.\r\n   *\r\n   * @abstract\r\n   * @param polyline - The {@link MapPolylineDirective} to be added.\r\n   *\r\n   * @memberof PolylineService\r\n   */\r\n  public abstract AddPolyline(polyline: MapPolylineDirective): void;\r\n\r\n  /**\r\n    * Registers an event delegate for a marker.\r\n    *\r\n    * @abstract\r\n    * @param eventName - The name of the event to register (e.g. 'click')\r\n    * @param polyline - The {@link MapPolylineDirective} for which to register the event.\r\n    * @returns - Observable emiting an instance of T each time the event occurs.\r\n    *\r\n    * @memberof PolylineService\r\n    */\r\n  public abstract CreateEventObservable<T>(eventName: string, polyline: MapPolylineDirective): Observable<T>;\r\n\r\n  /**\r\n    * Deletes a polyline.\r\n    *\r\n    * @abstract\r\n    * @param polyline - {@link MapPolylineDirective} to be deleted.\r\n    * @returns - A promise fullfilled once the polyline has been deleted.\r\n    *\r\n    * @memberof PolylineService\r\n    */\r\n  public abstract DeletePolyline(polyline: MapPolylineDirective): Promise<void>;\r\n\r\n  /**\r\n   * Obtains geo coordinates for the marker on the click location\r\n   *\r\n   * @abstract\r\n   * @param e - The mouse event.\r\n   * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\r\n   *\r\n   * @memberof MarkerService\r\n   */\r\n  public abstract GetCoordinatesFromClick(e: MouseEvent | any): ILatLong;\r\n\r\n  /**\r\n   * Obtains the polyline model for the polyline allowing access to native implementation functionatiliy.\r\n   *\r\n   * @abstract\r\n   * @param polyline - The {@link MapPolylineDirective} for which to obtain the polyline model.\r\n   * @returns - A promise that when fullfilled contains the {@link Polyline} implementation (or an\r\n   * array of polylines) for complex paths of the underlying platform.\r\n   *\r\n   * @memberof PolylineService\r\n   */\r\n  public abstract GetNativePolyline(polyline: MapPolylineDirective): Promise<Polyline|Array<Polyline>>;\r\n\r\n  /**\r\n   * Set the polyline options.\r\n   *\r\n   * @abstract\r\n   * @param polyline - {@link MapPolylineDirective} to be updated.\r\n   * @param options - {@link IPolylineOptions} object containing the options. Options will be merged with the\r\n   * options already on the underlying object.\r\n   * @returns - A promise fullfilled once the polyline options have been set.\r\n   *\r\n   * @memberof PolylineService\r\n   */\r\n  public abstract SetOptions(polyline: MapPolylineDirective, options: IPolylineOptions): Promise<void>;\r\n\r\n  /**\r\n   * Updates the Polyline path\r\n   *\r\n   * @abstract\r\n   * @param polyline - {@link MapPolylineDirective} to be updated.\r\n   * @returns - A promise fullfilled once the polyline has been updated.\r\n   *\r\n   * @memberof PolylineService\r\n   */\r\n  public abstract UpdatePolyline(polyline: MapPolylineDirective): Promise<void>;\r\n\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { IMarkerOptions } from '../interfaces/imarker-options';\r\nimport { IPolygonOptions } from '../interfaces/ipolygon-options';\r\nimport { IPolylineOptions } from '../interfaces/ipolyline-options';\r\nimport { IMarkerIconInfo } from '../interfaces/imarker-icon-info';\r\nimport { Marker } from '../models/marker';\r\nimport { Layer } from '../models/layer';\r\nimport { Polygon } from '../models/polygon';\r\nimport { Polyline } from '../models/polyline';\r\nimport { ClusterLayerDirective } from '../components/cluster-layer';\r\nimport { LayerService } from './layer.service';\r\n\r\n/**\r\n * Abstract class to to define teh cluster layer service contract. Must be realized by implementing provider.\r\n *\r\n * @export\r\n * @abstract\r\n */\r\n@Injectable()\r\nexport abstract class ClusterService extends LayerService {\r\n\r\n    /**\r\n     * Start to actually cluster the entities in a cluster layer. This method should be called after the initial set of entities\r\n     * have been added to the cluster. This method is used for performance reasons as adding an entitiy will recalculate all clusters.\r\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\r\n     * complete to recalculate the clusters.\r\n     *\r\n     * @param layer - ClusterLayerDirective component object for which to retrieve the layer.\r\n     *\r\n     * @memberof ClusterService\r\n     */\r\n    public abstract StartClustering(layer: ClusterLayerDirective): Promise<void>;\r\n\r\n    /**\r\n     * Stop to actually cluster the entities in a cluster layer.\r\n     * This method is used for performance reasons as adding an entitiy will recalculate all clusters.\r\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\r\n     * complete to recalculate the clusters.\r\n     *\r\n     * @param layer - ClusterLayerDirective component object for which to retrieve the layer.\r\n     *\r\n     * @memberof ClusterService\r\n     */\r\n    public abstract StopClustering(layer: ClusterLayerDirective): Promise<void>;\r\n\r\n}\r\n","import { Directive, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n/**\r\n * InfoBoxAction renders an action in an info window {@link InfoBox}\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import {Component} from '@angular/core';\r\n * import {MapComponent, MapMarkerDirective, InfoBoxComponent, InfoBoxActionDirective} from '...';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *    .map-container { height: 300px; }\r\n *  `],\r\n *  template: `\r\n *    <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\r\n *      <x-map-marker [Latitude]=\"lat\" [Longitude]=\"lng\" [Label]=\"'M'\">\r\n *        <x-info-box>\r\n *          <x-info-box-action [Label]=\"actionlabel\" (ActionClicked)=\"actionClicked(this)\"></x-info-box-action>\r\n *        </x-info-box>\r\n *      </x-map-marker>\r\n *    </x-map>\r\n *  `\r\n * })\r\n * ```\r\n *\r\n * @export\r\n */\r\n@Directive({\r\n    selector: 'x-info-box-action'\r\n})\r\nexport class InfoBoxActionDirective {\r\n\r\n    /**\r\n     * The label to display on the action\r\n     *\r\n     * @memberof InfoBoxActionDirective\r\n     */\r\n    @Input()\r\n    Label: string;\r\n\r\n    /**\r\n     * Emits an event when the action has been clicked\r\n     *\r\n     * @memberof InfoBoxActionDirective\r\n     */\r\n    @Output()\r\n    ActionClicked: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n}\r\n","import {\r\n    AfterViewInit,\r\n    Component,\r\n    ContentChildren,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    QueryList,\r\n    SimpleChange,\r\n    ViewChild,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport { IInfoWindowOptions } from '../interfaces/iinfo-window-options';\r\nimport { ILatLong } from '../interfaces/ilatlong';\r\nimport { InfoBoxService } from '../services/infobox.service';\r\nimport { MapMarkerDirective } from './map-marker';\r\nimport { InfoBoxActionDirective } from './infobox-action';\r\n\r\n/**\r\n * internal counter to use as ids for multiple infoboxes.\r\n */\r\nlet infoBoxId = 0;\r\n\r\n/**\r\n * InfoBox renders a info window inside a {@link MapMarkerDirective} or standalone.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import {Component} from '@angular/core';\r\n * import {MapComponent, MapMarkerDirective, InfoBoxComponent, InfoBoxActionDirective} from '...';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *    .map-container { height: 300px; }\r\n * `],\r\n *  template: `\r\n *    <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\r\n *      <x-map-marker [Latitude]=\"lat\" [Longitude]=\"lng\" [Label]=\"'M'\">\r\n *        <x-info-box [DisableAutoPan]=\"true\">\r\n *          Hi, this is the content of the <strong>info window</strong>\r\n *         </x-info-box>\r\n *       </x-map-marker>\r\n *     </x-map>\r\n *  `\r\n * })\r\n * ```\r\n *\r\n * @export\r\n */\r\n@Component({\r\n    selector: 'x-info-box',\r\n    template: `\r\n        <div #infoBoxContent class='info-box-content'>\r\n            <ng-content></ng-content>\r\n        </div>`,\r\n    styles: [`\r\n        x-map .MicrosoftMap .Infobox .infobox-title { padding: 10px 10px 5px 10px }\r\n        x-map .MicrosoftMap .Infobox .infobox-info { padding: 3px 10px 10px 10px }\r\n        x-map .MicrosoftMap .Infobox .infobox-actions { height: auto }\r\n    `],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class InfoBoxComponent implements OnDestroy, OnChanges, AfterViewInit {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _infoBoxAddedToManager = false;\r\n    private _id: string = (infoBoxId++).toString();\r\n\r\n    /**\r\n     * HTML conent of the infobox\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    @ViewChild('infoBoxContent') private _content: ElementRef;\r\n\r\n    /**\r\n     * Zero or more actions to show on the info window\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    @ContentChildren(InfoBoxActionDirective) public InfoWindowActions: QueryList<InfoBoxActionDirective>;\r\n\r\n\r\n    /**\r\n     * The latitude position of the info window (only usefull if you use it ouside of a {@link MapMarker}).\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    @Input() public Latitude: number;\r\n\r\n    /**\r\n     * The longitude position of the info window (only usefull if you use it ouside of a {@link MapMarker}).\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    @Input() public Longitude: number;\r\n\r\n    /**\r\n     * The title to display in the info window\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    @Input() public Title: string;\r\n\r\n    /**\r\n     * The description to display in the info window.\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    @Input() public Description: string;\r\n\r\n    /**\r\n     * Disable auto-pan on open. By default, the info window will pan the map so that it is fully\r\n     * visible when it opens.\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    @Input() public DisableAutoPan: boolean;\r\n\r\n    /**\r\n     *  Maximum width of the infowindow, regardless of content's width. This value is only considered\r\n     *  if it is set before a call to open. To change the maximum width when changing content, call\r\n     *  close, update maxWidth, and then open.\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    @Input() public MaxWidth: number;\r\n\r\n    /**\r\n     * Determine whether only one infobox can be open at a time. Note that ANY info box settings.\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    @Input() public Modal = true;\r\n\r\n    /**\r\n     * Holds the marker that is the host of the info window (if available)\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    @Input() public HostMarker: MapMarkerDirective;\r\n\r\n    /**\r\n     * Determines visibility of infobox\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    @Input() public Visible = false;\r\n\r\n    /**\r\n     * Horizontal offset of the infobox from the host marker lat/long or the sepecified coordinates.\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    @Input() public xOffset: number;\r\n\r\n    /**\r\n     * Vertical offset for the infobox from the host marker lat/long or the specified coordinates.\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    @Input() public yOffset: number;\r\n\r\n    /**\r\n     * Determines if other info boxes should be closed before opening this one\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    @Input() public CloseInfoBoxesOnOpen = true;\r\n\r\n    ///\r\n    /// Delegate defintions\r\n    ///\r\n\r\n    /**\r\n     * Emits an event when the info window is closed.\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    @Output() public InfoBoxClose: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n    ///\r\n    /// Property declarations.\r\n    ///\r\n\r\n    /**\r\n     * Gets the HTML content of the info box.\r\n     *\r\n     * @readonly\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    public get HtmlContent(): string {\r\n        if (this._content.nativeElement && this._content.nativeElement.innerText && this._content.nativeElement.innerText.trim() !== '') {\r\n            return this._content.nativeElement.outerHTML;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Gets the Id of the info box as a string.\r\n     *\r\n     * @readonly\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    public get Id(): string { return this._id; }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of InfoBoxComponent.\r\n     * @param _infoBoxService - Concrete {@link InfoBoxService} implementation for underlying Map architecture.\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    constructor(private _infoBoxService: InfoBoxService) { }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Closes the Infobox.\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    public Close(): Promise<void> {\r\n        return this._infoBoxService.Close(this).then(() => {\r\n            this.InfoBoxClose.emit(this._id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called on after component view as been initialized. Part of the ng Component life cycle.\r\n     *\r\n     * @memberof Map\r\n     */\r\n    public ngAfterViewInit() {\r\n        this._infoBoxService.AddInfoWindow(this);\r\n        this._infoBoxAddedToManager = true;\r\n        this.HandleEvents();\r\n    }\r\n\r\n    /**\r\n     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.\r\n     *\r\n     * @param changes - Changes that have occured.\r\n     *\r\n     * @memberof Map\r\n     */\r\n    public ngOnChanges(changes: { [key: string]: SimpleChange }) {\r\n        if (!this._infoBoxAddedToManager) { return; }\r\n        if ((changes['latitude'] || changes['longitude']) && typeof this.Latitude === 'number' &&\r\n            typeof this.Longitude === 'number') {\r\n            this._infoBoxService.SetPosition(this, {\r\n                latitude: changes['latitude'].currentValue,\r\n                longitude: changes['longitude'].currentValue\r\n            });\r\n        }\r\n        this.SetInfoWindowOptions(changes);\r\n    }\r\n\r\n    /**\r\n     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.\r\n     *\r\n     * @memberof Map\r\n     */\r\n    public ngOnDestroy() { this._infoBoxService.DeleteInfoWindow(this); }\r\n\r\n    /**\r\n     * Opens a closed info window.\r\n     *\r\n     * @param [loc]  - {@link ILatLong } representing position on which to open the window.\r\n     * @returns - Promise that is fullfilled when the infobox has been opened.\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    public Open(loc?: ILatLong): Promise<void> {\r\n        return this._infoBoxService.Open(this, loc);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the info box.\r\n     *\r\n     * @returns - string representation of the info box.\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    public ToString(): string { return 'InfoBoxComponent-' + this._id; }\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n\r\n    /**\r\n     * Delegate handling the map click events.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    private HandleEvents(): void {\r\n        this._infoBoxService.CreateEventObservable('infowindowclose', this).subscribe(e => {\r\n            this.InfoBoxClose.emit(this._id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the info window options\r\n     *\r\n     * @param changes\r\n     *\r\n     * @memberof InfoBoxComponent\r\n     */\r\n    private SetInfoWindowOptions(changes: { [key: string]: SimpleChange }) {\r\n        const options: IInfoWindowOptions = {};\r\n        if (changes['title']) { options.title = this.Title; }\r\n        if (changes['description']) { options.description = this.Description; }\r\n        if (changes['disableAutoPan']) { options.disableAutoPan = this.DisableAutoPan; }\r\n        if (changes['visible']) { options.visible = this.Visible; }\r\n        if (changes['xOffset'] || changes['yOffset']) {\r\n            if (options.pixelOffset == null) { options.pixelOffset = { x: 0, y: 0 }; }\r\n            options.pixelOffset.x = this.xOffset;\r\n            options.pixelOffset.y = this.yOffset;\r\n        }\r\n        this._infoBoxService.SetOptions(this, options);\r\n    }\r\n}\r\n","import {\r\n    Directive, SimpleChange, Input, Output, OnDestroy, OnChanges,\r\n    EventEmitter, ContentChild, AfterContentInit, ViewContainerRef\r\n} from '@angular/core';\r\nimport { Subscription, timer } from 'rxjs';\r\nimport { IPoint } from '../interfaces/ipoint';\r\nimport { ILatLong } from '../interfaces/ilatlong';\r\nimport { IMarkerEvent } from '../interfaces/imarker-event';\r\nimport { IMarkerIconInfo } from '../interfaces/imarker-icon-info';\r\nimport { MarkerService } from '../services/marker.service';\r\nimport { InfoBoxComponent } from './infobox';\r\n\r\n/**\r\n * internal counter to use as ids for marker.\r\n */\r\nlet markerId = 0;\r\n\r\n/**\r\n * MapMarkerDirective renders a map marker inside a {@link MapComponent}.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import {Component} from '@angular/core';\r\n * import {MapComponent, MapMarkerDirective} from '...';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *   .map-container {\r\n *     height: 300px;\r\n *   }\r\n * `],\r\n * template: `\r\n *   <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\r\n *      <x-map-marker [Latitude]=\"lat\" [Longitude]=\"lng\" [Label]=\"'M'\"></x-map-marker>\r\n *   </x-map>\r\n * `\r\n * })\r\n * ```\r\n *\r\n * @export\r\n */\r\n@Directive({\r\n    selector: 'x-map-marker'\r\n})\r\nexport class MapMarkerDirective implements OnDestroy, OnChanges, AfterContentInit {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _clickTimeout: Subscription = null;\r\n    private _events: Subscription[] = [];\r\n    private _id: string;\r\n    private _inClusterLayer = false;\r\n    private _inCustomLayer = false;\r\n\r\n    /**\r\n     * Any InfoBox that is a direct children of the marker\r\n     *\r\n     * @protected\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @ContentChild(InfoBoxComponent) protected _infoBox: InfoBoxComponent;\r\n\r\n    private _layerId: number;\r\n    private _markerAddedToManger = false;\r\n\r\n    /**\r\n     *  Icon anchor relative to marker root\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Input() public Anchor: IPoint;\r\n\r\n    /**\r\n     * This event is fired when the DOM dblclick event is fired on the marker.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Output() DblClick: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\r\n\r\n    /**\r\n     * This event is repeatedly fired while the user drags the marker.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Output() Drag: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\r\n\r\n    /**\r\n     * This event is fired when the user stops dragging the marker.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Output() DragEnd: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\r\n\r\n    /**\r\n     * If true, the marker can be dragged. Default value is false.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Input() public Draggable = false;\r\n\r\n    /**\r\n     * This event is fired when the user starts dragging the marker.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Output() DragStart: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\r\n\r\n    /**\r\n     * This event emitter gets emitted when a marker icon is being created.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Output() public DynamicMarkerCreated: EventEmitter<IMarkerIconInfo> = new EventEmitter<IMarkerIconInfo>();\r\n\r\n    /**\r\n     * Icon height\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Input() public Height: number;\r\n\r\n    /**\r\n     * Information for dynamic, custom created icons.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Input() public IconInfo: IMarkerIconInfo;\r\n\r\n    /**\r\n     * Icon (the URL of the image) for the foreground.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Input() public IconUrl: string;\r\n\r\n    /**\r\n     * True to indiciate whether this is the first marker in a set.\r\n     * Use this for bulk operations (particularily clustering) to ensure performance.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Input() public IsFirstInSet = false;\r\n\r\n    /**\r\n     * True to indiciate whether this is the last marker in a set.\r\n     * Use this for bulk operations (particularily clustering) to ensure performance.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Input() public IsLastInSet = true;\r\n\r\n    /**\r\n     * The label (a single uppercase character) for the marker.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Input() public Label: string;\r\n\r\n    /**\r\n     * The latitude position of the marker.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Input() public Latitude: number;\r\n\r\n    /**\r\n     * The longitude position of the marker.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Input() public Longitude: number;\r\n\r\n    /**\r\n     * This event emitter gets emitted when the user clicks on the marker.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Output() public MarkerClick: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\r\n\r\n    /**\r\n     * Arbitary metadata to assign to the Marker. This is useful for events\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Input() public Metadata: Map<string, any> = new Map<string, any>();\r\n\r\n    /**\r\n     * This event is fired when the DOM mousedown event is fired on the marker.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Output() MouseDown: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\r\n\r\n    /**\r\n     * This event is fired when the DOM mousemove event is fired on the marker.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Output() MouseMove: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\r\n\r\n    /**\r\n     * This event is fired on marker mouseout.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Output() MouseOut: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\r\n\r\n    /**\r\n     * This event is fired on marker mouseover.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Output() MouseOver: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\r\n\r\n    /**\r\n     * This event is fired whe the DOM mouseup event is fired on the marker\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Output() MouseUp: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\r\n\r\n    /**\r\n     * This even is fired when the marker is right-clicked on.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Output() RightClick: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\r\n\r\n    /**\r\n     *  The title of the marker.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Input() public Title: string;\r\n\r\n    /**\r\n     * Sets the visibility of the marker\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Input() public Visible: boolean;\r\n\r\n    /**\r\n     * Icon Width\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    @Input() public Width: number;\r\n\r\n    ///\r\n    /// Delegates\r\n    ///\r\n\r\n\r\n\r\n\r\n\r\n    ///\r\n    /// Property declarations\r\n    ///\r\n\r\n    /**\r\n     * Getswhether the marker has already been added to the marker service and is ready for use.\r\n     *\r\n     * @readonly\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    public get AddedToManager(): boolean { return this._markerAddedToManger; }\r\n\r\n    /**\r\n     * Gets the id of the marker as a string.\r\n     *\r\n     * @readonly\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    public get Id(): string { return this._id; }\r\n\r\n    /**\r\n     * Gets whether the marker is in a cluster layer. See {@link ClusterLayer}.\r\n     *\r\n     * @readonly\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    public get InClusterLayer(): boolean { return this._inClusterLayer; }\r\n\r\n    /**\r\n     * Gets whether the marker is in a custom layer. See {@link MapLayer}.\r\n     *\r\n     * @readonly\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    public get InCustomLayer(): boolean { return this._inCustomLayer; }\r\n\r\n    /**\r\n     * gets the id of the Layer the marker belongs to.\r\n     *\r\n     * @readonly\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    public get LayerId(): number { return this._layerId; }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of MapMarkerDirective.\r\n     * @param _markerService - Concreate implementation of a {@link MarkerService}.\r\n     * @param _containerRef - View container hosting the marker.\r\n     * Used to determine parent layer through markup.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    constructor(private _markerService: MarkerService, private _containerRef: ViewContainerRef) {\r\n        this._id = (markerId++).toString();\r\n    }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Translates a marker geo location to a pixel location relative to the map viewport.\r\n     *\r\n     * @param [loc] - {@link ILatLong} containing the geo coordinates. If null, the marker's coordinates are used.\r\n     * @returns - A promise that when fullfilled contains an {@link IPoint} representing the pixel coordinates.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    public LocationToPixel(loc?: ILatLong): Promise<IPoint> {\r\n        return this._markerService.LocationToPoint(loc ? loc : this);\r\n    }\r\n\r\n    /**\r\n     * Called after Component content initialization. Part of ng Component life cycle.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    public ngAfterContentInit() {\r\n        if (this._infoBox != null) { this._infoBox.HostMarker = this; }\r\n        if (this._containerRef.element.nativeElement.parentElement) {\r\n            const parentName: string = this._containerRef.element.nativeElement.parentElement.tagName;\r\n            if (parentName.toLowerCase() === 'x-cluster-layer') {\r\n                this._inClusterLayer = true;\r\n            } else if (parentName.toLowerCase() === 'x-map-layer') {\r\n                this._inCustomLayer = true;\r\n            }\r\n            this._layerId = Number(this._containerRef.element.nativeElement.parentElement.attributes['layerId']);\r\n        }\r\n        if (!this._markerAddedToManger) {\r\n            this._markerService.AddMarker(this);\r\n            this._markerAddedToManger = true;\r\n            this.AddEventListeners();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to changes in data-bound properties of the component and actuates property changes in the underling layer model.\r\n     *\r\n     * @param changes - collection of changes.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    public ngOnChanges(changes: { [key: string]: SimpleChange }) {\r\n        if (typeof this.Latitude !== 'number' || typeof this.Longitude !== 'number') {\r\n            return;\r\n        }\r\n        if (!this._markerAddedToManger) { return; }\r\n        if (changes['Latitude'] || changes['Longitude']) {\r\n            this._markerService.UpdateMarkerPosition(this);\r\n        }\r\n        if (changes['Title']) {\r\n            this._markerService.UpdateTitle(this);\r\n        }\r\n        if (changes['Label']) {\r\n            this._markerService.UpdateLabel(this);\r\n        }\r\n        if (changes['Draggable']) {\r\n            this._markerService.UpdateDraggable(this);\r\n        }\r\n        if (changes['IconUrl'] || changes['IconInfo']) {\r\n            this._markerService.UpdateIcon(this);\r\n        }\r\n        if (changes['Anchor']) {\r\n            this._markerService.UpdateAnchor(this);\r\n        }\r\n        if (changes['Visible']) {\r\n            this._markerService.UpdateVisible(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.\r\n     *\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    public ngOnDestroy() {\r\n        this._markerService.DeleteMarker(this);\r\n        this._events.forEach((s) => s.unsubscribe());\r\n    }\r\n\r\n    /**\r\n     * Obtains a string representation of the Marker Id.\r\n     * @returns - string representation of the marker id.\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    public toString(): string { return 'MapMarker-' + this._id.toString(); }\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n\r\n    /**\r\n     * Adds various event listeners for the marker.\r\n     *\r\n     * @memberof MapMarkerDirective\r\n     */\r\n    private AddEventListeners(): void {\r\n        const _getEventArg: (e: MouseEvent) => IMarkerEvent = e => {\r\n            return {\r\n                Marker: this,\r\n                Click: e,\r\n                Location: this._markerService.GetCoordinatesFromClick(e),\r\n                Pixels: this._markerService.GetPixelsFromClick(e)\r\n            };\r\n        };\r\n\r\n        this._events.push(this._markerService.CreateEventObservable('click', this).subscribe((e: MouseEvent) => {\r\n            ///\r\n            /// this is necessary since map will treat a doubleclick first as two clicks...'\r\n            ///\r\n            this._clickTimeout = timer(300).subscribe(n => {\r\n                if (this._infoBox != null) {\r\n                    this._infoBox.Open(this._markerService.GetCoordinatesFromClick(e));\r\n                }\r\n                this.MarkerClick.emit(_getEventArg(e));\r\n            });\r\n        }));\r\n\r\n        this._events.push(this._markerService.CreateEventObservable('dblclick', this).subscribe((e: MouseEvent) => {\r\n            if (this._clickTimeout) {\r\n                this._clickTimeout.unsubscribe();\r\n                this._clickTimeout = null;\r\n            }\r\n            this.DblClick.emit(_getEventArg(e));\r\n        }));\r\n\r\n        const handlers = [\r\n            { name: 'drag', handler: (ev: MouseEvent) => this.Drag.emit(_getEventArg(ev)) },\r\n            { name: 'dragend', handler: (ev: MouseEvent) => this.DragEnd.emit(_getEventArg(ev)) },\r\n            { name: 'dragstart', handler: (ev: MouseEvent) => this.DragStart.emit(_getEventArg(ev)) },\r\n            { name: 'mousedown', handler: (ev: MouseEvent) => this.MouseDown.emit(_getEventArg(ev)) },\r\n            { name: 'mousemove', handler: (ev: MouseEvent) => this.MouseMove.emit(_getEventArg(ev)) },\r\n            { name: 'mouseout', handler: (ev: MouseEvent) => this.MouseOut.emit(_getEventArg(ev)) },\r\n            { name: 'mouseover', handler: (ev: MouseEvent) => this.MouseOver.emit(_getEventArg(ev)) },\r\n            { name: 'mouseup', handler: (ev: MouseEvent) => this.MouseUp.emit(_getEventArg(ev)) },\r\n            { name: 'rightclick', handler: (ev: MouseEvent) => this.RightClick.emit(_getEventArg(ev)) },\r\n        ];\r\n        handlers.forEach((obj) => {\r\n            const os = this._markerService.CreateEventObservable(obj.name, this).subscribe(obj.handler);\r\n            this._events.push(os);\r\n        });\r\n    }\r\n\r\n}\r\n","import {\r\n    Component,\r\n    EventEmitter,\r\n    OnChanges,\r\n    OnInit,\r\n    OnDestroy,\r\n    SimpleChange,\r\n    ViewChild,\r\n    ContentChildren,\r\n    Input,\r\n    Output,\r\n    ElementRef,\r\n    HostBinding,\r\n    ViewEncapsulation,\r\n    ChangeDetectionStrategy,\r\n    NgZone\r\n} from '@angular/core';\r\nimport { MapServiceFactory } from '../services/mapservicefactory';\r\nimport { MapService } from '../services/map.service';\r\nimport { MarkerService } from '../services/marker.service';\r\nimport { InfoBoxService } from '../services/infobox.service';\r\nimport { LayerService } from '../services/layer.service';\r\nimport { PolygonService } from '../services/polygon.service';\r\nimport { PolylineService } from '../services/polyline.service';\r\nimport { ClusterService } from '../services/cluster.service';\r\nimport { ILatLong } from '../interfaces/ilatlong';\r\nimport { IBox } from '../interfaces/ibox';\r\nimport { IMapOptions } from '../interfaces/imap-options';\r\nimport { MapTypeId } from '../models/map-type-id';\r\nimport { MapMarkerDirective } from './map-marker';\r\n\r\n/**\r\n * Renders a map based on a given provider.\r\n * **Important note**: To be able see a map in the browser, you have to define a height for the CSS\r\n * class `map-container`.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import {Component} from '@angular/core';\r\n * import {MapComponent} from '...';\r\n *\r\n * @Component({\r\n *  selector: 'my-map',\r\n *  styles: [`\r\n *    .map-container { height: 300px; }\r\n * `],\r\n *  template: `\r\n *    <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\"></x-map>\r\n *  `\r\n * })\r\n * ```\r\n *\r\n * @export\r\n */\r\n@Component({\r\n    selector: 'x-map',\r\n    providers: [\r\n        { provide: MapService, deps: [MapServiceFactory], useFactory: MapServiceCreator },\r\n        { provide: MarkerService, deps: [MapServiceFactory, MapService, LayerService, ClusterService], useFactory: MarkerServiceFactory },\r\n        {\r\n            provide: InfoBoxService, deps: [MapServiceFactory, MapService,\r\n                MarkerService], useFactory: InfoBoxServiceFactory\r\n        },\r\n        { provide: LayerService, deps: [MapServiceFactory, MapService], useFactory: LayerServiceFactory },\r\n        { provide: ClusterService, deps: [MapServiceFactory, MapService], useFactory: ClusterServiceFactory },\r\n        { provide: PolygonService, deps: [MapServiceFactory, MapService, LayerService], useFactory: PolygonServiceFactory },\r\n        { provide: PolylineService, deps: [MapServiceFactory, MapService, LayerService], useFactory: PolylineServiceFactory }\r\n    ],\r\n    template: `\r\n        <div #container class='map-container-inner'></div>\r\n        <div class='map-content'>\r\n            <ng-content></ng-content>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .map-container-inner { width: inherit; height: inherit; }\r\n        .map-container-inner div { background-repeat: no-repeat; }\r\n        .map-content { display:none; }\r\n    `],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MapComponent implements OnChanges, OnInit, OnDestroy {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _longitude = 0;\r\n    private _latitude = 0;\r\n    private _zoom = 0;\r\n    private _clickTimeout: number | NodeJS.Timer;\r\n    private _options: IMapOptions = {};\r\n    private _box: IBox = null;\r\n    private _mapPromise: Promise<void>;\r\n    @HostBinding('class.map-container') public _containerClass: boolean = true;\r\n    @ViewChild('container') private _container: ElementRef;\r\n    @ContentChildren(MapMarkerDirective) private _markers: Array<MapMarkerDirective>;\r\n\r\n    ///\r\n    /// Property declarations\r\n    ///\r\n\r\n    /**\r\n     * Get or sets the maximum and minimum bounding box for map.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    @Input()\r\n    public get Box(): IBox { return this._box; }\r\n    public set Box(val: IBox) { this._box = val; }\r\n\r\n    /**\r\n     * Gets or sets the latitude that sets the center of the map.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    @Input()\r\n    public get Latitude(): number | string { return this._longitude; }\r\n    public set Latitude(value: number | string) {\r\n        this._latitude = this.ConvertToDecimal(value);\r\n        this.UpdateCenter();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the longitude that sets the center of the map.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    @Input()\r\n    public get Longitude(): number | string { return this._longitude; }\r\n    public set Longitude(value: number | string) {\r\n        this._longitude = this.ConvertToDecimal(value);\r\n        this.UpdateCenter();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets general map Options\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    @Input()\r\n    public get Options(): IMapOptions { return this._options; }\r\n    public set Options(val: IMapOptions) { this._options = val; }\r\n\r\n    /**\r\n     * Gets or sets the zoom level of the map. The default value is `8`.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    @Input()\r\n    public get Zoom(): number | string { return this._zoom; }\r\n    public set Zoom(value: number | string) {\r\n        this._zoom = this.ConvertToDecimal(value, 8);\r\n        if (typeof this._zoom === 'number') {\r\n            this._mapService.SetZoom(this._zoom);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This event emitter is fired when the map bounding box changes.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    @Output()\r\n    BoundsChange: EventEmitter<IBox> = new EventEmitter<IBox>();\r\n\r\n    /**\r\n     * This event emitter is fired when the map center changes.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    @Output()\r\n    CenterChange: EventEmitter<ILatLong> = new EventEmitter<ILatLong>();\r\n\r\n    /**\r\n     * This event emitter gets emitted when the user clicks on the map (but not when they click on a\r\n     * marker or infoWindow).\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    @Output()\r\n    MapClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n    /**\r\n     * This event emitter gets emitted when the user double-clicks on the map (but not when they click\r\n     * on a marker or infoWindow).\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    @Output()\r\n    MapDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n    /**\r\n     * This event emitter gets emitted when the user right-clicks on the map (but not when they click\r\n     * on a marker or infoWindow).\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    @Output()\r\n    MapRightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n    /**\r\n     * This event emitter gets emitted when the user double-clicks on the map (but not when they click\r\n     * on a marker or infoWindow).\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    @Output()\r\n    MapMouseOver: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n    /**\r\n     * This event emitter gets emitted when the user double-clicks on the map (but not when they click\r\n     * on a marker or infoWindow).\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    @Output()\r\n    MapMouseOut: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n    /**\r\n     * This event emitter gets emitted when the user double-clicks on the map (but not when they click\r\n     * on a marker or infoWindow).\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    @Output()\r\n    MapMouseMove: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n    /**\r\n     * The event emitter is fired when the map service is available and the maps has been\r\n     * Initialized (but not necessarily created). It contains a Promise that when fullfilled returns\r\n     * the main map object of the underlying platform.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    @Output()\r\n    MapPromise: EventEmitter<Promise<any>> = new EventEmitter<Promise<any>>();\r\n\r\n    /**\r\n     * This event emiiter is fired when the map zoom changes\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    @Output()\r\n    ZoomChange: EventEmitter<Number> = new EventEmitter<Number>();\r\n\r\n    /**\r\n     * This event emitter is fired when the map service is available and the maps has been\r\n     * Initialized\r\n     * @memberOf MapComponent\r\n     */\r\n    @Output()\r\n    MapService: EventEmitter<MapService> = new EventEmitter<MapService>();\r\n\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of MapComponent.\r\n     *\r\n     * @param _mapService - Concreted implementation of a map service for the underlying maps implementations.\r\n     *                                   Generally provided via injections.\r\n     * @memberof MapComponent\r\n     */\r\n    constructor(private _mapService: MapService, private _zone: NgZone) { }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Called on Component initialization. Part of ng Component life cycle.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    public ngOnInit(): void {\r\n        this.InitMapInstance(this._container.nativeElement);\r\n        this.MapPromise.emit(this._mapService.MapPromise);\r\n        this.MapService.emit(this._mapService);\r\n    }\r\n\r\n    /**\r\n     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.\r\n     *\r\n     * @param changes - Changes that have occured.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }): void {\r\n        if (this._mapPromise) {\r\n            if (changes['Box']) {\r\n                if (this._box != null) {\r\n                    this._mapService.SetViewOptions(<IMapOptions>{\r\n                        bounds: this._box\r\n                    });\r\n                }\r\n            }\r\n            if (changes['Options']) {\r\n                this._mapService.SetMapOptions(this._options);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    public ngOnDestroy(): void {\r\n        this._mapService.DisposeMap();\r\n    }\r\n\r\n    /**\r\n     * Triggers a resize event on the map instance.\r\n     *\r\n     * @returns - A promise that gets resolved after the event was triggered.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    public TriggerResize(): Promise<void> {\r\n        // Note: When we would trigger the resize event and show the map in the same turn (which is a\r\n        // common case for triggering a resize event), then the resize event would not\r\n        // work (to show the map), so we trigger the event in a timeout.\r\n        return new Promise<void>((resolve) => {\r\n            setTimeout(\r\n                () => { return this._mapService.TriggerMapEvent('resize').then(() => resolve()); });\r\n        });\r\n    }\r\n\r\n    ///\r\n    /// Private methods.\r\n    ///\r\n\r\n    /**\r\n     * Converts a number-ish value to a number.\r\n     *\r\n     * @param value - The value to convert.\r\n     * @param [defaultValue=null] - Default value to use if the conversion cannot be performed.\r\n     * @returns - Converted number of the default.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    private ConvertToDecimal(value: string | number, defaultValue: number = null): number {\r\n        if (typeof value === 'string') {\r\n            return parseFloat(value);\r\n        } else if (typeof value === 'number') {\r\n            return <number>value;\r\n        }\r\n        return defaultValue;\r\n    }\r\n\r\n    /**\r\n     * Delegate handling the map click events.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    private HandleMapClickEvents(): void {\r\n        this._mapService.SubscribeToMapEvent<any>('click').subscribe(e => {\r\n            //\r\n            // this is necessary since bing will treat a doubleclick first as two clicks...'\r\n            ///\r\n            this._clickTimeout = setTimeout(() => {\r\n                this.MapClick.emit(<MouseEvent>e);\r\n            }, 300);\r\n        });\r\n        this._mapService.SubscribeToMapEvent<any>('dblclick').subscribe(e => {\r\n            if (this._clickTimeout) {\r\n                clearTimeout(<NodeJS.Timer>this._clickTimeout);\r\n            }\r\n            this.MapDblClick.emit(<MouseEvent>e);\r\n        });\r\n        this._mapService.SubscribeToMapEvent<any>('rightclick').subscribe(e => {\r\n            this.MapRightClick.emit(<MouseEvent>e);\r\n        });\r\n        this._mapService.SubscribeToMapEvent<any>('mouseover').subscribe(e => {\r\n            this.MapMouseOver.emit(<MouseEvent>e);\r\n        });\r\n        this._mapService.SubscribeToMapEvent<any>('mouseout').subscribe(e => {\r\n            this.MapMouseOut.emit(<MouseEvent>e);\r\n        });\r\n        this._mapService.SubscribeToMapEvent<any>('mousemove').subscribe(e => {\r\n            this.MapMouseMove.emit(<MouseEvent>e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delegate handling map center change events.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    private HandleMapBoundsChange(): void {\r\n        this._mapService.SubscribeToMapEvent<void>('boundschanged').subscribe(() => {\r\n            this._mapService.GetBounds().then((bounds: IBox) => {\r\n                this.BoundsChange.emit(bounds);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delegate handling map center change events.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    private HandleMapCenterChange(): void {\r\n        this._mapService.SubscribeToMapEvent<void>('centerchanged').subscribe(() => {\r\n            this._mapService.GetCenter().then((center: ILatLong) => {\r\n                if (this._latitude !== center.latitude || this._longitude !== center.longitude) {\r\n                    this._latitude = center.latitude;\r\n                    this._longitude = center.longitude;\r\n                    this.CenterChange.emit(<ILatLong>{ latitude: this._latitude, longitude: this._longitude });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delegate handling map zoom change events.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    private HandleMapZoomChange(): void {\r\n        this._mapService.SubscribeToMapEvent<void>('zoomchanged').subscribe(() => {\r\n            this._mapService.GetZoom().then((z: number) => {\r\n                if (this._zoom !== z) {\r\n                    this._zoom = z;\r\n                    this.ZoomChange.emit(z);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes the map.\r\n     *\r\n     * @param el - Html elements which will host the map canvas.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    private InitMapInstance(el: HTMLElement) {\r\n        this._zone.runOutsideAngular(() => {\r\n            if (this._options.center == null) { this._options.center = { latitude: this._latitude, longitude: this._longitude }; }\r\n            if (this._options.zoom == null) { this._options.zoom = this._zoom; }\r\n            if (this._options.mapTypeId == null) { this._options.mapTypeId = MapTypeId.hybrid; }\r\n            if (this._box != null) { this._options.bounds = this._box; }\r\n            this._mapPromise = this._mapService.CreateMap(el, this._options);\r\n            this.HandleMapCenterChange();\r\n            this.HandleMapBoundsChange();\r\n            this.HandleMapZoomChange();\r\n            this.HandleMapClickEvents();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the map center based on the geo properties of the component.\r\n     *\r\n     * @memberof MapComponent\r\n     */\r\n    private UpdateCenter(): void {\r\n        if (typeof this._latitude !== 'number' || typeof this._longitude !== 'number') {\r\n            return;\r\n        }\r\n        this._mapService.SetCenter({\r\n            latitude: this._latitude,\r\n            longitude: this._longitude,\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Factory function to generate a cluster service instance. This is necessary because of constraints with AOT that do no allow\r\n * us to use lamda functions inline.\r\n *\r\n * @export\r\n * @param f - The {@link MapServiceFactory} implementation.\r\n * @param m - A {@link MapService} instance.\r\n * @returns - A concrete instance of a Cluster Service based on the underlying map architecture\r\n */\r\nexport function ClusterServiceFactory(f: MapServiceFactory, m: MapService): ClusterService { return f.CreateClusterService(m); }\r\n\r\n/**\r\n * Factory function to generate a infobox service instance. This is necessary because of constraints with AOT that do no allow\r\n * us to use lamda functions inline.\r\n *\r\n * @export\r\n * @param f - The {@link MapServiceFactory} implementation.\r\n * @param m - A {@link MapService} instance.\r\n * @param m - A {@link MarkerService} instance.\r\n * @returns - A concrete instance of a InfoBox Service based on the underlying map architecture.\r\n */\r\nexport function InfoBoxServiceFactory(f: MapServiceFactory, m: MapService,\r\n    ma: MarkerService): InfoBoxService { return f.CreateInfoBoxService(m, ma); }\r\n\r\n/**\r\n * Factory function to generate a layer service instance. This is necessary because of constraints with AOT that do no allow\r\n * us to use lamda functions inline.\r\n *\r\n * @export\r\n * @param f - The {@link MapServiceFactory} implementation.\r\n * @param m - A {@link MapService} instance.\r\n * @returns - A concrete instance of a Layer Service based on the underlying map architecture.\r\n */\r\nexport function LayerServiceFactory(f: MapServiceFactory, m: MapService): LayerService { return f.CreateLayerService(m); }\r\n\r\n/**\r\n * Factory function to generate a map service instance. This is necessary because of constraints with AOT that do no allow\r\n * us to use lamda functions inline.\r\n *\r\n * @export\r\n * @param f - The {@link MapServiceFactory} implementation.\r\n * @returns - A concrete instance of a MapService based on the underlying map architecture.\r\n */\r\nexport function MapServiceCreator(f: MapServiceFactory): MapService { return f.Create(); }\r\n\r\n/**\r\n * Factory function to generate a marker service instance. This is necessary because of constraints with AOT that do no allow\r\n * us to use lamda functions inline.\r\n *\r\n * @export\r\n * @param f - The {@link MapServiceFactory} implementation.\r\n * @param m - A {@link MapService} instance.\r\n * @param l - A {@link LayerService} instance.\r\n * @param c - A {@link ClusterService} instance.\r\n * @returns - A concrete instance of a Marker Service based on the underlying map architecture.\r\n */\r\nexport function MarkerServiceFactory(f: MapServiceFactory, m: MapService, l: LayerService, c: ClusterService): MarkerService {\r\n    return f.CreateMarkerService(m, l, c);\r\n}\r\n\r\n/**\r\n * Factory function to generate a polygon service instance. This is necessary because of constraints with AOT that do no allow\r\n * us to use lamda functions inline.\r\n *\r\n * @export\r\n * @param f - The {@link MapServiceFactory} implementation.\r\n * @param m - A {@link MapService} instance.\r\n * @param l - A {@link LayerService} instance.\r\n * @returns - A concrete instance of a Polygon Service based on the underlying map architecture.\r\n */\r\nexport function PolygonServiceFactory(f: MapServiceFactory, m: MapService, l: LayerService): PolygonService {\r\n    return f.CreatePolygonService(m, l);\r\n}\r\n\r\n/**\r\n * Factory function to generate a polyline service instance. This is necessary because of constraints with AOT that do no allow\r\n * us to use lamda functions inline.\r\n *\r\n * @export\r\n * @param f - The {@link MapServiceFactory} implementation.\r\n * @param m - A {@link MapService} instance.\r\n * @param l - A {@link LayerService} instance.\r\n * @returns - A concrete instance of a Polyline Service based on the underlying map architecture.\r\n */\r\nexport function PolylineServiceFactory(f: MapServiceFactory, m: MapService, l: LayerService): PolylineService {\r\n    return f.CreatePolylineService(m, l);\r\n}\r\n","import { Directive, EventEmitter, OnInit, OnDestroy, OnChanges, AfterContentInit, SimpleChange,\r\n    ContentChildren, Input, ViewContainerRef } from '@angular/core';\r\nimport { LayerService } from '../services/layer.service';\r\nimport { MapMarkerDirective } from './map-marker';\r\n\r\n/**\r\n * internal counter to use as ids for multiple layers.\r\n */\r\nlet layerId = 0;\r\n\r\n/**\r\n * MapLayerDirective creates a layer on a {@link MapComponent}.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import {Component} from '@angular/core';\r\n * import {MapComponent, MapMarkerDirective} from '...';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *   .map-container {\r\n *     height: 300px;\r\n *   }\r\n * `],\r\n * template: `\r\n *   <x-map [Latitude]='lat' [Longitude]='lng' [Zoom]='zoom'>\r\n *     <x-map-layer [Visible]='visible'>\r\n *         <x-map-marker [Latitude]='lat' [Longitude]='lng' [Label]=''M''></x-map-marker>\r\n *     </x-map-layer>\r\n *   </x-map>\r\n * `\r\n * })\r\n * ```\r\n *\r\n * @export\r\n */\r\n@Directive({\r\n    selector: 'x-map-layer'\r\n})\r\nexport class MapLayerDirective implements OnInit, OnDestroy, OnChanges {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    protected _visible = true;\r\n    protected _addedToManager = false;\r\n    protected _id: number;\r\n\r\n    @ContentChildren(MapMarkerDirective) protected _markers: Array<MapMarkerDirective>;\r\n\r\n    ///\r\n    /// Property declarations\r\n    ///\r\n\r\n    /**\r\n     * Gets or sets the layer visibility.\r\n     *\r\n     * @memberof MapLayerDirective\r\n     */\r\n    @Input()\r\n        public get Visible(): boolean { return this._visible; }\r\n        public set Visible(val: boolean) { this._visible = val; }\r\n\r\n    /**\r\n     * Gets the layer id.\r\n     *\r\n     * @readonly\r\n     * @memberof MapLayerDirective\r\n     */\r\n    public get Id(): number { return this._id; }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of MapLayerDirective.\r\n     * @param _layerService - Concreted implementation of a layer service for the underlying maps implementations.\r\n     * Generally provided via injections.\r\n     * @param _containerRef - Reference to the container hosting the map canvas. Generally provided via injection.\r\n     *\r\n     * @memberof MapLayerDirective\r\n     */\r\n    constructor(protected _layerService: LayerService, protected _containerRef: ViewContainerRef) {\r\n        this._id = layerId++;\r\n    }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Called on Component initialization. Part of ng Component life cycle.\r\n     *\r\n     * @memberof MapLayerDirective\r\n     */\r\n    public ngOnInit(): void {\r\n        this._containerRef.element.nativeElement.attributes['layerId'] = this._id.toString();\r\n        this._layerService.AddLayer(this);\r\n        this._addedToManager = true;\r\n    }\r\n\r\n    /**\r\n     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.\r\n     *\r\n     * @param changes - Changes that have occured.\r\n     *\r\n     * @memberof MapLayerDirective\r\n     */\r\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }): void {\r\n        if (!this._addedToManager) { return; }\r\n        if (changes['Visible']) {\r\n            this._layerService.GetNativeLayer(this).then(l => {\r\n                l.SetVisible(!l.GetVisible());\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.\r\n     *\r\n     *\r\n     * @memberof MapLayerDirective\r\n     */\r\n    public ngOnDestroy(): void {\r\n        this._layerService.DeleteLayer(this);\r\n    }\r\n}\r\n","import { IClusterIconInfo } from '../interfaces/icluster-icon-info';\r\nimport { Directive, EventEmitter, OnInit, OnDestroy, OnChanges, SimpleChange,\r\n    ContentChildren, Input, ViewContainerRef } from '@angular/core';\r\nimport { Marker } from '../models/marker';\r\nimport { Layer } from '../models/layer';\r\nimport { ClusterPlacementMode } from '../models/cluster-placement-mode';\r\nimport { ClusterClickAction } from '../models/cluster-click-action';\r\nimport { IPoint } from '../interfaces/ipoint';\r\nimport { IClusterOptions } from '../interfaces/icluster-options';\r\nimport { IMarkerIconInfo} from '../interfaces/imarker-icon-info';\r\nimport { ClusterService } from '../services/cluster.service';\r\nimport { ISpiderClusterOptions } from '../interfaces/ispider-cluster-options';\r\nimport { MapMarkerDirective } from './map-marker';\r\nimport { MapLayerDirective } from './map-layer';\r\n\r\n/**\r\n *\r\n * Creates a cluster layer on a {@link MapComponent}.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import {Component} from '@angular/core';\r\n * import {MapComponent, MapMarkerDirective} from '...';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *   .map-container {\r\n *     height: 300px;\r\n *   }\r\n * `],\r\n * template: `\r\n *   <x-map [Latitude]='lat' [Longitude]='lng' [Zoom]='zoom'>\r\n *     <x-cluster-layer [Visible]='visible'>\r\n *         <x-map-marker [Latitude]='lat' [Longitude]='lng' [Label]=''M''></x-map-marker>\r\n *     </x-cluster-layer>\r\n *   </x-map>\r\n * `\r\n * })\r\n * ```\r\n *\r\n * @export\r\n */\r\n@Directive({\r\n    selector: 'x-cluster-layer'\r\n})\r\nexport class ClusterLayerDirective extends MapLayerDirective implements OnInit, OnDestroy, OnChanges {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _clusteringEnabled = true;\r\n    private _clusterPlacementMode: ClusterPlacementMode = ClusterPlacementMode.MeanValue;\r\n    private _clusterClickAction: ClusterClickAction = ClusterClickAction.ZoomIntoCluster;\r\n    private _spiderClusterOptions: ISpiderClusterOptions;\r\n    private _zIndex: number;\r\n    private _gridSize: number;\r\n    private _layerOffset: IPoint;\r\n    private _iconInfo: IMarkerIconInfo;\r\n    private _minimumClusterSize: number;\r\n    private _styles: Array<IClusterIconInfo>;\r\n    private _useDynamicSizeMarker = false;\r\n    private _dynamicMarkerBaseSize = 18;\r\n    private _dynamicMarkerRanges: Map<number, string> = new Map<number, string>([\r\n        [10, 'rgba(20, 180, 20, 0.5)'],\r\n        [100, 'rgba(255, 210, 40, 0.5)'],\r\n        [Number.MAX_SAFE_INTEGER , 'rgba(255, 40, 40, 0.5)']\r\n    ]);\r\n    private _zoomOnClick = true;\r\n    private _iconCreationCallback: (m: Array<Marker>, i: IMarkerIconInfo) => string;\r\n\r\n    ///\r\n    /// Property defintions\r\n    ///\r\n\r\n    /**\r\n     * Gets or sets the the Cluster Click Action {@link ClusterClickAction}.\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get ClusterClickAction(): ClusterClickAction  { return this._clusterClickAction; }\r\n        public set ClusterClickAction(val: ClusterClickAction) { this._clusterClickAction = val; }\r\n\r\n    /**\r\n     * Gets or sets whether the clustering layer enables clustering. When set to false, the layer\r\n     * behaves like a generic layer. This is handy if you want to prevent clustering at certain zoom levels.\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get ClusteringEnabled(): boolean  { return this._clusteringEnabled; }\r\n        public set ClusteringEnabled(val: boolean) { this._clusteringEnabled = val; }\r\n\r\n    /**\r\n     * Gets or sets the cluster placement mode. {@link ClusterPlacementMode}\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get ClusterPlacementMode(): ClusterPlacementMode  { return this._clusterPlacementMode; }\r\n        public set ClusterPlacementMode(val: ClusterPlacementMode) { this._clusterPlacementMode = val; }\r\n\r\n    /**\r\n     * Gets or sets the callback invoked to create a custom cluster marker. Note that when {@link UseDynamicSizeMarkers} is enabled,\r\n     * you cannot set a custom marker callback.\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get CustomMarkerCallback(): (m: Array<Marker>, i: IMarkerIconInfo) => string  { return this._iconCreationCallback; }\r\n        public set CustomMarkerCallback(val: (m: Array<Marker>, i: IMarkerIconInfo) => string) {\r\n            if (this._useDynamicSizeMarker) {\r\n                throw(\r\n                    new Error(`You cannot set a custom marker callback when UseDynamicSizeMarkers is set to true.\r\n                    Set UseDynamicSizeMakers to false.`)\r\n                );\r\n            }\r\n            this._iconCreationCallback = val;\r\n        }\r\n\r\n    /**\r\n     * Gets or sets the base size of dynamic markers in pixels. The actualy size of the dynamic marker is based on this.\r\n     * See {@link UseDynamicSizeMarkers}.\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get DynamicMarkerBaseSize(): number  { return this._dynamicMarkerBaseSize; }\r\n        public set DynamicMarkerBaseSize(val: number) { this._dynamicMarkerBaseSize = val; }\r\n\r\n    /**\r\n     * Gets or sets the ranges to use to calculate breakpoints and colors for dynamic markers.\r\n     * The map contains key/value pairs, with the keys being\r\n     * the breakpoint sizes and the values the colors to be used for the dynamic marker in that range. See {@link UseDynamicSizeMarkers}.\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get DynamicMarkerRanges(): Map<number, string>  { return this._dynamicMarkerRanges; }\r\n        public set DynamicMarkerRanges(val: Map<number, string>) { this._dynamicMarkerRanges = val; }\r\n\r\n    /**\r\n     * Gets or sets the grid size to be used for clustering.\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get GridSize(): number  { return this._gridSize; }\r\n        public set GridSize(val: number) { this._gridSize = val; }\r\n\r\n    /**\r\n     * Gets or sets the IconInfo to be used to create a custom cluster marker. Supports font-based, SVG, graphics and more.\r\n     * See {@link IMarkerIconInfo}.\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get IconInfo(): IMarkerIconInfo  { return this._iconInfo; }\r\n        public set IconInfo(val: IMarkerIconInfo) { this._iconInfo = val; }\r\n\r\n    /**\r\n     * Gets or sets An offset applied to the positioning of the layer.\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get LayerOffset(): IPoint  { return this._layerOffset; }\r\n        public set LayerOffset(val: IPoint) { this._layerOffset = val; }\r\n\r\n    /**\r\n     * Gets or sets the minimum pins required to form a cluster\r\n     *\r\n     * @readonly\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get MinimumClusterSize(): number  { return this._minimumClusterSize; }\r\n        public set MinimumClusterSize(val: number) { this._minimumClusterSize = val; }\r\n\r\n    /**\r\n     * Gets or sets the options for spider clustering behavior. See {@link ISpiderClusterOptions}\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get SpiderClusterOptions(): ISpiderClusterOptions { return this._spiderClusterOptions; }\r\n        public set SpiderClusterOptions(val: ISpiderClusterOptions) { this._spiderClusterOptions = val; }\r\n\r\n    /**\r\n     * Gets or sets the cluster styles\r\n     *\r\n     * @readonly\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get Styles(): Array<IClusterIconInfo> { return this._styles; }\r\n        public set Styles(val: Array<IClusterIconInfo>) { this._styles = val; }\r\n\r\n    /**\r\n     * Gets or sets whether to use dynamic markers. Dynamic markers change in size and color depending on the number of\r\n     * pins in the cluster. If set to true, this will take precendence over any custom marker creation.\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get UseDynamicSizeMarkers(): boolean { return this._useDynamicSizeMarker; }\r\n        public set UseDynamicSizeMarkers(val: boolean) {\r\n            this._useDynamicSizeMarker = val;\r\n            if (val) {\r\n                this._iconCreationCallback = (m: Array<Marker>, info: IMarkerIconInfo) => {\r\n                    return ClusterLayerDirective.CreateDynamicSizeMarker(\r\n                        m.length, info, this._dynamicMarkerBaseSize, this._dynamicMarkerRanges);\r\n                };\r\n            }\r\n        }\r\n\r\n    /**\r\n     * Gets or sets the z-index of the layer. If not used, layers get stacked in the order created.\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get ZIndex(): number { return this._zIndex; }\r\n        public set ZIndex(val: number) { this._zIndex = val; }\r\n\r\n    /**\r\n     * Gets or sets whether the cluster should zoom in on click\r\n     *\r\n     * @readonly\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get ZoomOnClick(): boolean { return this._zoomOnClick; }\r\n        public set ZoomOnClick(val: boolean) { this._zoomOnClick = val; }\r\n\r\n    /**\r\n     * Creates the dynamic size marker to be used for cluster markers if UseDynamicSizeMarkers is set to true.\r\n     *\r\n     * @param size - The number of markers in the cluster.\r\n     * @param info  - The icon info to be used. This will be hydrated with\r\n     * the actualy dimensions of the created markers and is used by the underlying model/services\r\n     * to correctly offset the marker for correct positioning.\r\n     * @param baseMarkerSize - The base size for dynmic markers.\r\n     * @param ranges - The ranges to use to calculate breakpoints and colors for dynamic markers.\r\n     * The map contains key/value pairs, with the keys being\r\n     * the breakpoint sizes and the values the colors to be used for the dynamic marker in that range.\r\n     * @returns - An string containing the SVG for the marker.\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    public static CreateDynamicSizeMarker(size: number, info: IMarkerIconInfo,\r\n                                             baseMarkerSize: number, ranges: Map<number, string>): string {\r\n        const mr: number = baseMarkerSize;\r\n        const outline: number = mr * 0.35;\r\n        const total: number = size;\r\n        const r: number = Math.log(total) / Math.log(10) * 5 + mr;\r\n        const d: number = r * 2;\r\n        let fillColor: string;\r\n        ranges.forEach((v, k) => {\r\n            if (total <= k && !fillColor) { fillColor = v; }\r\n        });\r\n        if (!fillColor) { fillColor = 'rgba(20, 180, 20, 0.5)'; }\r\n\r\n        // Create an SVG string of two circles, one on top of the other, with the specified radius and color.\r\n        const svg: Array<any> = [`<svg xmlns='http://www.w3.org/2000/svg' width='${d}' height='${d}'>`,\r\n            `<circle cx='${r}' cy='${r}' r='${r}' fill='${fillColor}'/>`,\r\n            `<circle cx='${r}' cy='${r}' r='${r - outline}' fill='${fillColor}'/>`,\r\n            `</svg>`];\r\n        info.size = { width: d, height: d };\r\n        info.markerOffsetRatio = { x: 0.5, y: 0.5 };\r\n        info.textOffset = { x: 0, y: r - 8 };\r\n        return svg.join('');\r\n    }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of ClusterLayerDirective.\r\n     *\r\n     * @param _layerService - Concreted implementation of a cluster layer service for the underlying maps\r\n     * implementations. Generally provided via injections.\r\n     * @param _containerRef - A reference to the view container of the layer. Generally provided via injection.\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    constructor(_layerService: ClusterService, _containerRef: ViewContainerRef) {\r\n        super(_layerService, _containerRef);\r\n    }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Reacts to changes in data-bound properties of the component and actuates property changes in the underling layer model.\r\n     *\r\n     * @param changes - collection of changes.\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }): void {\r\n        if (!this._addedToManager) { return; }\r\n        if (changes['ClusterClickAction']) {\r\n            throw (\r\n                new Error('You cannot change the ClusterClickAction after the layer has been added to the layerservice.')\r\n            );\r\n        }\r\n\r\n        const options: IClusterOptions = { id: this._id };\r\n        if (changes['ClusteringEnabled']) { options.clusteringEnabled = this._clusteringEnabled; }\r\n        if (changes['GridSize']) { options.gridSize = this._gridSize; }\r\n        if (changes['LayerOffset']) { options.layerOffset = this._layerOffset; }\r\n        if (changes['SpiderClusterOptions']) { options.spiderClusterOptions = this._spiderClusterOptions; }\r\n        if (changes['ZIndex']) { options.zIndex = this._zIndex; }\r\n        if (changes['Visible']) { options.visible = this._visible; }\r\n\r\n        this._layerService.GetNativeLayer(this).then((l: Layer) => {\r\n            l.SetOptions(options);\r\n        });\r\n    }\r\n\r\n}\r\n","import {\r\n    Directive, Input, Output, OnDestroy, OnChanges, ViewContainerRef,\r\n    EventEmitter, ContentChild, AfterContentInit, SimpleChanges\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { IPolygonOptions } from '../interfaces/ipolygon-options';\r\nimport { IPoint } from '../interfaces/ipoint';\r\nimport { IPolygonEvent } from '../interfaces/ipolygon-event';\r\nimport { ILatLong } from '../interfaces/ilatlong';\r\nimport { PolygonService } from '../services/polygon.service';\r\nimport { InfoBoxComponent } from './infobox';\r\n\r\nlet polygonId = 0;\r\n\r\n/**\r\n *\r\n * MapPolygonDirective renders a polygon inside a {@link MapComponent}.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import {Component} from '@angular/core';\r\n * import {MapComponent, MapPolygonDirective} from '...';\r\n *\r\n * @Component({\r\n *  selector: 'my-map,\r\n *  styles: [`\r\n *   .map-container { height: 300px; }\r\n * `],\r\n * template: `\r\n *   <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\r\n *      <x-map-polygon [Paths]=\"path\"></x-map-polygon>\r\n *   </x-map>\r\n * `\r\n * })\r\n * ```\r\n *\r\n *\r\n * @export\r\n */\r\n@Directive({\r\n    selector: 'x-map-polygon'\r\n})\r\nexport class MapPolygonDirective implements OnDestroy, OnChanges, AfterContentInit {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _inCustomLayer = false;\r\n    private _id: number;\r\n    private _layerId: number;\r\n    private _addedToService = false;\r\n    private _events: Subscription[] = [];\r\n\r\n    ///\r\n    /// Any InfoBox that is a direct children of the polygon\r\n    ///\r\n    @ContentChild(InfoBoxComponent) protected _infoBox: InfoBoxComponent;\r\n\r\n\r\n    /**\r\n     * Gets or sets whether this Polygon handles mouse events.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public Clickable = true;\r\n\r\n    /**\r\n     * If set to true, the user can drag this shape over the map.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public Draggable = false;\r\n\r\n    /**\r\n     * If set to true, the user can edit this shape by dragging the control\r\n     * points shown at the vertices and on each segment.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public Editable = false;\r\n\r\n    /**\r\n     * The fill color of the polygon.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public FillColor: string;\r\n\r\n    /**\r\n     * The fill opacity between 0.0 and 1.0\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public FillOpacity: number;\r\n\r\n    /**\r\n     * When true, edges of the polygon are interpreted as geodesic and will\r\n     * follow the curvature of the Earth. When false, edges of the polygon are\r\n     * rendered as straight lines in screen space. Note that the shape of a\r\n     * geodesic polygon may appear to change when dragged, as the dimensions\r\n     * are maintained relative to the surface of the earth. Defaults to false.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public Geodesic = false;\r\n\r\n    /**\r\n     * Set the maximum zoom at which the polygon lable is visible. Ignored if ShowLabel is false.\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public LabelMaxZoom: number;\r\n\r\n    /**\r\n     * Set the minimum zoom at which the polygon lable is visible. Ignored if ShowLabel is false.\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public LabelMinZoom: number;\r\n\r\n    /**\r\n     * Arbitary metadata to assign to the Polygon. This is useful for events\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public Metadata: Map<string, any> = new Map<string, any>();\r\n\r\n    /**\r\n     * The ordered sequence of coordinates that designates a closed loop.\r\n     * Unlike polylines, a polygon may consist of one or more paths.\r\n     * As a result, the paths property may specify one or more arrays of\r\n     * LatLng coordinates. Paths are closed automatically; do not repeat the\r\n     * first vertex of the path as the last vertex. Simple polygons may be\r\n     * defined using a single array of LatLngs. More complex polygons may\r\n     * specify an array of arrays (for inner loops ). Any simple arrays are converted into Arrays.\r\n     * Inserting or removing LatLngs from the Array will automatically update\r\n     * the polygon on the map.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public Paths: Array<ILatLong> | Array<Array<ILatLong>> = [];\r\n\r\n    /**\r\n     * Whether to show the title as the label on the polygon.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public ShowLabel: boolean;\r\n\r\n    /**\r\n     * Whether to show the title of the polygon as the tooltip on the polygon.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public ShowTooltip: boolean = true;\r\n\r\n    /**\r\n     * The stroke color.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public StrokeColor: string;\r\n\r\n    /**\r\n     * The stroke opacity between 0.0 and 1.0\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public StrokeOpacity: number;\r\n\r\n    /**\r\n     * The stroke width in pixels.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public StrokeWeight: number;\r\n\r\n    /**\r\n     * The title of the polygon.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public Title: string;\r\n\r\n    /**\r\n     * Whether this polygon is visible on the map. Defaults to true.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public Visible: boolean;\r\n\r\n    /**\r\n     * The zIndex compared to other polys.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Input() public zIndex: number;\r\n\r\n    ///\r\n    /// Delegate definitions\r\n    ///\r\n\r\n    /**\r\n     * This event is fired when the DOM click event is fired on the Polygon.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Output() Click: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n    /**\r\n     * This event is fired when the DOM dblclick event is fired on the Polygon.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Output() DblClick: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n    /**\r\n     * This event is repeatedly fired while the user drags the polygon.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Output() Drag: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n    /**\r\n     * This event is fired when the user stops dragging the polygon.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Output() DragEnd: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n    /**\r\n     * This event is fired when the user starts dragging the polygon.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Output() DragStart: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n    /**\r\n     * This event is fired when the DOM mousedown event is fired on the Polygon.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Output() MouseDown: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n    /**\r\n     * This event is fired when the DOM mousemove event is fired on the Polygon.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Output() MouseMove: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n    /**\r\n     * This event is fired on Polygon mouseout.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Output() MouseOut: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n    /**\r\n     * This event is fired on Polygon mouseover.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Output() MouseOver: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n    /**\r\n     * This event is fired whe the DOM mouseup event is fired on the Polygon\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Output() MouseUp: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n\r\n    /**\r\n     * This event is fired when the Polygon is right-clicked on.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Output() RightClick: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n    /**\r\n     * This event is fired when editing has completed.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    @Output() PathChanged: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n    ///\r\n    /// Property declarations\r\n    ///\r\n\r\n    /**\r\n     * Gets whether the polygon has been registered with the service.\r\n     * @readonly\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    public get AddedToService(): boolean { return this._addedToService; }\r\n\r\n    /**\r\n     * Get the id of the polygon.\r\n     *\r\n     * @readonly\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    public get Id(): number { return this._id; }\r\n\r\n    /**\r\n     * Gets the id of the polygon as a string.\r\n     *\r\n     * @readonly\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    public get IdAsString(): string { return this._id.toString(); }\r\n\r\n    /**\r\n     * Gets whether the polygon is in a custom layer. See {@link MapLayer}.\r\n     *\r\n     * @readonly\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    public get InCustomLayer(): boolean { return this._inCustomLayer; }\r\n\r\n    /**\r\n     * gets the id of the Layer the polygon belongs to.\r\n     *\r\n     * @readonly\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    public get LayerId(): number { return this._layerId; }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of MapPolygonDirective.\r\n     * @param _polygonManager\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    constructor(private _polygonService: PolygonService, private _containerRef: ViewContainerRef) {\r\n        this._id = polygonId++;\r\n    }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Called after the content intialization of the directive is complete. Part of the ng Component life cycle.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    ngAfterContentInit(): void {\r\n        if (this._containerRef.element.nativeElement.parentElement) {\r\n            const parentName: string = this._containerRef.element.nativeElement.parentElement.tagName;\r\n            if (parentName.toLowerCase() === 'x-map-layer') {\r\n                this._inCustomLayer = true;\r\n                this._layerId = Number(this._containerRef.element.nativeElement.parentElement.attributes['layerId']);\r\n            }\r\n        }\r\n        if (!this._addedToService) {\r\n            this._polygonService.AddPolygon(this);\r\n            this._addedToService = true;\r\n            this.AddEventListeners();\r\n        }\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.\r\n     *\r\n     * @param changes - Changes that have occured.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): any {\r\n        if (!this._addedToService) { return; }\r\n\r\n        const o: IPolygonOptions = this.GeneratePolygonChangeSet(changes);\r\n        if (o != null) { this._polygonService.SetOptions(this, o); }\r\n        if (changes['Paths'] && !changes['Paths'].isFirstChange()) {\r\n            this._polygonService.UpdatePolygon(this);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Called when the poygon is being destroyed. Part of the ng Component life cycle. Release resources.\r\n     *\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    ngOnDestroy() {\r\n        this._polygonService.DeletePolygon(this);\r\n        this._events.forEach((s) => s.unsubscribe());\r\n        ///\r\n        /// remove event subscriptions\r\n        ///\r\n    }\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n\r\n    /**\r\n     * Wires up the event receivers.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    private AddEventListeners() {\r\n        const _getEventArg: (e: MouseEvent) => IPolygonEvent = e => {\r\n            return {\r\n                Polygon: this,\r\n                Click: e\r\n            };\r\n        };\r\n        this._events.push(this._polygonService.CreateEventObservable('click', this).subscribe((ev: MouseEvent) => {\r\n            const t: MapPolygonDirective = this;\r\n            if (this._infoBox != null) {\r\n                this._infoBox.Open(this._polygonService.GetCoordinatesFromClick(ev));\r\n            }\r\n            this.Click.emit(_getEventArg(ev));\r\n        }));\r\n        const handlers = [\r\n            { name: 'dblclick', handler: (ev: MouseEvent) => this.DblClick.emit(_getEventArg(ev)) },\r\n            { name: 'drag', handler: (ev: MouseEvent) => this.Drag.emit(_getEventArg(ev)) },\r\n            { name: 'dragend', handler: (ev: MouseEvent) => this.DragEnd.emit(_getEventArg(ev)) },\r\n            { name: 'dragstart', handler: (ev: MouseEvent) => this.DragStart.emit(_getEventArg(ev)) },\r\n            { name: 'mousedown', handler: (ev: MouseEvent) => this.MouseDown.emit(_getEventArg(ev)) },\r\n            { name: 'mousemove', handler: (ev: MouseEvent) => this.MouseMove.emit(_getEventArg(ev)) },\r\n            { name: 'mouseout', handler: (ev: MouseEvent) => this.MouseOut.emit(_getEventArg(ev)) },\r\n            { name: 'mouseover', handler: (ev: MouseEvent) => this.MouseOver.emit(_getEventArg(ev)) },\r\n            { name: 'mouseup', handler: (ev: MouseEvent) => this.MouseUp.emit(_getEventArg(ev)) },\r\n            { name: 'rightclick', handler: (ev: MouseEvent) => this.RightClick.emit(_getEventArg(ev)) },\r\n            { name: 'pathchanged', handler: (ev: IPolygonEvent) => this.PathChanged.emit(ev) }\r\n        ];\r\n        handlers.forEach((obj) => {\r\n            const os = this._polygonService.CreateEventObservable(obj.name, this).subscribe(obj.handler);\r\n            this._events.push(os);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Generates IPolygon option changeset from directive settings.\r\n     *\r\n     * @param changes - {@link SimpleChanges} identifying the changes that occured.\r\n     * @returns - {@link IPolygonOptions} containing the polygon options.\r\n     *\r\n     * @memberof MapPolygonDirective\r\n     */\r\n    private GeneratePolygonChangeSet(changes: SimpleChanges): IPolygonOptions {\r\n        const options: IPolygonOptions = { id: this._id };\r\n        let hasOptions: boolean = false;\r\n        if (changes['Clickable']) { options.clickable = this.Clickable; hasOptions = true; }\r\n        if (changes['Draggable']) { options.draggable = this.Draggable; hasOptions = true; }\r\n        if (changes['Editable']) { options.editable = this.Editable; hasOptions = true; }\r\n        if (changes['FillColor'] || changes['FillOpacity']) {\r\n            options.fillColor = this.FillColor;\r\n            options.fillOpacity = this.FillOpacity;\r\n            hasOptions = true;\r\n        }\r\n        if (changes['Geodesic']) { options.geodesic = this.Geodesic; hasOptions = true; }\r\n        if (changes['LabelMaxZoom']) { options.labelMaxZoom = this.LabelMaxZoom; hasOptions = true; }\r\n        if (changes['LabelMinZoom']) { options.labelMinZoom = this.LabelMinZoom; hasOptions = true; }\r\n        if (changes['ShowTooltip']) { options.showTooltip = this.ShowTooltip; hasOptions = true; }\r\n        if (changes['ShowLabel']) { options.showLabel = this.ShowLabel; hasOptions = true; }\r\n        if (changes['StrokeColor'] || changes['StrokeOpacity']) {\r\n            options.strokeColor = this.StrokeColor;\r\n            options.strokeOpacity = this.StrokeOpacity;\r\n            hasOptions = true;\r\n        }\r\n        if (changes['StrokeWeight']) { options.strokeWeight = this.StrokeWeight; hasOptions = true; }\r\n        if (changes['Title']) { options.title = this.Title; hasOptions = true; }\r\n        if (changes['Visible']) { options.visible = this.Visible; hasOptions = true; }\r\n        if (changes['zIndex']) { options.zIndex = this.zIndex; hasOptions = true; }\r\n        return hasOptions ? options : null;\r\n    }\r\n\r\n}\r\n","import {\r\n    Directive, Input, Output, OnDestroy, OnChanges, ViewContainerRef,\r\n    EventEmitter, ContentChild, AfterContentInit, SimpleChanges\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { IPoint } from '../interfaces/ipoint';\r\nimport { ILatLong } from '../interfaces/ilatlong';\r\nimport { IPolylineOptions } from '../interfaces/ipolyline-options';\r\nimport { PolylineService } from '../services/polyline.service';\r\nimport { IPolylineEvent } from '../interfaces/ipolyline-event';\r\nimport { InfoBoxComponent } from './infobox';\r\n\r\nlet polylineId = 0;\r\n\r\n/**\r\n *\r\n * MapPolylineDirective renders a polyline inside a {@link MapComponent}.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import {Component} from '@angular/core';\r\n * import {MapComponent, MapPolylineDirective} from '...';\r\n *\r\n * @Component({\r\n *  selector: 'my-map,\r\n *  styles: [`\r\n *   .map-container { height: 300px; }\r\n * `],\r\n * template: `\r\n *   <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\r\n *      <x-map-polyline [Paths]=\"path\"></x-map-polyline>\r\n *   </x-map>\r\n * `\r\n * })\r\n * ```\r\n *\r\n *\r\n * @export\r\n */\r\n@Directive({\r\n    selector: 'x-map-polyline'\r\n})\r\nexport class MapPolylineDirective implements OnDestroy, OnChanges, AfterContentInit {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _inCustomLayer = false;\r\n    private _id: number;\r\n    private _layerId: number;\r\n    private _addedToService = false;\r\n    private _events: Subscription[] = [];\r\n\r\n    ///\r\n    /// Any InfoBox that is a direct children of the polyline\r\n    ///\r\n    @ContentChild(InfoBoxComponent) protected _infoBox: InfoBoxComponent;\r\n\r\n\r\n    /**\r\n     * Gets or sets whether this Polyline handles mouse events.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Input() public Clickable = true;\r\n\r\n    /**\r\n     * If set to true, the user can drag this shape over the map.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Input() public Draggable = false;\r\n\r\n    /**\r\n     * If set to true, the user can edit this shape by dragging the control\r\n     * points shown at the vertices and on each segment.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Input() public Editable = false;\r\n\r\n    /**\r\n     * When true, edges of the polyline are interpreted as geodesic and will\r\n     * follow the curvature of the Earth. When false, edges of the polyline are\r\n     * rendered as straight lines in screen space. Note that the shape of a\r\n     * geodesic polyline may appear to change when dragged, as the dimensions\r\n     * are maintained relative to the surface of the earth. Defaults to false.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Input() public Geodesic = false;\r\n\r\n    /**\r\n     * Arbitary metadata to assign to the Polyline. This is useful for events\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Input() public Metadata: Map<string, any> = new Map<string, any>();\r\n\r\n    /**\r\n     * The ordered sequence of coordinates that designates a polyline.\r\n     * Simple polylines may be defined using a single array of LatLngs. More\r\n     * complex polylines may specify an array of arrays.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Input() public Path: Array<ILatLong> | Array<Array<ILatLong>> = [];\r\n\r\n    /**\r\n     * Whether to show the title of the polyline as the tooltip on the polygon.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Input() public ShowTooltip: boolean = true;\r\n\r\n    /**\r\n     * The stroke color.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Input() public StrokeColor: string;\r\n\r\n    /**\r\n     * The stroke opacity between 0.0 and 1.0\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Input() public StrokeOpacity: number;\r\n\r\n    /**\r\n     * The stroke width in pixels.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Input() public StrokeWeight: number;\r\n\r\n    /**\r\n     * The title of the polygon.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Input() public Title: string;\r\n\r\n    /**\r\n     * Whether this polyline is visible on the map. Defaults to true.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Input() public Visible: boolean;\r\n\r\n    /**\r\n     * The zIndex compared to other polys.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Input() public zIndex: number;\r\n\r\n    ///\r\n    /// Delegate definitions\r\n    ///\r\n\r\n    /**\r\n     * This event is fired when the DOM click event is fired on the Polyline.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Output() Click: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n    /**\r\n     * This event is fired when the DOM dblclick event is fired on the Polyline.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Output() DblClick: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n    /**\r\n     * This event is repeatedly fired while the user drags the polyline.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Output() Drag: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n    /**\r\n     * This event is fired when the user stops dragging the polyline.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Output() DragEnd: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n    /**\r\n     * This event is fired when the user starts dragging the polyline.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Output() DragStart: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n    /**\r\n     * This event is fired when the DOM mousedown event is fired on the Polyline.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Output() MouseDown: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n    /**\r\n     * This event is fired when the DOM mousemove event is fired on the Polyline.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Output() MouseMove: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n    /**\r\n     * This event is fired on Polyline mouseout.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Output() MouseOut: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n    /**\r\n     * This event is fired on Polyline mouseover.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Output() MouseOver: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n    /**\r\n     * This event is fired whe the DOM mouseup event is fired on the Polyline\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Output() MouseUp: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n    /**\r\n     * This even is fired when the Polyline is right-clicked on.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    @Output() RightClick: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n    ///\r\n    /// Property declarations\r\n    ///\r\n\r\n    /**\r\n     * Gets whether the polyline has been registered with the service.\r\n     * @readonly\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    public get AddedToService(): boolean { return this._addedToService; }\r\n\r\n    /**\r\n     * Get the id of the polyline.\r\n     *\r\n     * @readonly\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    public get Id(): number { return this._id; }\r\n\r\n    /**\r\n     * Gets the id of the polyline as a string.\r\n     *\r\n     * @readonly\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    public get IdAsString(): string { return this._id.toString(); }\r\n\r\n    /**\r\n     * Gets whether the polyline is in a custom layer. See {@link MapLayer}.\r\n     *\r\n     * @readonly\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    public get InCustomLayer(): boolean { return this._inCustomLayer; }\r\n\r\n    /**\r\n     * gets the id of the Layer the polyline belongs to.\r\n     *\r\n     * @readonly\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    public get LayerId(): number { return this._layerId; }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of MapPolylineDirective.\r\n     * @param _polylineManager\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    constructor(private _polylineService: PolylineService, private _containerRef: ViewContainerRef) {\r\n        this._id = polylineId++;\r\n    }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Called after the content intialization of the directive is complete. Part of the ng Component life cycle.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    ngAfterContentInit(): void {\r\n        if (this._containerRef.element.nativeElement.parentElement) {\r\n            const parentName: string = this._containerRef.element.nativeElement.parentElement.tagName;\r\n            if (parentName.toLowerCase() === 'x-map-layer') {\r\n                this._inCustomLayer = true;\r\n                this._layerId = Number(this._containerRef.element.nativeElement.parentElement.attributes['layerId']);\r\n            }\r\n        }\r\n        if (!this._addedToService) {\r\n            this._polylineService.AddPolyline(this);\r\n            this._addedToService = true;\r\n            this.AddEventListeners();\r\n        }\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.\r\n     *\r\n     * @param changes - Changes that have occured.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): any {\r\n        if (!this._addedToService) { return; }\r\n\r\n        const o: IPolylineOptions = this.GeneratePolylineChangeSet(changes);\r\n        if (o != null) {\r\n            this._polylineService.SetOptions(this, o);\r\n        }\r\n        if (changes['Path'] && !changes['Path'].isFirstChange()) {\r\n            this._polylineService.UpdatePolyline(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when the polyline is being destroyed. Part of the ng Component life cycle. Release resources.\r\n     *\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    ngOnDestroy() {\r\n        this._polylineService.DeletePolyline(this);\r\n        this._events.forEach((s) => s.unsubscribe());\r\n            ///\r\n            /// remove event subscriptions\r\n            ///\r\n    }\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n\r\n    /**\r\n     * Wires up the event receivers.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    private AddEventListeners() {\r\n        const _getEventArg: (e: MouseEvent) => IPolylineEvent = e => {\r\n            return {\r\n                Polyline: this,\r\n                Click: e\r\n            };\r\n        };\r\n        this._polylineService.CreateEventObservable('click', this).subscribe((ev: MouseEvent) => {\r\n            if (this._infoBox != null) {\r\n                this._infoBox.Open(this._polylineService.GetCoordinatesFromClick(ev));\r\n            }\r\n            this.Click.emit(_getEventArg(ev));\r\n        });\r\n        const handlers = [\r\n            { name: 'dblclick', handler: (ev: MouseEvent) => this.DblClick.emit(_getEventArg(ev)) },\r\n            { name: 'drag', handler: (ev: MouseEvent) => this.Drag.emit(_getEventArg(ev)) },\r\n            { name: 'dragend', handler: (ev: MouseEvent) => this.DragEnd.emit(_getEventArg(ev)) },\r\n            { name: 'dragstart', handler: (ev: MouseEvent) => this.DragStart.emit(_getEventArg(ev)) },\r\n            { name: 'mousedown', handler: (ev: MouseEvent) => this.MouseDown.emit(_getEventArg(ev)) },\r\n            { name: 'mousemove', handler: (ev: MouseEvent) => this.MouseMove.emit(_getEventArg(ev)) },\r\n            { name: 'mouseout', handler: (ev: MouseEvent) => this.MouseOut.emit(_getEventArg(ev)) },\r\n            { name: 'mouseover', handler: (ev: MouseEvent) => this.MouseOver.emit(_getEventArg(ev)) },\r\n            { name: 'mouseup', handler: (ev: MouseEvent) => this.MouseUp.emit(_getEventArg(ev)) },\r\n            { name: 'rightclick', handler: (ev: MouseEvent) => this.RightClick.emit(_getEventArg(ev)) },\r\n        ];\r\n        handlers.forEach((obj) => {\r\n            const os = this._polylineService.CreateEventObservable(obj.name, this).subscribe(obj.handler);\r\n            this._events.push(os);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Generates IPolyline option changeset from directive settings.\r\n     *\r\n     * @param changes - {@link SimpleChanges} identifying the changes that occured.\r\n     * @returns - {@link IPolylineOptions} containing the polyline options.\r\n     *\r\n     * @memberof MapPolylineDirective\r\n     */\r\n    private GeneratePolylineChangeSet(changes: SimpleChanges): IPolylineOptions {\r\n        const options: IPolylineOptions = { id: this._id };\r\n        let hasOptions: boolean = false;\r\n        if (changes['Clickable']) { options.clickable = this.Clickable; hasOptions = true; }\r\n        if (changes['Draggable']) { options.draggable = this.Draggable; hasOptions = true; }\r\n        if (changes['Editable']) { options.editable = this.Editable; hasOptions = true; }\r\n        if (changes['Geodesic']) { options.geodesic = this.Geodesic; hasOptions = true; }\r\n        if (changes['ShowTooltip']) { options.showTooltip = this.ShowTooltip; hasOptions = true; }\r\n        if (changes['StrokeColor']) { options.strokeColor = this.StrokeColor; hasOptions = true; }\r\n        if (changes['StrokeOpacity']) { options.strokeOpacity = this.StrokeOpacity; hasOptions = true; }\r\n        if (changes['StrokeWeight']) { options.strokeWeight = this.StrokeWeight; hasOptions = true; }\r\n        if (changes['Title']) { options.title = this.Title; hasOptions = true; }\r\n        if (changes['Visible']) { options.visible = this.Visible; hasOptions = true; }\r\n        if (changes['zIndex']) { options.zIndex = this.zIndex; hasOptions = true; }\r\n        return hasOptions ? options : null;\r\n    }\r\n\r\n}\r\n","import {\r\n    Directive, SimpleChange, Input, Output, OnDestroy, OnChanges,\r\n    EventEmitter, ContentChild, AfterContentInit, ViewContainerRef, NgZone\r\n} from '@angular/core';\r\nimport { IPoint } from '../interfaces/ipoint';\r\nimport { ILatLong } from '../interfaces/ilatlong';\r\nimport { IMarkerEvent } from '../interfaces/imarker-event';\r\nimport { IMarkerOptions } from '../interfaces/imarker-options';\r\nimport { ILayerOptions } from '../interfaces/ilayer-options';\r\nimport { IMarkerIconInfo } from '../interfaces/imarker-icon-info';\r\nimport { IClusterIconInfo } from '../interfaces/icluster-icon-info';\r\nimport { IClusterOptions } from '../interfaces/icluster-options';\r\nimport { MarkerService } from '../services/marker.service';\r\nimport { LayerService } from '../services/layer.service';\r\nimport { ClusterService } from '../services/cluster.service';\r\nimport { MapService } from '../services/map.service';\r\nimport { Layer } from '../models/layer';\r\nimport { Marker } from '../models/marker';\r\nimport { ClusterClickAction } from '../models/cluster-click-action';\r\nimport { ClusterPlacementMode } from '../models/cluster-placement-mode';\r\nimport { ClusterLayerDirective } from './cluster-layer';\r\n\r\n/**\r\n * internal counter to use as ids for marker.\r\n */\r\nlet layerId = 1000000;\r\n\r\n/**\r\n * MapMarkerLayerDirective performantly renders a large set of map marker inside a {@link MapComponent}.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import {Component} from '@angular/core';\r\n * import {MapComponent, MapMarkerDirective} from '...';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *   .map-container {\r\n *     height: 300px;\r\n *   }\r\n * `],\r\n * template: `\r\n *   <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\r\n *      <x-map-marker-layer [MarkerOptions]=\"_markers\"></x-map-marker-layer>\r\n *   </x-map>\r\n * `\r\n * })\r\n * ```\r\n *\r\n * @export\r\n */\r\n@Directive({\r\n    selector: 'x-map-marker-layer'\r\n})\r\nexport class MapMarkerLayerDirective implements OnDestroy, OnChanges, AfterContentInit {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _id: number;\r\n    private _layerPromise: Promise<Layer>;\r\n    private _service: LayerService;\r\n    private _styles: Array<IClusterIconInfo>;\r\n    private _useDynamicSizeMarker = false;\r\n    private _dynamicMarkerBaseSize = 18;\r\n    private _dynamicMarkerRanges: Map<number, string> = new Map<number, string>([\r\n        [10, 'rgba(20, 180, 20, 0.5)'],\r\n        [100, 'rgba(255, 210, 40, 0.5)'],\r\n        [Number.MAX_SAFE_INTEGER , 'rgba(255, 40, 40, 0.5)']\r\n    ]);\r\n    private _iconCreationCallback: (m: Array<Marker>, i: IMarkerIconInfo) => string;\r\n    private _streaming: boolean = false;\r\n    private _markers: Array<IMarkerOptions> = new Array<IMarkerOptions>();\r\n    private _markersLast: Array<IMarkerOptions> = new Array<IMarkerOptions>();\r\n\r\n\r\n    /**\r\n     * Gets or sets the the Cluster Click Action {@link ClusterClickAction}.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Input() public ClusterClickAction: ClusterClickAction =  ClusterClickAction.ZoomIntoCluster;\r\n\r\n    /**\r\n     * Gets or sets the IconInfo to be used to create a custom cluster marker. Supports font-based, SVG, graphics and more.\r\n     * See {@link IMarkerIconInfo}.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Input() public ClusterIconInfo: IMarkerIconInfo;\r\n\r\n    /**\r\n     * Gets or sets the cluster placement mode. {@link ClusterPlacementMode}\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Input()  public ClusterPlacementMode: ClusterPlacementMode = ClusterPlacementMode.MeanValue;\r\n\r\n    /**\r\n     * Gets or sets the callback invoked to create a custom cluster marker. Note that when {@link UseDynamicSizeMarkers} is enabled,\r\n     * you cannot set a custom marker callback.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Input()\r\n        public get CustomMarkerCallback(): (m: Array<Marker>, i: IMarkerIconInfo) => string  { return this._iconCreationCallback; }\r\n        public set CustomMarkerCallback(val: (m: Array<Marker>, i: IMarkerIconInfo) => string) {\r\n            if (this._useDynamicSizeMarker) {\r\n                throw(\r\n                    new Error(`You cannot set a custom marker callback when UseDynamicSizeMarkers is set to true.\r\n                    Set UseDynamicSizeMakers to false.`)\r\n                );\r\n            }\r\n            this._iconCreationCallback = val;\r\n        }\r\n\r\n    /**\r\n     * Gets or sets the base size of dynamic markers in pixels. The actualy size of the dynamic marker is based on this.\r\n     * See {@link UseDynamicSizeMarkers}.\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get DynamicMarkerBaseSize(): number  { return this._dynamicMarkerBaseSize; }\r\n        public set DynamicMarkerBaseSize(val: number) { this._dynamicMarkerBaseSize = val; }\r\n\r\n    /**\r\n     * Gets or sets the ranges to use to calculate breakpoints and colors for dynamic markers.\r\n     * The map contains key/value pairs, with the keys being\r\n     * the breakpoint sizes and the values the colors to be used for the dynamic marker in that range. See {@link UseDynamicSizeMarkers}.\r\n     *\r\n     * @memberof ClusterLayerDirective\r\n     */\r\n    @Input()\r\n        public get DynamicMarkerRanges(): Map<number, string>  { return this._dynamicMarkerRanges; }\r\n        public set DynamicMarkerRanges(val: Map<number, string>) { this._dynamicMarkerRanges = val; }\r\n\r\n    /**\r\n     * Determines whether the layer clusters. This property can only be set on creation of the layer.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Input() public EnableClustering: boolean = false;\r\n\r\n    /**\r\n     * Gets or sets the grid size to be used for clustering.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Input() public GridSize: number = 150;\r\n\r\n    /**\r\n     * Gets or sets the IconInfo to be used to create a custom marker images. Supports font-based, SVG, graphics and more.\r\n     * See {@link IMarkerIconInfo}.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Input() public IconInfo: IMarkerIconInfo;\r\n\r\n    /**\r\n     * Gets or sets An offset applied to the positioning of the layer.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Input() public LayerOffset: IPoint = null;\r\n\r\n    /**\r\n     *  IMarkerOptions array holding the marker info.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Input()\r\n        public get MarkerOptions(): Array<IMarkerOptions> { return this._markers; }\r\n        public set MarkerOptions(val: Array<IMarkerOptions>) {\r\n            if (this._streaming) {\r\n                this._markersLast.push(...val.slice(0));\r\n                this._markers.push(...val);\r\n            }\r\n            else {\r\n                this._markers = val.slice(0);\r\n            }\r\n        }\r\n\r\n    /**\r\n     * Gets or sets the cluster styles\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Input()\r\n        public get Styles(): Array<IClusterIconInfo> { return this._styles; }\r\n        public set Styles(val: Array<IClusterIconInfo>) { this._styles = val; }\r\n\r\n    /**\r\n     * Sets whether to treat changes in the MarkerOptions as streams of new markers. In thsi mode, changing the\r\n     * Array supplied in MarkerOptions will be incrementally drawn on the map as opposed to replace the markers on the map.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Input()\r\n        public get TreatNewMarkerOptionsAsStream(): boolean { return this._streaming; }\r\n        public set TreatNewMarkerOptionsAsStream(val: boolean) { this._streaming = val; }\r\n\r\n    /**\r\n     * Gets or sets whether to use dynamic markers. Dynamic markers change in size and color depending on the number of\r\n     * pins in the cluster. If set to true, this will take precendence over any custom marker creation.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Input()\r\n        public get UseDynamicSizeMarkers(): boolean { return this._useDynamicSizeMarker; }\r\n        public set UseDynamicSizeMarkers(val: boolean) {\r\n            this._useDynamicSizeMarker = val;\r\n            if (val) {\r\n                this._iconCreationCallback = (m: Array<Marker>, info: IMarkerIconInfo) => {\r\n                    return ClusterLayerDirective.CreateDynamicSizeMarker(\r\n                        m.length, info, this._dynamicMarkerBaseSize, this._dynamicMarkerRanges);\r\n                };\r\n            }\r\n        }\r\n\r\n    /**\r\n     * Sets the visibility of the marker layer\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Input() public Visible: boolean;\r\n\r\n    /**\r\n     * Gets or sets the z-index of the layer. If not used, layers get stacked in the order created.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Input() public ZIndex: number = 0;\r\n\r\n    /**\r\n     * Gets or sets whether the cluster should zoom in on click\r\n     *\r\n     * @readonly\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Input() public ZoomOnClick: boolean = true;\r\n\r\n\r\n    ///\r\n    /// Delegates\r\n    ///\r\n\r\n    /**\r\n     * This event emitter gets emitted when the dynamic icon for a marker is being created.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Output() public DynamicMarkerCreated: EventEmitter<IMarkerIconInfo> = new EventEmitter<IMarkerIconInfo>();\r\n\r\n    /**\r\n     * This event emitter gets emitted when the user clicks a marker in the layer.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Output() public MarkerClick: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\r\n\r\n    /**\r\n     * This event is fired when the user stops dragging a marker.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    @Output() public DragEnd: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\r\n\r\n\r\n    ///\r\n    /// Property declarations\r\n    ///\r\n\r\n    /**\r\n     * Gets the id of the marker layer.\r\n     *\r\n     * @readonly\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    public get Id(): number { return this._id; }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of MapMarkerLayerDirective.\r\n     * @param _markerService - Concreate implementation of a {@link MarkerService}.\r\n     * @param _layerService - Concreate implementation of a {@link LayerService}.\r\n     * @param _clusterService - Concreate implementation of a {@link ClusterService}.\r\n     * @param _mapService - Concreate implementation of a {@link MapService}.\r\n     * @param _zone - Concreate implementation of a {@link NgZone} service.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    constructor(\r\n        private _markerService: MarkerService,\r\n        private _layerService: LayerService,\r\n        private _clusterService: ClusterService,\r\n        private _mapService: MapService,\r\n        private _zone: NgZone) {\r\n        this._id = layerId++;\r\n    }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Translates a geo location to a pixel location relative to the map viewport.\r\n     *\r\n     * @param [loc] - {@link ILatLong} containing the geo coordinates.\r\n     * @returns - A promise that when fullfilled contains an {@link IPoint} representing the pixel coordinates.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    public LocationToPixel(loc: ILatLong): Promise<IPoint> {\r\n        return this._markerService.LocationToPoint(loc);\r\n    }\r\n\r\n    /**\r\n     * Called after Component content initialization. Part of ng Component life cycle.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    public ngAfterContentInit() {\r\n        const layerOptions: ILayerOptions = {\r\n            id: this._id\r\n        };\r\n        this._zone.runOutsideAngular(() => {\r\n            const fakeLayerDirective: any = {\r\n                Id : this._id,\r\n                Visible: this.Visible\r\n            };\r\n            if (!this.EnableClustering) {\r\n                this._layerService.AddLayer(fakeLayerDirective);\r\n                this._layerPromise = this._layerService.GetNativeLayer(fakeLayerDirective);\r\n                this._service = this._layerService;\r\n            }\r\n            else {\r\n                fakeLayerDirective.LayerOffset = this.LayerOffset;\r\n                fakeLayerDirective.ZIndex = this.ZIndex;\r\n                fakeLayerDirective.ClusteringEnabled = this.EnableClustering;\r\n                fakeLayerDirective.ClusterPlacementMode = this.ClusterPlacementMode;\r\n                fakeLayerDirective.GridSize = this.GridSize;\r\n                fakeLayerDirective.ClusterClickAction = this.ClusterClickAction;\r\n                fakeLayerDirective.IconInfo = this.ClusterIconInfo;\r\n                fakeLayerDirective.CustomMarkerCallback = this.CustomMarkerCallback;\r\n                fakeLayerDirective.UseDynamicSizeMarkers = this.UseDynamicSizeMarkers;\r\n                this._clusterService.AddLayer(fakeLayerDirective);\r\n                this._layerPromise = this._clusterService.GetNativeLayer(fakeLayerDirective);\r\n                this._service = this._clusterService;\r\n            }\r\n            this._layerPromise.then(l => {\r\n                l.SetVisible(this.Visible);\r\n                if (this.MarkerOptions) {\r\n                    this._zone.runOutsideAngular(() => this.UpdateMarkers());\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.\r\n     *\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    public ngOnDestroy() {\r\n        this._layerPromise.then(l => {\r\n            l.Delete();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reacts to changes in data-bound properties of the component and actuates property changes in the underling layer model.\r\n     *\r\n     * @param changes - collection of changes.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    public ngOnChanges(changes: { [key: string]: SimpleChange }) {\r\n        let shouldSetOptions: boolean = false;\r\n        const o: IClusterOptions = {\r\n            id: this._id\r\n        };\r\n        if (changes['MarkerOptions']) {\r\n            this._zone.runOutsideAngular(() => {\r\n                this.UpdateMarkers();\r\n            });\r\n        }\r\n        if (changes['Visible'] && !changes['Visible'].firstChange) {\r\n            this._zone.runOutsideAngular(() => {\r\n                this._layerPromise.then(l => l.SetVisible(this.Visible));\r\n            });\r\n        }\r\n        if (changes['EnableClustering'] && !changes['EnableClustering'].firstChange) {\r\n            if ('StopClustering' in this._service) {\r\n                o.clusteringEnabled = this.EnableClustering;\r\n                shouldSetOptions = true;\r\n            }\r\n            else {\r\n                throw (new Error('You cannot change EnableClustering after the layer has been created.'));\r\n            }\r\n        }\r\n        if (changes['ClusterPlacementMode'] && !changes['ClusterPlacementMode'].firstChange && 'StopClustering' in this._service) {\r\n            o.placementMode = this.ClusterPlacementMode;\r\n            shouldSetOptions = true;\r\n        }\r\n        if (changes['GridSize'] && !changes['GridSize'].firstChange && 'StopClustering' in this._service) {\r\n            o.gridSize = this.GridSize;\r\n            shouldSetOptions = true;\r\n        }\r\n        if (changes['ClusterClickAction'] && !changes['ClusterClickAction'].firstChange && 'StopClustering' in this._service) {\r\n            o.zoomOnClick = this.ClusterClickAction === ClusterClickAction.ZoomIntoCluster;\r\n            shouldSetOptions = true;\r\n        }\r\n        if ((changes['ZIndex'] && !changes['ZIndex'].firstChange) ||\r\n            (changes['LayerOffset'] && !changes['LayerOffset'].firstChange) ||\r\n            (changes['IconInfo'] && !changes['IconInfo'].firstChange)\r\n        ) {\r\n            throw (new Error('You cannot change ZIndex or LayerOffset after the layer has been created.'));\r\n        }\r\n\r\n        if (shouldSetOptions) {\r\n            this._zone.runOutsideAngular(() => {\r\n                const fakeLayerDirective: any = {Id : this._id};\r\n                this._layerPromise.then(l => l.SetOptions(o));\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Obtains a string representation of the Marker Id.\r\n     * @returns - string representation of the marker id.\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    public toString(): string { return 'MapMarkerLayer-' + this._id.toString(); }\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n\r\n    /**\r\n     * Adds various event listeners for the marker.\r\n     *\r\n     * @param m - the marker for which to add the event.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     */\r\n    private AddEventListeners(m: Marker): void {\r\n        m.AddListener('click', (e: MouseEvent) => this.MarkerClick.emit({\r\n                Marker: m,\r\n                Click: e,\r\n                Location: this._markerService.GetCoordinatesFromClick(e),\r\n                Pixels: this._markerService.GetPixelsFromClick(e)\r\n            }));\r\n        m.AddListener('dragend', (e: MouseEvent) => this.DragEnd.emit({\r\n                Marker: m,\r\n                Click: e,\r\n                Location: this._markerService.GetCoordinatesFromClick(e),\r\n                Pixels: this._markerService.GetPixelsFromClick(e)\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Sets or updates the markers based on the marker options. This will place the markers on the map\r\n     * and register the associated events.\r\n     *\r\n     * @memberof MapMarkerLayerDirective\r\n     * @method\r\n     */\r\n    private UpdateMarkers(): void {\r\n        if (this._layerPromise == null) { return; }\r\n        this._layerPromise.then(l => {\r\n            const markers: Array<IMarkerOptions> = this._streaming ? this._markersLast.splice(0) : this._markers;\r\n\r\n            // generate the promise for the markers\r\n            const mp: Promise<Array<Marker>> = this._service.CreateMarkers(markers, this.IconInfo);\r\n\r\n            // set markers once promises are fullfilled.\r\n            mp.then(m => {\r\n                m.forEach(marker => {\r\n                     this.AddEventListeners(marker);\r\n                });\r\n                this._streaming ? l.AddEntities(m) : l.SetEntities(m);\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n","import {\r\n    Directive, SimpleChange, Input, Output, OnDestroy, OnChanges,\r\n    EventEmitter, ContentChild, AfterContentInit, ViewContainerRef, NgZone,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { IPoint } from '../interfaces/ipoint';\r\nimport { ISize } from '../interfaces/isize';\r\nimport { ILatLong } from '../interfaces/ilatlong';\r\nimport { IPolygonEvent } from '../interfaces/ipolygon-event';\r\nimport { IPolygonOptions } from '../interfaces/ipolygon-options';\r\nimport { ILayerOptions } from '../interfaces/ilayer-options';\r\nimport { ILabelOptions } from '../interfaces/ilabel-options';\r\nimport { LayerService } from '../services/layer.service';\r\nimport { MapService } from '../services/map.service';\r\nimport { Layer } from '../models/layer';\r\nimport { Polygon } from '../models/polygon';\r\nimport { MapLabel } from '../models/map-label';\r\nimport { CanvasOverlay } from '../models/canvas-overlay';\r\n\r\n/**\r\n * internal counter to use as ids for polygons.\r\n */\r\nlet layerId = 1000000;\r\n\r\n/**\r\n * MapPolygonLayerDirective performantly renders a large set of polygons on a {@link MapComponent}.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import {Component} from '@angular/core';\r\n * import {MapComponent} from '...';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *   .map-container {\r\n *     height: 300px;\r\n *   }\r\n * `],\r\n * template: `\r\n *   <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\r\n *      <x-map-polygon-layer [PolygonOptions]=\"_polygons\"></x-map-polygon-layer>\r\n *   </x-map>\r\n * `\r\n * })\r\n * ```\r\n *\r\n * @export\r\n */\r\n@Directive({\r\n    selector: 'x-map-polygon-layer'\r\n})\r\nexport class MapPolygonLayerDirective implements OnDestroy, OnChanges, AfterContentInit {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _id: number;\r\n    private _layerPromise: Promise<Layer>;\r\n    private _service: LayerService;\r\n    private _canvas: CanvasOverlay;\r\n    private _labels: Array<{loc: ILatLong, title: string}> = new Array<{loc: ILatLong, title: string}>();\r\n    private _tooltip: MapLabel;\r\n    private _tooltipSubscriptions: Array<Subscription> = new Array<Subscription>();\r\n    private _tooltipVisible: boolean = false;\r\n    private _defaultOptions: ILabelOptions = {\r\n        fontSize: 11,\r\n        fontFamily: 'sans-serif',\r\n        strokeWeight: 2,\r\n        strokeColor: '#000000',\r\n        fontColor: '#ffffff'\r\n    };\r\n    private _streaming: boolean = false;\r\n    private _polygons: Array<IPolygonOptions> = new Array<IPolygonOptions>();\r\n    private _polygonsLast: Array<IPolygonOptions> = new Array<IPolygonOptions>();\r\n\r\n    /**\r\n     * Set the maximum zoom at which the polygon labels are visible. Ignored if ShowLabel is false.\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    @Input() public LabelMaxZoom: number = Number.MAX_SAFE_INTEGER;\r\n\r\n    /**\r\n     * Set the minimum zoom at which the polygon labels are visible. Ignored if ShowLabel is false.\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    @Input() public LabelMinZoom: number = -1;\r\n\r\n    /**\r\n     * Sepcifies styleing options for on-map polygon labels.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    @Input() public LabelOptions: ILabelOptions;\r\n\r\n    /**\r\n     * Gets or sets An offset applied to the positioning of the layer.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    @Input() public LayerOffset: IPoint = null;\r\n\r\n    /**\r\n     * An array of polygon options representing the polygons in the layer.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    @Input()\r\n        public get PolygonOptions(): Array<IPolygonOptions> { return this._polygons; }\r\n        public set PolygonOptions(val: Array<IPolygonOptions>) {\r\n            if (this._streaming) {\r\n                this._polygonsLast.push(...val.slice(0));\r\n                this._polygons.push(...val);\r\n            }\r\n            else {\r\n                this._polygons = val.slice(0);\r\n            }\r\n        }\r\n\r\n    /**\r\n     * Whether to show the polygon titles as the labels on the polygons.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    @Input() public ShowLabels: boolean = false;\r\n\r\n    /**\r\n     * Whether to show the titles of the polygosn as the tooltips on the polygons.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    @Input() public ShowTooltips: boolean = true;\r\n\r\n    /**\r\n     * Sets whether to treat changes in the PolygonOptions as streams of new markers. In this mode, changing the\r\n     * Array supplied in PolygonOptions will be incrementally drawn on the map as opposed to replace the polygons on the map.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    @Input()\r\n        public get TreatNewPolygonOptionsAsStream(): boolean { return this._streaming; }\r\n        public set TreatNewPolygonOptionsAsStream(val: boolean) { this._streaming = val; }\r\n\r\n    /**\r\n     * Sets the visibility of the marker layer\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    @Input() public Visible: boolean;\r\n\r\n    /**\r\n     * Gets or sets the z-index of the layer. If not used, layers get stacked in the order created.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    @Input() public ZIndex: number = 0;\r\n\r\n    ///\r\n    /// Delegates\r\n    ///\r\n\r\n    /**\r\n     * This event emitter gets emitted when the user clicks a polygon in the layer.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    @Output() public PolygonClick: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n    /**\r\n     * This event is fired when the DOM dblclick event is fired on a polygon in the layer.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    @Output() PolygonDblClick: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n    /**\r\n     * This event is fired when the DOM mousemove event is fired on a polygon in the layer.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    @Output() PolygonMouseMove: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n    /**\r\n     * This event is fired on mouseout on a polygon in the layer.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    @Output() PolygonMouseOut: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n    /**\r\n     * This event is fired on mouseover on a polygon in a layer.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    @Output() PolygonMouseOver: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\r\n\r\n\r\n\r\n    ///\r\n    /// Property declarations\r\n    ///\r\n\r\n    /**\r\n     * Gets the id of the marker layer.\r\n     *\r\n     * @readonly\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    public get Id(): number { return this._id; }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of MapPolygonLayerDirective.\r\n     * @param _layerService - Concreate implementation of a {@link LayerService}.\r\n     * @param _mapService - Concreate implementation of a {@link MapService}.\r\n     * @param _zone - Concreate implementation of a {@link NgZone} service.\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    constructor(\r\n        private _layerService: LayerService,\r\n        private _mapService: MapService,\r\n        private _zone: NgZone) {\r\n        this._id = layerId++;\r\n    }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Called after Component content initialization. Part of ng Component life cycle.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    public ngAfterContentInit() {\r\n        const layerOptions: ILayerOptions = {\r\n            id: this._id\r\n        };\r\n        this._zone.runOutsideAngular(() => {\r\n            const fakeLayerDirective: any = {\r\n                Id : this._id,\r\n                Visible: this.Visible,\r\n                LayerOffset: this.LayerOffset,\r\n                ZIndex: this.ZIndex\r\n            };\r\n            this._layerService.AddLayer(fakeLayerDirective);\r\n            this._layerPromise = this._layerService.GetNativeLayer(fakeLayerDirective);\r\n\r\n            Promise.all([\r\n                this._layerPromise,\r\n                this._mapService.CreateCanvasOverlay(el => this.DrawLabels(el))\r\n            ]).then(values => {\r\n                values[0].SetVisible(this.Visible);\r\n                this._canvas = values[1];\r\n                this._canvas._canvasReady.then(b => {\r\n                    this._tooltip = this._canvas.GetToolTipOverlay();\r\n                    this.ManageTooltip(this.ShowTooltips);\r\n                });\r\n                if (this.PolygonOptions) {\r\n                    this._zone.runOutsideAngular(() => this.UpdatePolygons());\r\n                }\r\n            });\r\n            this._service = this._layerService;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    public ngOnDestroy() {\r\n        this._tooltipSubscriptions.forEach(s => s.unsubscribe());\r\n        this._layerPromise.then(l => {\r\n            l.Delete();\r\n        });\r\n        if (this._canvas) { this._canvas.Delete(); }\r\n    }\r\n\r\n    /**\r\n     * Reacts to changes in data-bound properties of the component and actuates property changes in the underling layer model.\r\n     *\r\n     * @param changes - collection of changes.\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    public ngOnChanges(changes: { [key: string]: SimpleChange }) {\r\n        if (changes['PolygonOptions']) {\r\n            this._zone.runOutsideAngular(() => {\r\n                this.UpdatePolygons();\r\n            });\r\n        }\r\n        if (changes['Visible'] && !changes['Visible'].firstChange) {\r\n            this._layerPromise.then(l => l.SetVisible(this.Visible));\r\n        }\r\n        if ((changes['ZIndex'] && !changes['ZIndex'].firstChange) ||\r\n            (changes['LayerOffset'] && !changes['LayerOffset'].firstChange)\r\n        ) {\r\n            throw (new Error('You cannot change ZIndex or LayerOffset after the layer has been created.'));\r\n        }\r\n        if ((changes['ShowLabels'] && !changes['ShowLabels'].firstChange) ||\r\n            (changes['LabelMinZoom'] && !changes['LabelMinZoom'].firstChange) ||\r\n            (changes['LabelMaxZoom'] && !changes['LabelMaxZoom'].firstChange)\r\n        ) {\r\n            if (this._canvas) {\r\n                this._canvas.Redraw(true);\r\n            }\r\n        }\r\n        if (changes['ShowTooltips'] && this._tooltip) {\r\n            this.ManageTooltip(changes['ShowTooltips'].currentValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Obtains a string representation of the Marker Id.\r\n     * @returns - string representation of the marker id.\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    public toString(): string { return 'MapPolygonLayer-' + this._id.toString(); }\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n\r\n    /**\r\n     * Adds various event listeners for the marker.\r\n     *\r\n     * @param p - the polygon for which to add the event.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    private AddEventListeners(p: Polygon): void {\r\n        const handlers = [\r\n            { name: 'click', handler: (ev: MouseEvent) => this.PolygonClick.emit({Polygon: p, Click: ev}) },\r\n            { name: 'dblclick', handler: (ev: MouseEvent) => this.PolygonDblClick.emit({Polygon: p, Click: ev}) },\r\n            { name: 'mousemove', handler: (ev: MouseEvent) => this.PolygonMouseMove.emit({Polygon: p, Click: ev}) },\r\n            { name: 'mouseout', handler: (ev: MouseEvent) => this.PolygonMouseOut.emit({Polygon: p, Click: ev}) },\r\n            { name: 'mouseover', handler: (ev: MouseEvent) => this.PolygonMouseOver.emit({Polygon: p, Click: ev}) }\r\n        ];\r\n        handlers.forEach((obj) => p.AddListener(obj.name, obj.handler));\r\n    }\r\n\r\n    /**\r\n     * Draws the polygon labels. Called by the Canvas overlay.\r\n     *\r\n     * @param el - The canvas on which to draw the labels.\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    private DrawLabels(el: HTMLCanvasElement): void {\r\n        if (this.ShowLabels) {\r\n            this._mapService.GetZoom().then(z => {\r\n                if (this.LabelMinZoom <= z && this.LabelMaxZoom >= z) {\r\n                    const ctx: CanvasRenderingContext2D = el.getContext('2d');\r\n                    const labels = this._labels.map(x => x.title);\r\n                    this._mapService.LocationsToPoints(this._labels.map(x => x.loc)).then(locs => {\r\n                        const size: ISize = this._mapService.MapSize;\r\n                        for (let i = 0, len = locs.length; i < len; i++) {\r\n                            // Don't draw the point if it is not in view. This greatly improves performance when zoomed in.\r\n                            if (locs[i].x >= 0 && locs[i].y >= 0 && locs[i].x <= size.width && locs[i].y <= size.height) {\r\n                                this.DrawText(ctx, locs[i], labels[i]);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws the label text at the appropriate place on the canvas.\r\n     * @param ctx - Canvas drawing context.\r\n     * @param loc - Pixel location on the canvas where to center the text.\r\n     * @param text - Text to draw.\r\n     */\r\n    private DrawText(ctx: CanvasRenderingContext2D, loc: IPoint, text: string) {\r\n        let lo: ILabelOptions = this.LabelOptions;\r\n        if (lo == null && this._tooltip) { lo = this._tooltip.DefaultLabelStyle; }\r\n        if (lo == null) { lo = this._defaultOptions; }\r\n\r\n        ctx.strokeStyle = lo.strokeColor;\r\n        ctx.font = `${lo.fontSize}px ${lo.fontFamily}`;\r\n        ctx.textAlign = 'center';\r\n        const strokeWeight: number = lo.strokeWeight;\r\n        if (text && strokeWeight && strokeWeight > 0) {\r\n                ctx.lineWidth = strokeWeight;\r\n                ctx.strokeText(text, loc.x, loc.y);\r\n        }\r\n        ctx.fillStyle = lo.fontColor;\r\n        ctx.fillText(text, loc.x, loc.y);\r\n    }\r\n\r\n    /**\r\n     * Manages the tooltip and the attachment of the associated events.\r\n     *\r\n     * @param show - True to enable the tooltip, false to disable.\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    private ManageTooltip(show: boolean): void {\r\n        if (show && this._canvas) {\r\n            // add tooltip subscriptions\r\n            this._tooltip.Set('hidden', true);\r\n            this._tooltipVisible = false;\r\n            this._tooltipSubscriptions.push(this.PolygonMouseMove.asObservable().subscribe(e => {\r\n                if (this._tooltipVisible) {\r\n                    const loc: ILatLong = this._canvas.GetCoordinatesFromClick(e.Click);\r\n                    this._tooltip.Set('position', loc);\r\n                }\r\n            }));\r\n            this._tooltipSubscriptions.push(this.PolygonMouseOver.asObservable().subscribe(e => {\r\n                if (e.Polygon.Title && e.Polygon.Title.length > 0) {\r\n                    const loc: ILatLong = this._canvas.GetCoordinatesFromClick(e.Click);\r\n                    this._tooltip.Set('text', e.Polygon.Title);\r\n                    this._tooltip.Set('position', loc);\r\n                    if (!this._tooltipVisible) {\r\n                        this._tooltip.Set('hidden', false);\r\n                        this._tooltipVisible = true;\r\n                    }\r\n                }\r\n            }));\r\n            this._tooltipSubscriptions.push(this.PolygonMouseOut.asObservable().subscribe(e => {\r\n                if (this._tooltipVisible) {\r\n                    this._tooltip.Set('hidden', true);\r\n                    this._tooltipVisible = false;\r\n                }\r\n            }));\r\n        }\r\n        else {\r\n            // remove tooltip subscriptions\r\n            this._tooltipSubscriptions.forEach(s => s.unsubscribe());\r\n            this._tooltipSubscriptions.splice(0);\r\n            this._tooltip.Set('hidden', true);\r\n            this._tooltipVisible = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets or updates the polygons based on the polygon options. This will place the polygons on the map\r\n     * and register the associated events.\r\n     *\r\n     * @memberof MapPolygonLayerDirective\r\n     * @method\r\n     */\r\n    private UpdatePolygons(): void {\r\n        if (this._layerPromise == null) {\r\n            return;\r\n        }\r\n        this._layerPromise.then(l => {\r\n            const polygons: Array<IPolygonOptions> = this._streaming ? this._polygonsLast.splice(0) : this._polygons;\r\n            if (!this._streaming) { this._labels.splice(0); }\r\n\r\n            // generate the promise for the markers\r\n            const lp: Promise<Array<Polygon>> = this._service.CreatePolygons(l.GetOptions().id, polygons);\r\n\r\n            // set markers once promises are fullfilled.\r\n            lp.then(p => {\r\n                p.forEach(poly => {\r\n                    if (poly.Title != null && poly.Title.length > 0) { this._labels.push({loc: poly.Centroid, title: poly.Title}); }\r\n                    this.AddEventListeners(poly);\r\n                });\r\n                this._streaming ? l.AddEntities(p) : l.SetEntities(p);\r\n                if (this._canvas) { this._canvas.Redraw(!this._streaming); }\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n","import {\r\n    Directive, SimpleChange, Input, Output, OnDestroy, OnChanges,\r\n    EventEmitter, ContentChild, AfterContentInit, ViewContainerRef, NgZone,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { IPoint } from '../interfaces/ipoint';\r\nimport { ISize } from '../interfaces/isize';\r\nimport { ILatLong } from '../interfaces/ilatlong';\r\nimport { IPolylineEvent } from '../interfaces/ipolyline-event';\r\nimport { IPolylineOptions } from '../interfaces/ipolyline-options';\r\nimport { ILayerOptions } from '../interfaces/ilayer-options';\r\nimport { ILabelOptions } from '../interfaces/ilabel-options';\r\nimport { LayerService } from '../services/layer.service';\r\nimport { MapService } from '../services/map.service';\r\nimport { Layer } from '../models/layer';\r\nimport { Polyline } from '../models/polyline';\r\nimport { MapLabel } from '../models/map-label';\r\nimport { CanvasOverlay } from '../models/canvas-overlay';\r\n\r\n/**\r\n * internal counter to use as ids for polylines.\r\n */\r\nlet layerId = 1000000;\r\n\r\n/**\r\n * MapPolylineLayerDirective performantly renders a large set of polyline on a {@link MapComponent}.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import {Component} from '@angular/core';\r\n * import {MapComponent} from '...';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *   .map-container {\r\n *     height: 300px;\r\n *   }\r\n * `],\r\n * template: `\r\n *   <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\r\n *      <x-map-polyline-layer [PolygonOptions]=\"_polyline\"></x-map-polyline-layer>\r\n *   </x-map>\r\n * `\r\n * })\r\n * ```\r\n *\r\n * @export\r\n */\r\n@Directive({\r\n    selector: 'x-map-polyline-layer'\r\n})\r\nexport class MapPolylineLayerDirective implements OnDestroy, OnChanges, AfterContentInit {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _id: number;\r\n    private _layerPromise: Promise<Layer>;\r\n    private _service: LayerService;\r\n    private _canvas: CanvasOverlay;\r\n    private _labels: Array<{loc: ILatLong, title: string}> = new Array<{loc: ILatLong, title: string}>();\r\n    private _tooltip: MapLabel;\r\n    private _tooltipSubscriptions: Array<Subscription> = new Array<Subscription>();\r\n    private _tooltipVisible: boolean = false;\r\n    private _defaultOptions: ILabelOptions = {\r\n        fontSize: 11,\r\n        fontFamily: 'sans-serif',\r\n        strokeWeight: 2,\r\n        strokeColor: '#000000',\r\n        fontColor: '#ffffff'\r\n    };\r\n    private _streaming: boolean = false;\r\n    private _polylines: Array<IPolylineOptions> = new Array<IPolylineOptions>();\r\n    private _polylinesLast: Array<IPolylineOptions> = new Array<IPolylineOptions>();\r\n\r\n    /**\r\n     * Set the maximum zoom at which the polyline labels are visible. Ignored if ShowLabel is false.\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    @Input() public LabelMaxZoom: number = Number.MAX_SAFE_INTEGER;\r\n\r\n    /**\r\n     * Set the minimum zoom at which the polyline labels are visible. Ignored if ShowLabel is false.\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    @Input() public LabelMinZoom: number = -1;\r\n\r\n    /**\r\n     * Sepcifies styleing options for on-map polyline labels.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    @Input() public LabelOptions: ILabelOptions;\r\n\r\n    /**\r\n     * Gets or sets An offset applied to the positioning of the layer.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    @Input() public LayerOffset: IPoint = null;\r\n\r\n    /**\r\n     * An array of polyline options representing the polylines in the layer.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    @Input()\r\n        public get PolylineOptions(): Array<IPolylineOptions> { return this._polylines; }\r\n        public set PolylineOptions(val: Array<IPolylineOptions>) {\r\n            if (this._streaming) {\r\n                this._polylinesLast.push(...val.slice(0));\r\n                this._polylines.push(...val);\r\n            }\r\n            else {\r\n                this._polylines = val.slice(0);\r\n            }\r\n        }\r\n\r\n    /**\r\n     * Whether to show the polylines titles as the labels on the polylines.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    @Input() public ShowLabels: boolean = false;\r\n\r\n    /**\r\n     * Whether to show the titles of the polylines as the tooltips on the polylines.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    @Input() public ShowTooltips: boolean = true;\r\n\r\n    /**\r\n     * Sets whether to treat changes in the PolylineOptions as streams of new markers. In this mode, changing the\r\n     * Array supplied in PolylineOptions will be incrementally drawn on the map as opposed to replace the polylines on the map.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    @Input()\r\n        public get TreatNewPolylineOptionsAsStream(): boolean { return this._streaming; }\r\n        public set TreatNewPolylineOptionsAsStream(val: boolean) { this._streaming = val; }\r\n\r\n    /**\r\n     * Sets the visibility of the marker layer\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    @Input() public Visible: boolean;\r\n\r\n    /**\r\n     * Gets or sets the z-index of the layer. If not used, layers get stacked in the order created.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    @Input() public ZIndex: number = 0;\r\n\r\n    ///\r\n    /// Delegates\r\n    ///\r\n\r\n    /**\r\n     * This event emitter gets emitted when the user clicks a polyline in the layer.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    @Output() public PolylineClick: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n    /**\r\n     * This event is fired when the DOM dblclick event is fired on a polyline in the layer.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    @Output() PolylineDblClick: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n    /**\r\n     * This event is fired when the DOM mousemove event is fired on a polyline in the layer.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    @Output() PolylineMouseMove: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n    /**\r\n     * This event is fired on mouseout on a polyline in the layer.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    @Output() PolylineMouseOut: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n    /**\r\n     * This event is fired on mouseover on a polyline in a layer.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    @Output() PolylineMouseOver: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\r\n\r\n\r\n\r\n    ///\r\n    /// Property declarations\r\n    ///\r\n\r\n    /**\r\n     * Gets the id of the polyline layer.\r\n     *\r\n     * @readonly\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    public get Id(): number { return this._id; }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of MapPolylineLayerDirective.\r\n     * @param _layerService - Concreate implementation of a {@link LayerService}.\r\n     * @param _mapService - Concreate implementation of a {@link MapService}.\r\n     * @param _zone - Concreate implementation of a {@link NgZone} service.\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    constructor(\r\n        private _layerService: LayerService,\r\n        private _mapService: MapService,\r\n        private _zone: NgZone) {\r\n        this._id = layerId++;\r\n    }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Called after Component content initialization. Part of ng Component life cycle.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    public ngAfterContentInit() {\r\n        const layerOptions: ILayerOptions = {\r\n            id: this._id\r\n        };\r\n        this._zone.runOutsideAngular(() => {\r\n            const fakeLayerDirective: any = {\r\n                Id : this._id,\r\n                Visible: this.Visible,\r\n                LayerOffset: this.LayerOffset,\r\n                ZIndex: this.ZIndex\r\n            };\r\n            this._layerService.AddLayer(fakeLayerDirective);\r\n            this._layerPromise = this._layerService.GetNativeLayer(fakeLayerDirective);\r\n\r\n            Promise.all([\r\n                    this._layerPromise,\r\n                    this._mapService.CreateCanvasOverlay(el => this.DrawLabels(el))\r\n                ]).then(values => {\r\n                    values[0].SetVisible(this.Visible);\r\n                    this._canvas = values[1];\r\n                    this._canvas._canvasReady.then(b => {\r\n                        this._tooltip = this._canvas.GetToolTipOverlay();\r\n                        this.ManageTooltip(this.ShowTooltips);\r\n                    });\r\n                    if (this.PolylineOptions) {\r\n                        this._zone.runOutsideAngular(() => this.UpdatePolylines());\r\n                    }\r\n                });\r\n            this._service = this._layerService;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    public ngOnDestroy() {\r\n        this._tooltipSubscriptions.forEach(s => s.unsubscribe());\r\n        this._layerPromise.then(l => {\r\n            l.Delete();\r\n        });\r\n        if (this._canvas) { this._canvas.Delete(); }\r\n    }\r\n\r\n    /**\r\n     * Reacts to changes in data-bound properties of the component and actuates property changes in the underling layer model.\r\n     *\r\n     * @param changes - collection of changes.\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    public ngOnChanges(changes: { [key: string]: SimpleChange }) {\r\n        if (changes['PolylineOptions']) {\r\n            this._zone.runOutsideAngular(() => {\r\n                this.UpdatePolylines();\r\n            });\r\n        }\r\n        if (changes['Visible'] && !changes['Visible'].firstChange) {\r\n            this._layerPromise.then(l => l.SetVisible(this.Visible));\r\n        }\r\n        if ((changes['ZIndex'] && !changes['ZIndex'].firstChange) ||\r\n            (changes['LayerOffset'] && !changes['LayerOffset'].firstChange)\r\n        ) {\r\n            throw (new Error('You cannot change ZIndex or LayerOffset after the layer has been created.'));\r\n        }\r\n        if ((changes['ShowLabels'] && !changes['ShowLabels'].firstChange) ||\r\n            (changes['LabelMinZoom'] && !changes['LabelMinZoom'].firstChange) ||\r\n            (changes['LabelMaxZoom'] && !changes['LabelMaxZoom'].firstChange)\r\n        ) {\r\n            if (this._canvas) {\r\n                this._canvas.Redraw(true);\r\n            }\r\n        }\r\n        if (changes['ShowTooltips'] && this._tooltip) {\r\n            this.ManageTooltip(changes['ShowTooltips'].currentValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Obtains a string representation of the Layer Id.\r\n     * @returns - string representation of the layer id.\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    public toString(): string { return 'MapPolylineLayer-' + this._id.toString(); }\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n\r\n    /**\r\n     * Adds various event listeners for the polylines.\r\n     *\r\n     * @param p - the polyline for which to add the event.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    private AddEventListeners(p: Polyline): void {\r\n        const handlers = [\r\n            { name: 'click', handler: (ev: MouseEvent) => this.PolylineClick.emit({Polyline: p, Click: ev}) },\r\n            { name: 'dblclick', handler: (ev: MouseEvent) => this.PolylineDblClick.emit({Polyline: p, Click: ev}) },\r\n            { name: 'mousemove', handler: (ev: MouseEvent) => this.PolylineMouseMove.emit({Polyline: p, Click: ev}) },\r\n            { name: 'mouseout', handler: (ev: MouseEvent) => this.PolylineMouseOut.emit({Polyline: p, Click: ev}) },\r\n            { name: 'mouseover', handler: (ev: MouseEvent) => this.PolylineMouseOver.emit({Polyline: p, Click: ev}) }\r\n        ];\r\n        handlers.forEach((obj) => p.AddListener(obj.name, obj.handler));\r\n    }\r\n\r\n    /**\r\n     * Draws the polyline labels. Called by the Canvas overlay.\r\n     *\r\n     * @param el - The canvas on which to draw the labels.\r\n     * @memberof MapPolylineLayerDirective\r\n     */\r\n    private DrawLabels(el: HTMLCanvasElement): void {\r\n        if (this.ShowLabels) {\r\n            this._mapService.GetZoom().then(z => {\r\n                if (this.LabelMinZoom <= z && this.LabelMaxZoom >= z) {\r\n                    const ctx: CanvasRenderingContext2D = el.getContext('2d');\r\n                    const labels = this._labels.map(x => x.title);\r\n                    this._mapService.LocationsToPoints(this._labels.map(x => x.loc)).then(locs => {\r\n                        const size: ISize = this._mapService.MapSize;\r\n                        for (let i = 0, len = locs.length; i < len; i++) {\r\n                            // Don't draw the point if it is not in view. This greatly improves performance when zoomed in.\r\n                            if (locs[i].x >= 0 && locs[i].y >= 0 && locs[i].x <= size.width && locs[i].y <= size.height) {\r\n                                this.DrawText(ctx, locs[i], labels[i]);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws the label text at the appropriate place on the canvas.\r\n     * @param ctx - Canvas drawing context.\r\n     * @param loc - Pixel location on the canvas where to center the text.\r\n     * @param text - Text to draw.\r\n     */\r\n    private DrawText(ctx: CanvasRenderingContext2D, loc: IPoint, text: string) {\r\n        let lo: ILabelOptions = this.LabelOptions;\r\n        if (lo == null && this._tooltip) { lo = this._tooltip.DefaultLabelStyle; }\r\n        if (lo == null) { lo = this._defaultOptions; }\r\n\r\n        ctx.strokeStyle = lo.strokeColor;\r\n        ctx.font = `${lo.fontSize}px ${lo.fontFamily}`;\r\n        ctx.textAlign = 'center';\r\n        const strokeWeight: number = lo.strokeWeight;\r\n        if (text && strokeWeight && strokeWeight > 0) {\r\n                ctx.lineWidth = strokeWeight;\r\n                ctx.strokeText(text, loc.x, loc.y);\r\n        }\r\n        ctx.fillStyle = lo.fontColor;\r\n        ctx.fillText(text, loc.x, loc.y);\r\n    }\r\n\r\n    /**\r\n     * Manages the tooltip and the attachment of the associated events.\r\n     *\r\n     * @param show - True to enable the tooltip, false to disable.\r\n     * @memberof MapPolygonLayerDirective\r\n     */\r\n    private ManageTooltip(show: boolean): void {\r\n        if (show && this._canvas) {\r\n            // add tooltip subscriptions\r\n            this._tooltip.Set('hidden', true);\r\n            this._tooltipVisible = false;\r\n            this._tooltipSubscriptions.push(this.PolylineMouseMove.asObservable().subscribe(e => {\r\n                if (this._tooltipVisible) {\r\n                    const loc: ILatLong = this._canvas.GetCoordinatesFromClick(e.Click);\r\n                    this._tooltip.Set('position', loc);\r\n                }\r\n            }));\r\n            this._tooltipSubscriptions.push(this.PolylineMouseOver.asObservable().subscribe(e => {\r\n                if (e.Polyline.Title && e.Polyline.Title.length > 0) {\r\n                    const loc: ILatLong = this._canvas.GetCoordinatesFromClick(e.Click);\r\n                    this._tooltip.Set('text', e.Polyline.Title);\r\n                    this._tooltip.Set('position', loc);\r\n                    if (!this._tooltipVisible) {\r\n                        this._tooltip.Set('hidden', false);\r\n                        this._tooltipVisible = true;\r\n                    }\r\n                }\r\n            }));\r\n            this._tooltipSubscriptions.push(this.PolylineMouseOut.asObservable().subscribe(e => {\r\n                if (this._tooltipVisible) {\r\n                    this._tooltip.Set('hidden', true);\r\n                    this._tooltipVisible = false;\r\n                }\r\n            }));\r\n        }\r\n        else {\r\n            // remove tooltip subscriptions\r\n            this._tooltipSubscriptions.forEach(s => s.unsubscribe());\r\n            this._tooltipSubscriptions.splice(0);\r\n            this._tooltip.Set('hidden', true);\r\n            this._tooltipVisible = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets or updates the polyliness based on the polyline options. This will place the polylines on the map\r\n     * and register the associated events.\r\n     *\r\n     * @memberof MapPolylineLayerDirective\r\n     * @method\r\n     */\r\n    private UpdatePolylines(): void {\r\n        if (this._layerPromise == null) {\r\n            return;\r\n        }\r\n        this._layerPromise.then(l => {\r\n            const polylines: Array<IPolylineOptions> = this._streaming ? this._polylinesLast.splice(0) : this._polylines;\r\n            if (!this._streaming) { this._labels.splice(0); }\r\n\r\n            // generate the promise for the polylines\r\n            const lp: Promise<Array<Polyline|Array<Polyline>>> = this._service.CreatePolylines(l.GetOptions().id, polylines);\r\n\r\n            // set polylines once promises are fullfilled.\r\n            lp.then(p => {\r\n                const y: Array<Polyline> = new Array<Polyline>();\r\n                p.forEach(poly => {\r\n                    if (Array.isArray(poly)) {\r\n                        let title: string = '';\r\n                        const centroids: Array<ILatLong> = new Array<ILatLong>();\r\n                        poly.forEach(x => {\r\n                            y.push(x);\r\n                            this.AddEventListeners(x);\r\n                            centroids.push(x.Centroid);\r\n                            if (x.Title != null && x.Title.length > 0 && title.length === 0) { title = x.Title; }\r\n                        });\r\n                        this._labels.push({loc: Polyline.GetPolylineCentroid(centroids), title: title});\r\n                    }\r\n                    else {\r\n                        y.push(poly);\r\n                        if (poly.Title != null && poly.Title.length > 0) { this._labels.push({loc: poly.Centroid, title: poly.Title}); }\r\n                        this.AddEventListeners(poly);\r\n                    }\r\n                });\r\n                this._streaming ? l.AddEntities(y) : l.SetEntities(y);\r\n                if (this._canvas) { this._canvas.Redraw(!this._streaming); }\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Abstract implementation. USed for defintion only and as a base to implement your\r\n * own provider.\r\n *\r\n * @export\r\n * @abstract\r\n */\r\n@Injectable()\r\nexport abstract class MapAPILoader {\r\n\r\n    /**\r\n     * Loads the necessary resources for a given map architecture.\r\n     *\r\n     * @abstract\r\n     * @returns - Promise fullfilled when the resources have been loaded.\r\n     *\r\n     * @memberof MapAPILoader\r\n     */\r\n    abstract Load(): Promise<void>;\r\n\r\n}\r\n\r\n/**\r\n * Document Reference service to assist with abstracting the availability of document. Needed for AOT and\r\n * Server Side rendering\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class DocumentRef {\r\n\r\n    /**\r\n     * Gets whether a document implementation is available. Generally will be true in the browser and false otherwise, unless there\r\n     * there is a browser-less implementation in the current non-browser environment.\r\n     *\r\n     * @readonly\r\n     * @memberof DocumentRef\r\n     */\r\n    public get IsAvailable(): boolean {\r\n        return !(typeof (document) === 'undefined');\r\n    }\r\n\r\n    /**\r\n     * Returns the document object of the current environment.\r\n     *\r\n     * @returns - The document object.\r\n     *\r\n     * @memberof DocumentRef\r\n     */\r\n    public GetNativeDocument(): any {\r\n        if (typeof (document) === 'undefined') {\r\n            return null;\r\n        }\r\n        return document;\r\n    }\r\n}\r\n\r\n/**\r\n * Window Reference service to assist with abstracting the availability of window. Needed for AOT and\r\n * Server Side rendering\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class WindowRef {\r\n\r\n    /**\r\n     * Gets whether a window implementation is available. Generally will be true in the browser and false otherwise, unless there\r\n     * there is a browser-less implementation in the current non-browser environment.\r\n     *\r\n     * @readonly\r\n     * @memberof WindowRef\r\n     */\r\n    public get IsAvailable(): boolean {\r\n        return !(typeof (window) === 'undefined');\r\n    }\r\n\r\n    /**\r\n     * Returns the window object of the current environment.\r\n     *\r\n     * @returns - The window object.\r\n     *\r\n     * @memberof WindowRef\r\n     */\r\n    public GetNativeWindow(): any {\r\n        if (typeof (window) === 'undefined') {\r\n            return null;\r\n        }\r\n        return window;\r\n    }\r\n}\r\n\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { MapAPILoader, WindowRef, DocumentRef } from '../mapapiloader';\r\n\r\n/**\r\n * Protocol enumeration\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nexport enum ScriptProtocol {\r\n    HTTP,\r\n    HTTPS,\r\n    AUTO\r\n}\r\n\r\n/**\r\n * Bing Maps V8 specific loader configuration to be used with the {@link BingMapAPILoader}\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class BingMapAPILoaderConfig  {\r\n\r\n    ///\r\n    /// API key for bing maps\r\n    ///\r\n    apiKey = '';\r\n\r\n    ///\r\n    /// Host and Path used for the `<script>` tag.\r\n    ///\r\n    hostAndPath = 'www.bing.com/api/maps/mapcontrol';\r\n\r\n    ///\r\n    /// Protocol used for the `<script>` tag.\r\n    ///\r\n    protocol: ScriptProtocol = ScriptProtocol.HTTPS;\r\n\r\n    ///\r\n    /// The branch to be used. Leave empty for production. Use experimental\r\n    ///\r\n    branch = '';\r\n}\r\n\r\n/**\r\n * Default loader configuration.\r\n */\r\nconst DEFAULT_CONFIGURATION = new BingMapAPILoaderConfig();\r\n\r\n/**\r\n * Bing Maps V8 implementation for the {@link MapAPILoader} service.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class BingMapAPILoader extends MapAPILoader {\r\n\r\n    ///\r\n    /// Field defintitions.\r\n    ///\r\n    private _scriptLoadingPromise: Promise<void>;\r\n\r\n    ///\r\n    /// Property declarations.\r\n    ///\r\n\r\n    /**\r\n     * Gets the loader configuration.\r\n     *\r\n     * @readonly\r\n     * @memberof BingMapAPILoader\r\n     */\r\n    public get Config(): BingMapAPILoaderConfig { return this._config; }\r\n\r\n    /**\r\n     * Creates an instance of BingMapAPILoader.\r\n     * @param _config  - The loader configuration.\r\n     * @param _windowRef - An instance of {@link WindowRef}. Necessary because Bing Map V8 interacts with the window object.\r\n     * @param _documentRef - An instance of {@link DocumentRef}.\r\n     * Necessary because Bing Map V8 interacts with the document object.\r\n     *\r\n     * @memberof BingMapAPILoader\r\n     */\r\n    constructor( @Optional() private _config: BingMapAPILoaderConfig, private _windowRef: WindowRef, private _documentRef: DocumentRef) {\r\n        super();\r\n        if (this._config === null || this._config === undefined) {\r\n            this._config = DEFAULT_CONFIGURATION;\r\n        }\r\n    }\r\n\r\n    ///\r\n    /// Public methods and MapAPILoader implementation.\r\n    ///\r\n\r\n    /**\r\n     * Loads the necessary resources for Bing Maps V8.\r\n     *\r\n     * @memberof BingMapAPILoader\r\n     */\r\n    public Load(): Promise<void> {\r\n        if (this._scriptLoadingPromise) {\r\n            return this._scriptLoadingPromise;\r\n        }\r\n\r\n        const script = this._documentRef.GetNativeDocument().createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.async = true;\r\n        script.defer = true;\r\n        const callbackName = `angular2bingmaps${new Date().getMilliseconds()}`;\r\n        script.src = this.GetScriptSrc(callbackName);\r\n\r\n        this._scriptLoadingPromise = new Promise<void>((resolve: Function, reject: Function) => {\r\n            (<any>this._windowRef.GetNativeWindow())[callbackName] = () => {\r\n                resolve();\r\n            };\r\n            script.onerror = (error: Event) => { reject(error); };\r\n        });\r\n        this._documentRef.GetNativeDocument().head.appendChild(script);\r\n        return this._scriptLoadingPromise;\r\n    }\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n\r\n    /**\r\n     * Gets the Bing Map V8 scripts url for injections into the header.\r\n     *\r\n     * @param callbackName - Name of the function to be called when the Bing Maps V8 scripts are loaded.\r\n     * @returns - The url to be used to load the Bing Map scripts.\r\n     *\r\n     * @memberof BingMapAPILoader\r\n     */\r\n    private GetScriptSrc(callbackName: string): string {\r\n        const protocolType: ScriptProtocol = (this._config && this._config.protocol) || DEFAULT_CONFIGURATION.protocol;\r\n        let protocol: string;\r\n\r\n        switch (protocolType) {\r\n            case ScriptProtocol.AUTO:\r\n                protocol = '';\r\n                break;\r\n            case ScriptProtocol.HTTP:\r\n                protocol = 'http:';\r\n                break;\r\n            case ScriptProtocol.HTTPS:\r\n                protocol = 'https:';\r\n                break;\r\n        }\r\n\r\n        const hostAndPath: string = this._config.hostAndPath || DEFAULT_CONFIGURATION.hostAndPath;\r\n        const queryParams: { [key: string]: string } = {\r\n            callback: callbackName\r\n        };\r\n        if (this._config.branch !== '') {\r\n            queryParams['branch'] = this._config.branch;\r\n        }\r\n        const params: string = Object.keys(queryParams)\r\n            .map((k: string, i: number) => {\r\n                let param = (i === 0) ? '?' : '&';\r\n                return param += `${k}=${queryParams[k]}`;\r\n            })\r\n            .join('');\r\n        return `${protocol}//${hostAndPath}${params}`;\r\n    }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { InfoWindow } from '../../models/info-window';\r\nimport { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\r\nimport { ILatLong } from '../../interfaces/ilatlong';\r\nimport { InfoBoxActionDirective } from '../../components/infobox-action';\r\nimport { InfoBoxService } from '../infobox.service';\r\nimport { MapService } from '../../services/map.service';\r\nimport { InfoBoxComponent } from '../../components/infobox';\r\nimport { BingMapService } from './bing-map.service';\r\nimport { BingInfoWindow } from '../../models/bing/bing-info-window';\r\nimport { BingMapEventsLookup } from '../../models/bing/bing-events-lookup';\r\n\r\n/**\r\n * Concrete implementation of the {@link InfoBoxService} contract for the Bing Maps V8 architecture.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class BingInfoBoxService implements InfoBoxService {\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _boxes: Map<InfoBoxComponent, Promise<InfoWindow>> = new Map<InfoBoxComponent, Promise<InfoWindow>>();\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of BingInfoBoxService.\r\n     * @param _mapService - Concrete {@link MapService} implementation for Bing Maps V8. An instance of {@link BingMapService}.\r\n     * @param _zone - An instance of NgZone to provide zone aware promises.\r\n     *\r\n     * @memberof BingInfoBoxService\r\n     */\r\n    constructor(private _mapService: MapService, private _zone: NgZone) { }\r\n\r\n    /**\r\n     * Adds an info window to the map or layer.\r\n     *\r\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\r\n     *\r\n     * @memberof BingInfoBoxService\r\n     */\r\n    public AddInfoWindow(info: InfoBoxComponent): void {\r\n        const options: IInfoWindowOptions = {};\r\n        if (typeof info.Latitude === 'number' && typeof info.Longitude === 'number') {\r\n            options.position = {\r\n                latitude: info.Latitude,\r\n                longitude: info.Longitude\r\n            };\r\n        }\r\n        if (typeof info.InfoWindowActions !== 'undefined' && info.InfoWindowActions.length > 0) {\r\n            options.actions = [];\r\n            info.InfoWindowActions.forEach((action: InfoBoxActionDirective) => {\r\n                options.actions.push({\r\n                    label: action.Label,\r\n                    eventHandler: () => { action.ActionClicked.emit(null); }\r\n                });\r\n            });\r\n        }\r\n        if (info.HtmlContent !== '') {\r\n            options.htmlContent = info.HtmlContent;\r\n        }\r\n        else {\r\n            options.title = info.Title;\r\n            options.description = info.Description;\r\n        }\r\n        if (info.xOffset || info.yOffset) {\r\n            if (options.pixelOffset == null) { options.pixelOffset = { x: 0, y: 0 }; }\r\n            if (info.xOffset) { options.pixelOffset.x = info.xOffset; }\r\n            if (info.yOffset) { options.pixelOffset.y = info.yOffset; }\r\n        }\r\n\r\n        options.visible = info.Visible;\r\n        const infoPromise = this._mapService.CreateInfoWindow(options);\r\n        this._boxes.set(info, infoPromise);\r\n    }\r\n\r\n    /**\r\n     * Closes an InfoBoxComponent that is open.\r\n     *\r\n     * @abstract\r\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\r\n     * @returns - A promise that is fullfilled when the infobox has been closed.\r\n     *\r\n     * @memberof InfoBoxService\r\n     */\r\n    public Close(info: InfoBoxComponent): Promise<void> {\r\n        return this._boxes.get(info).then((w) => w.Close());\r\n    }\r\n\r\n    /**\r\n     * Registers an event delegate for an info window.\r\n     *\r\n     * @param eventName - The name of the event to register (e.g. 'click')\r\n     * @param infoComponent - The {@link InfoBoxComponent} for which to register the event.\r\n     * @returns - Observable emiting an instance of T each time the event occurs.\r\n     *\r\n     * @memberof GoogleInfoBoxService\r\n     */\r\n    public CreateEventObservable<T>(eventName: string, infoComponent: InfoBoxComponent): Observable<T> {\r\n        const eventNameTranslated = BingMapEventsLookup[eventName];\r\n        return Observable.create((observer: Observer<T>) => {\r\n            this._boxes.get(infoComponent).then((b: InfoWindow) => {\r\n                b.AddListener(eventNameTranslated, (e: T) => this._zone.run(() => observer.next(e)));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes an infobox.\r\n     *\r\n     * @abstract\r\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\r\n     * @returns - A promise that is fullfilled when the infobox has been deleted.\r\n     *\r\n     * @memberof InfoBoxService\r\n     */\r\n    public DeleteInfoWindow(info: InfoBoxComponent): Promise<void> {\r\n        const w = this._boxes.get(info);\r\n        if (w == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return w.then((i: InfoWindow) => {\r\n            return this._zone.run(() => {\r\n                i.Close();\r\n                this._boxes.delete(info);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Opens an infobox that is closed.\r\n     *\r\n     * @abstract\r\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\r\n     * @returns - A promise that is fullfilled when the infobox has been opened.\r\n     *\r\n     * @memberof InfoBoxService\r\n     */\r\n    public Open(info: InfoBoxComponent, loc?: ILatLong): Promise<void> {\r\n        if (info.CloseInfoBoxesOnOpen || info.Modal) {\r\n            // close all open info boxes.\r\n            this._boxes.forEach((v: Promise<InfoWindow>, i: InfoBoxComponent) => {\r\n                if (info.Id !== i.Id) {\r\n                    v.then(w => {\r\n                        if (w.IsOpen) {\r\n                            w.Close();\r\n                            i.Close();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        return this._boxes.get(info).then((w) => {\r\n            const options: IInfoWindowOptions = {};\r\n            if (info.HtmlContent !== '') {\r\n                options.htmlContent = info.HtmlContent;\r\n            }\r\n            else {\r\n                options.title = info.Title;\r\n                options.description = info.Description;\r\n            }\r\n            w.SetOptions(options);\r\n\r\n            if (info.Latitude && info.Longitude) {\r\n                w.SetPosition({ latitude: info.Latitude, longitude: info.Longitude });\r\n            }\r\n            else if (loc) {\r\n                ///\r\n                /// this situation is specifically used for cluster layers that use spidering.\r\n                ///\r\n                w.SetPosition(loc);\r\n            }\r\n            else if (info.HostMarker) {\r\n                w.SetPosition({ latitude: info.HostMarker.Latitude, longitude: info.HostMarker.Longitude });\r\n            }\r\n            w.Open();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the infobox options.\r\n     *\r\n     * @abstract\r\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\r\n     * @param options - {@link IInfoWindowOptions} object containing the options to set. Options provided are\r\n     * merged with the existing options of the underlying infobox.\r\n     * @returns - A promise that is fullfilled when the infobox options have been updated.\r\n     *\r\n     * @memberof InfoBoxService\r\n     */\r\n    public SetOptions(info: InfoBoxComponent, options: IInfoWindowOptions): Promise<void> {\r\n        return this._boxes.get(info).then((i: InfoWindow) => i.SetOptions(options));\r\n    }\r\n\r\n    /**\r\n     * Set the position of the infobox based on the properties set on the InfoBox component.\r\n     *\r\n     * @abstract\r\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\r\n     * @returns - A promise that is fullfilled when the infobox position has been updated.\r\n     *\r\n     * @memberof InfoBoxService\r\n     */\r\n    public SetPosition(info: InfoBoxComponent): Promise<void> {\r\n        return this._boxes.get(info).then((i: InfoWindow) => i.SetPosition({\r\n            latitude: info.Latitude,\r\n            longitude: info.Longitude\r\n        }));\r\n    }\r\n\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, Observer, Subject } from 'rxjs';\r\nimport { ILatLong } from '../../interfaces/ilatlong';\r\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\r\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\r\nimport { IPoint } from '../../interfaces/ipoint';\r\nimport { MapMarkerDirective } from '../../components/map-marker';\r\nimport { MarkerService } from '../../services/marker.service';\r\nimport { MapService } from '../../services/map.service';\r\nimport { LayerService } from '../../services/layer.service';\r\nimport { ClusterService } from '../../services/cluster.service';\r\nimport { Marker } from '../../models/marker';\r\nimport { BingMapService } from './bing-map.service';\r\nimport { BingConversions } from './bing-conversions';\r\n\r\n/**\r\n * Concrete implementation of the MarkerService abstract class for Bing Maps V8.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class BingMarkerService implements MarkerService {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _markers: Map<MapMarkerDirective, Promise<Marker>> = new Map<MapMarkerDirective, Promise<Marker>>();\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of BingMarkerService.\r\n     * @param _mapService - {@link MapService} instance. The concrete {@link BingMapService} implementation is expected.\r\n     * @param _layerService - {@link LayerService} instance.\r\n     * The concrete {@link BingLayerService} implementation is expected.\r\n     * @param _clusterService - {@link ClusterService} instance.\r\n     * The concrete {@link BingClusterService} implementation is expected.\r\n     * @param _zone - NgZone instance to support zone aware promises.\r\n     *\r\n     * @memberof BingMarkerService\r\n     */\r\n    constructor(private _mapService: MapService,\r\n                private _layerService: LayerService,\r\n                private _clusterService: ClusterService,\r\n                private _zone: NgZone) {\r\n    }\r\n\r\n    ///\r\n    /// Public members and MarkerService implementation\r\n    ///\r\n\r\n    /**\r\n     * Adds a marker. Depending on the marker context, the marker will either by added to the map or a correcsponding layer.\r\n     *\r\n     * @param marker - The {@link MapMarkerDirective} to be added.\r\n     *\r\n     * @memberof BingMarkerService\r\n     */\r\n    public AddMarker(marker: MapMarkerDirective): void {\r\n        const o: IMarkerOptions = {\r\n            position: { latitude: marker.Latitude, longitude: marker.Longitude },\r\n            title: marker.Title,\r\n            label: marker.Label,\r\n            draggable: marker.Draggable,\r\n            icon: marker.IconUrl,\r\n            iconInfo: marker.IconInfo,\r\n            isFirst: marker.IsFirstInSet,\r\n            isLast: marker.IsLastInSet\r\n        };\r\n        if (marker.Width) { o.width = marker.Width; }\r\n        if (marker.Height) { o.height = marker.Height; }\r\n        if (marker.Anchor) { o.anchor = marker.Anchor; }\r\n        if (marker.Metadata) { o.metadata = marker.Metadata; }\r\n\r\n        // create marker via promise.\r\n        let markerPromise: Promise<Marker> = null;\r\n        if (marker.InClusterLayer) {\r\n            markerPromise = this._clusterService.CreateMarker(marker.LayerId, o);\r\n        }\r\n        else if (marker.InCustomLayer) {\r\n            markerPromise = this._layerService.CreateMarker(marker.LayerId, o);\r\n        }\r\n        else {\r\n            markerPromise = this._mapService.CreateMarker(o);\r\n        }\r\n\r\n        this._markers.set(marker, markerPromise);\r\n        if (marker.IconInfo) {\r\n            markerPromise.then((m: Marker) => {\r\n                // update iconInfo to provide hook to do post icon creation activities and\r\n                // also re-anchor the marker\r\n                marker.DynamicMarkerCreated.emit(o.iconInfo);\r\n                const p: IPoint = {\r\n                    x: (o.iconInfo.size && o.iconInfo.markerOffsetRatio) ? (o.iconInfo.size.width * o.iconInfo.markerOffsetRatio.x) : 0,\r\n                    y: (o.iconInfo.size && o.iconInfo.markerOffsetRatio) ? (o.iconInfo.size.height * o.iconInfo.markerOffsetRatio.y) : 0,\r\n                };\r\n                m.SetAnchor(p);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Registers an event delegate for a marker.\r\n     *\r\n     * @param eventName - The name of the event to register (e.g. 'click')\r\n     * @param marker - The {@link MapMarker} for which to register the event.\r\n     * @returns - Observable emiting an instance of T each time the event occurs.\r\n     *\r\n     * @memberof BingMarkerService\r\n     */\r\n    public CreateEventObservable<T>(eventName: string, marker: MapMarkerDirective): Observable<T> {\r\n        const b: Subject<T> = new Subject<T>();\r\n        if (eventName === 'mousemove') {\r\n            return b.asObservable();\r\n        }\r\n        if (eventName === 'rightclick') {\r\n            return b.asObservable();\r\n        }\r\n        ///\r\n        /// mousemove and rightclick are not supported by bing polygons.\r\n        ///\r\n\r\n\r\n        return Observable.create((observer: Observer<T>) => {\r\n            this._markers.get(marker).then((m: Marker) => {\r\n                m.AddListener(eventName, (e: T) => this._zone.run(() =>\r\n                    observer.next(e)));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes a marker.\r\n     *\r\n     * @param marker - {@link MapMarker} to be deleted.\r\n     * @returns - A promise fullfilled once the marker has been deleted.\r\n     *\r\n     * @memberof BingMarkerService\r\n     */\r\n    public DeleteMarker(marker: MapMarkerDirective): Promise<void> {\r\n        const m = this._markers.get(marker);\r\n        let p: Promise<void> = Promise.resolve();\r\n        if (m != null) {\r\n            p = m.then((ma: Marker) => {\r\n                if (marker.InClusterLayer) {\r\n                    this._clusterService.GetNativeLayer(marker.LayerId).then(l => { l.RemoveEntity(ma); });\r\n                }\r\n                if (marker.InCustomLayer) {\r\n                    this._layerService.GetNativeLayer(marker.LayerId).then(l => { l.RemoveEntity(ma); });\r\n                }\r\n                return this._zone.run(() => {\r\n                    ma.DeleteMarker();\r\n                    this._markers.delete(marker);\r\n                });\r\n            });\r\n        }\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Obtains geo coordinates for the marker on the click location\r\n     *\r\n     * @param e - The mouse event.\r\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\r\n     *\r\n     * @memberof BingMarkerService\r\n     */\r\n    public GetCoordinatesFromClick(e: MouseEvent | any): ILatLong {\r\n        if (!e) {\r\n            return null;\r\n        }\r\n        if (!e.primitive) {\r\n            return null;\r\n        }\r\n        if (!(e.primitive instanceof Microsoft.Maps.Pushpin)) {\r\n            return null;\r\n        }\r\n        const p: Microsoft.Maps.Pushpin = e.primitive;\r\n        const loc: Microsoft.Maps.Location = p.getLocation();\r\n        return { latitude: loc.latitude, longitude: loc.longitude };\r\n    }\r\n\r\n    /**\r\n     * Obtains the marker model for the marker allowing access to native implementation functionatiliy.\r\n     *\r\n     * @param marker - The {@link MapMarker} for which to obtain the marker model.\r\n     * @returns - A promise that when fullfilled contains the {@link Marker} implementation of the underlying platform.\r\n     *\r\n     * @memberof BingMarkerService\r\n     */\r\n    public GetNativeMarker(marker: MapMarkerDirective): Promise<Marker> {\r\n        return this._markers.get(marker);\r\n    }\r\n\r\n    /**\r\n     * Obtains the marker pixel location for the marker on the click location\r\n     *\r\n     * @param e - The mouse event.\r\n     * @returns - {@link ILatLong} containing the pixels of the marker on the map canvas.\r\n     *\r\n     * @memberof BingMarkerService\r\n     */\r\n    public GetPixelsFromClick(e: MouseEvent | any): IPoint {\r\n        const loc: ILatLong = this.GetCoordinatesFromClick(e);\r\n        if (loc == null) {\r\n            return null;\r\n        }\r\n        const l: Microsoft.Maps.Location = BingConversions.TranslateLocation(loc);\r\n        const p: Microsoft.Maps.Point = <Microsoft.Maps.Point>(<BingMapService>\r\n            this._mapService).MapInstance.tryLocationToPixel(l, Microsoft.Maps.PixelReference.control);\r\n        if (p == null) { return null; }\r\n        return { x: p.x, y: p.y };\r\n    }\r\n\r\n    /**\r\n     * Converts a geo location to a pixel location relative to the map canvas.\r\n     *\r\n     * @param target - Either a {@link MapMarker} or a {@link ILatLong} for the basis of translation.\r\n     * @returns - A promise that when fullfilled contains a {@link IPoint}\r\n     * with the pixel coordinates of the MapMarker or ILatLong relative to the map canvas.\r\n     *\r\n     * @memberof BingMarkerService\r\n     */\r\n    public LocationToPoint(target: MapMarkerDirective | ILatLong): Promise<IPoint> {\r\n        if (target == null) {\r\n            return Promise.resolve(null);\r\n        }\r\n        if (target instanceof MapMarkerDirective) {\r\n            return this._markers.get(target).then((m: Marker) => {\r\n                const l: ILatLong = m.Location;\r\n                const p: Promise<IPoint> = this._mapService.LocationToPoint(l);\r\n                return p;\r\n            });\r\n        }\r\n        return this._mapService.LocationToPoint(target);\r\n    }\r\n\r\n    /**\r\n     * Updates the anchor position for the marker.\r\n     *\r\n     * @param - The {@link MapMarker} object for which to upate the anchor.\r\n     * Anchor information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the anchor position has been updated.\r\n     *\r\n     * @memberof BingMarkerService\r\n     */\r\n    public UpdateAnchor(marker: MapMarkerDirective): Promise<void> {\r\n        return this._markers.get(marker).then((m: Marker) => {\r\n            m.SetAnchor(marker.Anchor);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates whether the marker is draggable.\r\n     *\r\n     * @param - The {@link MapMarker} object for which to upate dragability.\r\n     * Dragability information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the marker has been updated.\r\n     *\r\n     * @memberof BingMarkerService\r\n     */\r\n    public UpdateDraggable(marker: MapMarkerDirective): Promise<void> {\r\n        return this._markers.get(marker).then((m: Marker) => m.SetDraggable(marker.Draggable));\r\n    }\r\n\r\n    /**\r\n     * Updates the Icon on the marker.\r\n     *\r\n     * @param - The {@link MapMarker} object for which to upate the icon.\r\n     * Icon information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the icon information has been updated.\r\n     *\r\n     * @memberof BingMarkerService\r\n     */\r\n    public UpdateIcon(marker: MapMarkerDirective): Promise<void> {\r\n        const payload = (m: Marker, icon: string, iconInfo: IMarkerIconInfo) => {\r\n            if (icon && icon !== '') {\r\n                m.SetIcon(icon);\r\n                marker.DynamicMarkerCreated.emit(iconInfo);\r\n            }\r\n        };\r\n        return this._markers.get(marker).then((m: Marker) => {\r\n            if (marker.IconInfo) {\r\n                const s = Marker.CreateMarker(marker.IconInfo);\r\n                if (typeof(s) === 'string') { return(payload(m, s, marker.IconInfo)); }\r\n                else {\r\n                    return s.then(x => {\r\n                        return(payload(m, x.icon, x.iconInfo));\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                return(m.SetIcon(marker.IconUrl));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the label on the marker.\r\n     *\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the label.\r\n     * Label information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the label has been updated.\r\n     *\r\n     * @memberof BingMarkerService\r\n     */\r\n    public UpdateLabel(marker: MapMarkerDirective): Promise<void> {\r\n        return this._markers.get(marker).then((m: Marker) => { m.SetLabel(marker.Label); });\r\n    }\r\n\r\n    /**\r\n     * Updates the geo coordinates for the marker.\r\n     *\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the coordinates.\r\n     * Coordinate information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the position has been updated.\r\n     *\r\n     * @memberof BingMarkerService\r\n     */\r\n    public UpdateMarkerPosition(marker: MapMarkerDirective): Promise<void> {\r\n        return this._markers.get(marker).then(\r\n            (m: Marker) => m.SetPosition({\r\n                latitude: marker.Latitude,\r\n                longitude: marker.Longitude\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Updates the title on the marker.\r\n     *\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the title.\r\n     * Title information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the title has been updated.\r\n     *\r\n     * @memberof BingMarkerService\r\n     */\r\n    public UpdateTitle(marker: MapMarkerDirective): Promise<void> {\r\n        return this._markers.get(marker).then((m: Marker) => m.SetTitle(marker.Title));\r\n    }\r\n\r\n    /**\r\n     * Updates the visibility on the marker.\r\n     *\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the visiblity.\r\n     * Visibility information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the visibility has been updated.\r\n     *\r\n     * @memberof BingMarkerService\r\n     */\r\n    public UpdateVisible(marker: MapMarkerDirective): Promise<void> {\r\n        return this._markers.get(marker).then((m: Marker) => m.SetVisible(marker.Visible));\r\n    }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { Observer, Observable } from 'rxjs';\r\n\r\nimport { MapService } from '../map.service';\r\nimport { MapAPILoader } from '../mapapiloader';\r\nimport { BingMapAPILoader, BingMapAPILoaderConfig } from './bing-map.api-loader.service';\r\nimport { BingConversions } from './bing-conversions';\r\nimport { Marker } from '../../models/marker';\r\nimport { Polygon } from '../../models/polygon';\r\nimport { Polyline } from '../../models/polyline';\r\nimport { MarkerTypeId } from '../../models/marker-type-id';\r\nimport { InfoWindow } from '../../models/info-window';\r\nimport { BingMarker } from '../../models/bing/bing-marker';\r\nimport { Layer } from '../../models/layer';\r\nimport { BingLayer } from '../../models/bing/bing-layer';\r\nimport { BingClusterLayer } from '../../models/bing/bing-cluster-layer';\r\nimport { BingInfoWindow } from '../../models/bing/bing-info-window';\r\nimport { BingPolygon } from '../../models/bing/bing-polygon';\r\nimport { BingPolyline } from '../../models/bing/bing-polyline';\r\nimport { MixinMapLabelWithOverlayView } from '../../models/bing/bing-label';\r\nimport { MixinCanvasOverlay } from '../../models/bing/bing-canvas-overlay';\r\nimport { BingCanvasOverlay } from '../../models/bing/bing-canvas-overlay';\r\nimport { CanvasOverlay } from '../../models/canvas-overlay';\r\nimport { ILayerOptions } from '../../interfaces/ilayer-options';\r\nimport { IClusterOptions } from '../../interfaces/icluster-options';\r\nimport { IMapOptions } from '../../interfaces/imap-options';\r\nimport { ILatLong } from '../../interfaces/ilatlong';\r\nimport { IPoint } from '../../interfaces/ipoint';\r\nimport { ISize } from '../../interfaces/isize';\r\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\r\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\r\nimport { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\r\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\r\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\r\nimport { IBox } from '../../interfaces/ibox';\r\n\r\nimport { BingMapEventsLookup } from '../../models/bing/bing-events-lookup';\r\n\r\n/**\r\n * Concrete implementation of the MapService abstract implementing a Bin Map V8 provider\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class BingMapService implements MapService {\r\n    ///\r\n    /// Field Declarations\r\n    ///\r\n\r\n    private _map: Promise<Microsoft.Maps.Map>;\r\n    private _mapInstance: Microsoft.Maps.Map;\r\n    private _mapResolver: (value?: Microsoft.Maps.Map) => void;\r\n    private _config: BingMapAPILoaderConfig;\r\n    private _modules: Map<string, Object> = new Map<string, Object>();\r\n\r\n    ///\r\n    /// Property Definitions\r\n    ///\r\n\r\n    /**\r\n     * Gets an array of loaded Bong modules.\r\n     *\r\n     * @readonly\r\n     * @memberof BingMapService\r\n     */\r\n    public get LoadedModules(): Map<string, Object> { return this._modules; }\r\n\r\n    /**\r\n     * Gets the Bing Map control instance underlying the implementation\r\n     *\r\n     * @readonly\r\n     * @memberof BingMapService\r\n     */\r\n    public get MapInstance(): Microsoft.Maps.Map { return this._mapInstance; }\r\n\r\n    /**\r\n     * Gets a Promise for a Bing Map control instance underlying the implementation. Use this instead of {@link MapInstance} if you\r\n     * are not sure if and when the instance will be created.\r\n     * @readonly\r\n     * @memberof BingMapService\r\n     */\r\n    public get MapPromise(): Promise<Microsoft.Maps.Map> { return this._map; }\r\n\r\n    /**\r\n     * Gets the maps physical size.\r\n     *\r\n     * @readonly\r\n     * @abstract\r\n     * @memberof BingMapService\r\n     */\r\n    public get MapSize(): ISize {\r\n        if (this.MapInstance) {\r\n            const s: ISize = { width: this.MapInstance.getWidth(), height: this.MapInstance.getHeight() };\r\n            return s;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of BingMapService.\r\n     * @param _loader MapAPILoader instance implemented for Bing Maps. This instance will generally be injected.\r\n     * @param _zone NgZone object to enable zone aware promises. This will generally be injected.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    constructor(private _loader: MapAPILoader, private _zone: NgZone) {\r\n        this._map = new Promise<Microsoft.Maps.Map>((resolve: () => void) => { this._mapResolver = resolve; });\r\n        this._config = (<BingMapAPILoader>this._loader).Config;\r\n    }\r\n\r\n    ///\r\n    /// Public methods and MapService interface implementation\r\n    ///\r\n\r\n    /**\r\n     * Creates a canvas overlay layer to perform custom drawing over the map with out\r\n     * some of the overhead associated with going through the Map objects.\r\n     * @param drawCallback A callback function that is triggered when the canvas is ready to be\r\n     * rendered for the current map view.\r\n     * @returns - Promise of a {@link CanvasOverlay} object.\r\n     * @memberof BingMapService\r\n     */\r\n    public CreateCanvasOverlay(drawCallback: (canvas: HTMLCanvasElement) => void): Promise<CanvasOverlay> {\r\n        return this._map.then((map: Microsoft.Maps.Map) => {\r\n            const overlay: BingCanvasOverlay = new BingCanvasOverlay(drawCallback);\r\n            map.layers.insert(overlay);\r\n            return overlay;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a Bing map cluster layer within the map context\r\n     *\r\n     * @param options - Options for the layer. See {@link IClusterOptions}.\r\n     * @returns - Promise of a {@link Layer} object, which models the underlying Microsoft.Maps.ClusterLayer object.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public CreateClusterLayer(options: IClusterOptions): Promise<Layer> {\r\n        return this._map.then((map: Microsoft.Maps.Map) => {\r\n            const p: Promise<Layer> = new Promise<Layer>(resolve => {\r\n                this.LoadModule('Microsoft.Maps.Clustering', () => {\r\n                    const o: Microsoft.Maps.IClusterLayerOptions = BingConversions.TranslateClusterOptions(options);\r\n                    const layer: Microsoft.Maps.ClusterLayer = new Microsoft.Maps.ClusterLayer(new Array<Microsoft.Maps.Pushpin>(), o);\r\n                    let bl: BingClusterLayer;\r\n                    map.layers.insert(layer);\r\n                    bl = new BingClusterLayer(layer, this);\r\n                    bl.SetOptions(options);\r\n                    resolve(bl);\r\n                });\r\n            });\r\n            return p;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an information window for a map position\r\n     *\r\n     * @param [options] - Infowindow options. See {@link IInfoWindowOptions}\r\n     * @returns - Promise of a {@link InfoWindow} object, which models the underlying Microsoft.Maps.Infobox object.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public CreateInfoWindow(options?: IInfoWindowOptions): Promise<InfoWindow> {\r\n        return this._map.then((map: Microsoft.Maps.Map) => {\r\n            let loc: Microsoft.Maps.Location;\r\n            if (options.position == null) {\r\n                loc = map.getCenter();\r\n            } else {\r\n                loc = new Microsoft.Maps.Location(options.position.latitude, options.position.longitude);\r\n            }\r\n            const infoBox: Microsoft.Maps.Infobox = new Microsoft.Maps.Infobox(loc, BingConversions.TranslateInfoBoxOptions(options));\r\n            infoBox.setMap(map);\r\n            return new BingInfoWindow(infoBox);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a map layer within the map context\r\n     *\r\n     * @param options - Options for the layer. See {@link ILayerOptions}\r\n     * @returns - Promise of a {@link Layer} object, which models the underlying Microsoft.Maps.Layer object.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public CreateLayer(options: ILayerOptions): Promise<Layer> {\r\n        return this._map.then((map: Microsoft.Maps.Map) => {\r\n            const layer: Microsoft.Maps.Layer = new Microsoft.Maps.Layer(options.id.toString());\r\n            map.layers.insert(layer);\r\n            return new BingLayer(layer, this);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a map instance\r\n     *\r\n     * @param el - HTML element to host the map.\r\n     * @param mapOptions - Map options\r\n     * @returns - Promise fullfilled once the map has been created.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public CreateMap(el: HTMLElement, mapOptions: IMapOptions): Promise<void> {\r\n        return this._loader.Load().then(() => {\r\n            // apply mixins\r\n            MixinMapLabelWithOverlayView();\r\n            MixinCanvasOverlay();\r\n\r\n            // map startup...\r\n            if (this._mapInstance != null) {\r\n                this.DisposeMap();\r\n            }\r\n            const o: Microsoft.Maps.IMapLoadOptions = BingConversions.TranslateLoadOptions(mapOptions);\r\n            if (!o.credentials) {\r\n                o.credentials = this._config.apiKey;\r\n            }\r\n            const map = new Microsoft.Maps.Map(el, o);\r\n            this._mapInstance = map;\r\n            this._mapResolver(map);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a Bing map marker within the map context\r\n     *\r\n     * @param [options=<IMarkerOptions>{}] - Options for the marker. See {@link IMarkerOptions}.\r\n     * @returns - Promise of a {@link Marker} object, which models the underlying Microsoft.Maps.PushPin object.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public CreateMarker(options: IMarkerOptions = <IMarkerOptions>{}): Promise<Marker> {\r\n        const payload = (icon: string, map: Microsoft.Maps.Map): BingMarker => {\r\n            const loc: Microsoft.Maps.Location = BingConversions.TranslateLocation(options.position);\r\n            const o: Microsoft.Maps.IPushpinOptions = BingConversions.TranslateMarkerOptions(options);\r\n            if (icon && icon !== '') { o.icon = icon; }\r\n            const pushpin: Microsoft.Maps.Pushpin = new Microsoft.Maps.Pushpin(loc, o);\r\n            const marker: BingMarker = new BingMarker(pushpin, map, null);\r\n            if (options.metadata) { options.metadata.forEach((v, k) => marker.Metadata.set(k, v)); }\r\n            map.entities.push(pushpin);\r\n            return marker;\r\n        };\r\n        return this._map.then((map: Microsoft.Maps.Map) => {\r\n            if (options.iconInfo && options.iconInfo.markerType) {\r\n                const s = Marker.CreateMarker(options.iconInfo);\r\n                if (typeof (s) === 'string') { return (payload(s, map)); }\r\n                else {\r\n                    return s.then(x => {\r\n                        return (payload(x.icon, map));\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                return (payload(null, map));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a polygon within the Bing Maps V8 map context\r\n     *\r\n     * @abstract\r\n     * @param options - Options for the polygon. See {@link IPolygonOptions}.\r\n     * @returns - Promise of a {@link Polygon} object, which models the underlying native polygon.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    public CreatePolygon(options: IPolygonOptions): Promise<Polygon> {\r\n        return this._map.then((map: Microsoft.Maps.Map) => {\r\n            const locs: Array<Array<Microsoft.Maps.Location>> = BingConversions.TranslatePaths(options.paths);\r\n            const o: Microsoft.Maps.IPolygonOptions = BingConversions.TranslatePolygonOptions(options);\r\n            const poly: Microsoft.Maps.Polygon = new Microsoft.Maps.Polygon(locs, o);\r\n            map.entities.push(poly);\r\n\r\n            const p = new BingPolygon(poly, this, null);\r\n            if (options.metadata) { options.metadata.forEach((v, k) => p.Metadata.set(k, v)); }\r\n            if (options.title && options.title !== '') { p.Title = options.title; }\r\n            if (options.showLabel != null) { p.ShowLabel = options.showLabel; }\r\n            if (options.showTooltip != null) { p.ShowTooltip = options.showTooltip; }\r\n            if (options.labelMaxZoom != null) { p.LabelMaxZoom = options.labelMaxZoom; }\r\n            if (options.labelMinZoom != null) { p.LabelMinZoom = options.labelMinZoom; }\r\n            if (options.editable) { p.SetEditable(options.editable); }\r\n            return p;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a polyline within the Bing Maps V8 map context\r\n     *\r\n     * @abstract\r\n     * @param options - Options for the polyline. See {@link IPolylineOptions}.\r\n     * @returns - Promise of a {@link Polyline} object (or an array thereof for complex paths),\r\n     * which models the underlying native polygon.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    public CreatePolyline(options: IPolylineOptions): Promise<Polyline | Array<Polyline>> {\r\n        let polyline: Microsoft.Maps.Polyline;\r\n        return this._map.then((map: Microsoft.Maps.Map) => {\r\n            const o: Microsoft.Maps.IPolylineOptions = BingConversions.TranslatePolylineOptions(options);\r\n            const locs: Array<Array<Microsoft.Maps.Location>> = BingConversions.TranslatePaths(options.path);\r\n            if (options.path && options.path.length > 0 && !Array.isArray(options.path[0])) {\r\n                polyline = new Microsoft.Maps.Polyline(locs[0], o);\r\n                map.entities.push(polyline);\r\n\r\n                const pl = new BingPolyline(polyline, map, null);\r\n                if (options.metadata) { options.metadata.forEach((v, k) => pl.Metadata.set(k, v)); }\r\n                if (options.title && options.title !== '') { pl.Title = options.title; }\r\n                if (options.showTooltip != null) { pl.ShowTooltip = options.showTooltip; }\r\n                return pl;\r\n            }\r\n            else {\r\n                const lines: Array<Polyline> = new Array<Polyline>();\r\n                locs.forEach(p => {\r\n                    polyline = new Microsoft.Maps.Polyline(p, o);\r\n                    map.entities.push(polyline);\r\n\r\n                    const pl = new BingPolyline(polyline, map, null);\r\n                    if (options.metadata) { options.metadata.forEach((v, k) => pl.Metadata.set(k, v)); }\r\n                    if (options.title && options.title !== '') { pl.Title = options.title; }\r\n                    if (options.showTooltip != null) { pl.ShowTooltip = options.showTooltip; }\r\n                    lines.push(pl);\r\n                });\r\n                return lines;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes a layer from the map.\r\n     *\r\n     * @param layer - Layer to delete. See {@link Layer}. This method expects the Bing specific Layer model implementation.\r\n     * @returns - Promise fullfilled when the layer has been removed.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public DeleteLayer(layer: Layer): Promise<void> {\r\n        return this._map.then((map: Microsoft.Maps.Map) => {\r\n            map.layers.remove(layer.NativePrimitve);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispaose the map and associated resoures.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public DisposeMap(): void {\r\n        if (this._map == null && this._mapInstance == null) {\r\n            return;\r\n        }\r\n        if (this._mapInstance != null) {\r\n            this._mapInstance.dispose();\r\n            this._mapInstance = null;\r\n            this._map = new Promise<Microsoft.Maps.Map>((resolve: () => void) => { this._mapResolver = resolve; });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the geo coordinates of the map center\r\n     *\r\n     * @returns - A promise that when fullfilled contains the goe location of the center. See {@link ILatLong}.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public GetCenter(): Promise<ILatLong> {\r\n        return this._map.then((map: Microsoft.Maps.Map) => {\r\n            const center = map.getCenter();\r\n            return <ILatLong>{\r\n                latitude: center.latitude,\r\n                longitude: center.longitude\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the geo coordinates of the map bounding box\r\n     *\r\n     * @returns - A promise that when fullfilled contains the goe location of the bounding box. See {@link IBox}.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public GetBounds(): Promise<IBox> {\r\n        return this._map.then((map: Microsoft.Maps.Map) => {\r\n            const box = map.getBounds();\r\n            return <IBox>{\r\n                maxLatitude: box.getNorth(),\r\n                maxLongitude: box.crossesInternationalDateLine() ? box.getWest() : box.getEast(),\r\n                minLatitude: box.getSouth(),\r\n                minLongitude: box.crossesInternationalDateLine() ? box.getEast() : box.getWest(),\r\n                center: { latitude: box.center.latitude, longitude: box.center.longitude },\r\n                padding: 0\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets a shared or private instance of the map drawing tools.\r\n     *\r\n     * @param [useSharedInstance=true] - Set to false to create a private instance.\r\n     * @returns - Promise that when resolved containst an instance of the drawing tools.\r\n     * @memberof BingMapService\r\n     */\r\n    public GetDrawingTools (useSharedInstance: boolean = true): Promise<Microsoft.Maps.DrawingTools> {\r\n        return new Promise<Microsoft.Maps.DrawingTools>((resolve, reject) => {\r\n            this.LoadModuleInstance('Microsoft.Maps.DrawingTools', useSharedInstance).then((o: Microsoft.Maps.DrawingTools) => {\r\n                resolve(o);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the current zoom level of the map.\r\n     *\r\n     * @returns - A promise that when fullfilled contains the zoom level.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public GetZoom(): Promise<number> {\r\n        return this._map.then((map: Microsoft.Maps.Map) => map.getZoom());\r\n    }\r\n\r\n    /**\r\n     * Loads a module into the Map.\r\n     *\r\n     * @param moduleName - The module to load.\r\n     * @param callback - Callback to call once loading is complete.\r\n     * @method\r\n     * @memberof BingMapService\r\n     */\r\n    public LoadModule(moduleName: string, callback: () => void) {\r\n        if (this._modules.has(moduleName)) {\r\n            callback();\r\n        }\r\n        else {\r\n            Microsoft.Maps.loadModule(moduleName, () => {\r\n                this._modules.set(moduleName, null);\r\n                callback();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a module into the Map and delivers and instance of the module payload.\r\n     *\r\n     * @param moduleName - The module to load.\r\n     * @param useSharedInstance- Use a shared instance if true, create a new instance if false.\r\n     * @method\r\n     * @memberof BingMapService\r\n     */\r\n    public LoadModuleInstance(moduleName: string, useSharedInstance: boolean = true): Promise<Object> {\r\n        const s: string = moduleName.substr(moduleName.lastIndexOf('.') + 1);\r\n        if (this._modules.has(moduleName)) {\r\n            let o: any = null;\r\n            if (!useSharedInstance)  {\r\n                o = new (<any>Microsoft.Maps)[s](this._mapInstance);\r\n            }\r\n            else if (this._modules.get(moduleName) != null) {\r\n                o = this._modules.get(moduleName);\r\n            }\r\n            else {\r\n                o = new (<any>Microsoft.Maps)[s](this._mapInstance);\r\n                this._modules.set(moduleName, o);\r\n            }\r\n            return Promise.resolve(o);\r\n        }\r\n        else {\r\n            return new Promise<Object>((resolve, reject) => {\r\n                try {\r\n                Microsoft.Maps.loadModule(moduleName, () => {\r\n                    const o = new (<any>Microsoft.Maps)[s](this._mapInstance);\r\n                    if (useSharedInstance) {\r\n                        this._modules.set(moduleName, o);\r\n                    }\r\n                    else {\r\n                        this._modules.set(moduleName, null);\r\n                    }\r\n                    resolve(o);\r\n                });\r\n                } catch (e) {\r\n                    reject('Could not load module or create instance.');\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Provides a conversion of geo coordinates to pixels on the map control.\r\n     *\r\n     * @param loc - The geo coordinates to translate.\r\n     * @returns - Promise of an {@link IPoint} interface representing the pixels. This promise resolves to null\r\n     * if the goe coordinates are not in the view port.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public LocationToPoint(loc: ILatLong): Promise<IPoint> {\r\n        return this._map.then((m: Microsoft.Maps.Map) => {\r\n            const l: Microsoft.Maps.Location = BingConversions.TranslateLocation(loc);\r\n            const p: Microsoft.Maps.Point = <Microsoft.Maps.Point>m.tryLocationToPixel(l, Microsoft.Maps.PixelReference.control);\r\n            if (p != null) {\r\n                return { x: p.x, y: p.y };\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Provides a conversion of geo coordinates to pixels on the map control.\r\n     *\r\n     * @param loc - The geo coordinates to translate.\r\n     * @returns - Promise of an {@link IPoint} interface array representing the pixels.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public LocationsToPoints(locs: Array<ILatLong>): Promise<Array<IPoint>> {\r\n        return this._map.then((m: Microsoft.Maps.Map) => {\r\n            const l = locs.map(loc => BingConversions.TranslateLocation(loc));\r\n            const p: Array<Microsoft.Maps.Point> = <Array<Microsoft.Maps.Point>>m.tryLocationToPixel(l,\r\n                Microsoft.Maps.PixelReference.control);\r\n            return p ? p : new Array<IPoint>();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Centers the map on a geo location.\r\n     *\r\n     * @param latLng - GeoCoordinates around which to center the map. See {@link ILatLong}\r\n     * @returns - Promise that is fullfilled when the center operations has been completed.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public SetCenter(latLng: ILatLong): Promise<void> {\r\n        return this._map.then((map: Microsoft.Maps.Map) => map.setView({\r\n            center: BingConversions.TranslateLocation(latLng)\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Sets the generic map options.\r\n     *\r\n     * @param options - Options to set.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public SetMapOptions(options: IMapOptions) {\r\n        this._map.then((m: Microsoft.Maps.Map) => {\r\n            const o: Microsoft.Maps.IMapOptions = BingConversions.TranslateOptions(options);\r\n            m.setOptions(o);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the view options of the map.\r\n     *\r\n     * @param options - Options to set.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public SetViewOptions(options: IMapOptions) {\r\n        this._map.then((m: Microsoft.Maps.Map) => {\r\n            const o: Microsoft.Maps.IViewOptions = BingConversions.TranslateViewOptions(options);\r\n            m.setView(o);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the zoom level of the map.\r\n     *\r\n     * @param zoom - Zoom level to set.\r\n     * @returns - A Promise that is fullfilled once the zoom operation is complete.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public SetZoom(zoom: number): Promise<void> {\r\n        return this._map.then((map: Microsoft.Maps.Map) => map.setView({\r\n            zoom: zoom\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Creates an event subscription\r\n     *\r\n     * @param eventName - The name of the event (e.g. 'click')\r\n     * @returns - An observable of tpye E that fires when the event occurs.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public SubscribeToMapEvent<E>(eventName: string): Observable<E> {\r\n        const eventNameTranslated = BingMapEventsLookup[eventName];\r\n        return Observable.create((observer: Observer<E>) => {\r\n            this._map.then((m: Microsoft.Maps.Map) => {\r\n                Microsoft.Maps.Events.addHandler(m, eventNameTranslated, (e: any) => {\r\n                    this._zone.run(() => observer.next(e));\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Triggers the given event name on the map instance.\r\n     *\r\n     * @param eventName - Event to trigger.\r\n     * @returns - A promise that is fullfilled once the event is triggered.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public TriggerMapEvent(eventName: string): Promise<void> {\r\n        return this._map.then((m) => Microsoft.Maps.Events.invoke(m, eventName, null));\r\n    }\r\n\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\r\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\r\nimport { Marker } from '../../models/marker';\r\nimport { BingMarker } from '../../models/bing/bing-marker';\r\nimport { Layer } from '../../models/layer';\r\nimport { MarkerTypeId } from '../../models/marker-type-id';\r\nimport { MapService } from '../map.service';\r\nimport { MapLayerDirective } from '../../components/map-layer';\r\nimport { LayerService } from '../layer.service';\r\nimport { BingMapService } from './bing-map.service';\r\nimport { BingConversions } from './bing-conversions';\r\n\r\n/**\r\n * This abstract partially implements the contract for the {@link LayerService}\r\n * and {@link ClusterService} for the Bing Maps V8 archtiecture. It serves\r\n * as the base class for basic layer ({@link BingLayerService}) and cluster layer ({@link BingClusterLayer}).\r\n *\r\n * @export\r\n * @abstract\r\n */\r\nexport abstract class BingLayerBase {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n\r\n    protected _layers: Map<number, Promise<Layer>> = new Map<number, Promise<Layer>>();\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of BingLayerBase.\r\n     * @param _mapService - Concrete {@link MapService} implementation for Bing Maps V8. An instance of {@link BingMapService}.\r\n     *\r\n     * @memberof BingLayerBase\r\n     */\r\n    constructor(protected _mapService: MapService, protected _zone: NgZone) { }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Adds a layer to the map.\r\n     *\r\n     * @abstract\r\n     * @param layer - MapLayerDirective component object.\r\n     * Generally, MapLayerDirective will be injected with an instance of the\r\n     * LayerService and then self register on initialization.\r\n     *\r\n     * @memberof BingLayerBase\r\n     */\r\n    public abstract AddLayer(layer: MapLayerDirective): void;\r\n\r\n    /**\r\n     * Creates a marker in the layer.\r\n     *\r\n     * @param layer - The Id of the layer in which to create the marker.\r\n     * @param options - {@link IMarkerOptions} object containing the marker properties.\r\n     * @returns - A promise that when fullfilled contains the {@link Marker} model for the created marker.\r\n     *\r\n     * @memberof BingLayerBase\r\n     */\r\n    public CreateMarker(layer: number, options: IMarkerOptions): Promise<Marker> {\r\n        const payload = (icon: string, l: Layer): BingMarker => {\r\n            const loc: Microsoft.Maps.Location = BingConversions.TranslateLocation(options.position);\r\n            const o: Microsoft.Maps.IPushpinOptions = BingConversions.TranslateMarkerOptions(options);\r\n            if (icon && icon !== '') { o.icon = icon; }\r\n            const pushpin: Microsoft.Maps.Pushpin = new Microsoft.Maps.Pushpin(loc, o);\r\n            const marker: BingMarker = new BingMarker(pushpin, null, l.NativePrimitve);\r\n            marker.IsFirst = options.isFirst;\r\n            marker.IsLast = options.isLast;\r\n            if (options.metadata) { options.metadata.forEach((v, k) => marker.Metadata.set(k, v)); }\r\n            l.AddEntity(marker);\r\n            return marker;\r\n        };\r\n        const p: Promise<Layer> = this.GetLayerById(layer);\r\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\r\n        return p.then((l: Layer) => {\r\n            if (options.iconInfo && options.iconInfo.markerType) {\r\n                const s = Marker.CreateMarker(options.iconInfo);\r\n                if (typeof(s) === 'string') { return(payload(s, l)); }\r\n                else {\r\n                    return s.then(x => {\r\n                        return(payload(x.icon, l));\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                return (payload(null, l));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an array of unbound markers. Use this method to create arrays of markers to be used in bulk\r\n     * operations.\r\n     *\r\n     * @param options - Marker options defining the markers.\r\n     * @param markerIcon - Optional information to generate custom markers. This will be applied to all markers.\r\n     * @returns - A promise that when fullfilled contains the an arrays of the Marker models.\r\n     *\r\n     * @memberof BingLayerBase\r\n     */\r\n    public CreateMarkers(options: Array<IMarkerOptions>, markerIcon?: IMarkerIconInfo): Promise<Array<Marker>> {\r\n        const payload = (icon: string, op: Array<IMarkerOptions>): Array<BingMarker> => {\r\n            const markers: Array<BingMarker> = op.map(mo => {\r\n                let s: string;\r\n                const o: Microsoft.Maps.IPushpinOptions = BingConversions.TranslateMarkerOptions(mo);\r\n                if (icon && icon !== '' ) { s = icon; }\r\n                else if (o.icon) {\r\n                    s = o.icon;\r\n                }\r\n                if (o.icon) { delete o.icon; }\r\n                const loc: Microsoft.Maps.Location = BingConversions.TranslateLocation(mo.position);\r\n                const pushpin: Microsoft.Maps.Pushpin = new Microsoft.Maps.Pushpin(loc, o);\r\n                const img = Marker.GetImageForMarker(s);\r\n                if (img != null) { (<any>pushpin).image = img; }\r\n\r\n                const marker: BingMarker = new BingMarker(pushpin, null, null);\r\n                marker.IsFirst = mo.isFirst;\r\n                marker.IsLast = mo.isLast;\r\n                if (mo.metadata) { mo.metadata.forEach((v, k) => marker.Metadata.set(k, v)); }\r\n                return marker;\r\n            });\r\n            return markers;\r\n        };\r\n        const p: Promise<Array<Marker>> = new Promise<Array<Marker>>((resolve, reject) => {\r\n            if (markerIcon && markerIcon.markerType) {\r\n                const s = Marker.CreateMarker(markerIcon);\r\n                if (typeof(s) === 'string') { resolve(payload(s, options)); }\r\n                else {\r\n                    return s.then(x => {\r\n                        resolve(payload(x.icon, options));\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                resolve(payload(null, options));\r\n            }\r\n        });\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Deletes the layer\r\n     *\r\n     * @param layer - MapLayerDirective component object for which to retrieve the layer.\r\n     * @returns - A promise that is fullfilled when the layer has been removed.\r\n     *\r\n     * @memberof BingLayerBase\r\n     */\r\n    public DeleteLayer(layer: MapLayerDirective): Promise<void> {\r\n        const l = this._layers.get(layer.Id);\r\n        if (l == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return l.then((l1: Layer) => {\r\n            return this._zone.run(() => {\r\n                l1.Delete();\r\n                this._layers.delete(layer.Id);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the Layer model represented by this layer.\r\n     *\r\n     * @param layer - MapLayerDirective component object or Layer Id for which to retrieve the layer model.\r\n     * @returns - A promise that when resolved contains the Layer model.\r\n     *\r\n     * @memberof BingLayerBase\r\n     */\r\n    public GetNativeLayer(layer: MapLayerDirective|number): Promise<Layer> {\r\n        let p: Promise<Layer> = null;\r\n        if (typeof(layer) === 'number') {\r\n            p = this._layers.get(layer);\r\n        }\r\n        else {\r\n            p = this._layers.get((<MapLayerDirective>layer).Id);\r\n        }\r\n        return p;\r\n    }\r\n\r\n    ///\r\n    /// Protected methods\r\n    ///\r\n\r\n    /**\r\n     * Gets the layer based on its id.\r\n     *\r\n     * @protected\r\n     * @param id - Layer Id.\r\n     * @returns - A promise that when fullfilled contains the {@link Layer} model for the layer.\r\n     *\r\n     * @memberof BingLayerBase\r\n     */\r\n    protected GetLayerById(id: number): Promise<Layer> {\r\n        let p: Promise<Layer>;\r\n        this._layers.forEach((l: Promise<Layer>, k: number) => { if (k === id) { p = l; } });\r\n        return p;\r\n    }\r\n\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\r\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\r\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\r\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\r\nimport { Marker } from '../../models/marker';\r\nimport { Polygon } from '../../models/polygon';\r\nimport { Polyline } from '../../models/polyline';\r\nimport { BingMarker } from '../../models/bing/bing-marker';\r\nimport { BingPolygon } from '../../models/bing/bing-polygon';\r\nimport { BingPolyline } from '../../models/bing/bing-polyline';\r\nimport { Layer } from '../../models/layer';\r\nimport { MarkerTypeId } from '../../models/marker-type-id';\r\nimport { MapService } from '../map.service';\r\nimport { MapLayerDirective } from '../../components/map-layer';\r\nimport { LayerService } from '../layer.service';\r\nimport { BingMapService } from './bing-map.service';\r\nimport { BingLayerBase } from './bing-layer-base';\r\nimport { BingConversions } from './bing-conversions';\r\n\r\n/**\r\n * Implements the {@link LayerService} contract for a  Bing Maps V8 specific implementation.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class BingLayerService extends BingLayerBase implements LayerService {\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of BingLayerService.\r\n     * @param _mapService - Instance of the Bing Maps Service. Will generally be injected.\r\n     * @param _zone - NgZone instance to provide zone aware promises.\r\n     *\r\n     * @memberof BingLayerService\r\n     */\r\n    constructor(_mapService: MapService, _zone: NgZone) {\r\n        super(_mapService, _zone);\r\n    }\r\n\r\n    /**\r\n     * Adds a layer to the map.\r\n     *\r\n     * @abstract\r\n     * @param layer - MapLayerDirective component object.\r\n     * Generally, MapLayerDirective will be injected with an instance of the\r\n     * LayerService and then self register on initialization.\r\n     *\r\n     * @memberof BingLayerService\r\n     */\r\n    public AddLayer(layer: MapLayerDirective): void {\r\n        const layerPromise = this._mapService.CreateLayer({ id: layer.Id });\r\n        this._layers.set(layer.Id, layerPromise);\r\n        layerPromise.then(l => l.SetVisible(layer.Visible));\r\n    }\r\n\r\n\r\n    /**\r\n     * Adds a polygon to the layer.\r\n     *\r\n     * @abstract\r\n     * @param layer - The id of the layer to which to add the polygon.\r\n     * @param options - Polygon options defining the polygon.\r\n     * @returns - A promise that when fullfilled contains the an instance of the Polygon model.\r\n     *\r\n     * @memberof BingLayerService\r\n     */\r\n    public CreatePolygon(layer: number, options: IPolygonOptions): Promise<Polygon> {\r\n        const p: Promise<Layer> = this.GetLayerById(layer);\r\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\r\n        return p.then((l: Layer) => {\r\n            const locs: Array<Array<Microsoft.Maps.Location>> = BingConversions.TranslatePaths(options.paths);\r\n            const o: Microsoft.Maps.IPolylineOptions = BingConversions.TranslatePolygonOptions(options);\r\n            const poly: Microsoft.Maps.Polygon = new Microsoft.Maps.Polygon(locs, o);\r\n            const polygon: Polygon = new BingPolygon(poly, <BingMapService>this._mapService, l.NativePrimitve);\r\n\r\n            if (options.metadata) { options.metadata.forEach((v, k) => polygon.Metadata.set(k, v)); }\r\n            if (options.title && options.title !== '') {polygon.Title = options.title; }\r\n            if (options.showLabel != null) { polygon.ShowLabel = options.showLabel; }\r\n            if (options.showTooltip != null) { polygon.ShowTooltip = options.showTooltip; }\r\n            if (options.labelMaxZoom != null) { polygon.LabelMaxZoom = options.labelMaxZoom; }\r\n            if (options.labelMinZoom != null) { polygon.LabelMinZoom = options.labelMinZoom; }\r\n            l.AddEntity(polygon);\r\n            return polygon;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an array of unbound polygons. Use this method to create arrays of polygons to be used in bulk\r\n     * operations.\r\n     *\r\n     * @param layer - The id of the layer to which to add the polygon.\r\n     * @param options - Polygon options defining the polygons.\r\n     * @returns - A promise that when fullfilled contains the an arrays of the Polygon models.\r\n     *\r\n     * @memberof BingLayerService\r\n     */\r\n    public CreatePolygons(layer: number, options: Array<IPolygonOptions>): Promise<Array<Polygon>> {\r\n        const p: Promise<Layer> = this.GetLayerById(layer);\r\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\r\n        return p.then((l: Layer) => {\r\n            const polygons: Promise<Array<Polygon>> = new Promise<Array<Polygon>>((resolve, reject) => {\r\n                const polys: Array<BingPolygon> = options.map(o => {\r\n                    const locs: Array<Array<Microsoft.Maps.Location>> = BingConversions.TranslatePaths(o.paths);\r\n                    const op: Microsoft.Maps.IPolylineOptions = BingConversions.TranslatePolygonOptions(o);\r\n                    const poly: Microsoft.Maps.Polygon = new Microsoft.Maps.Polygon(locs, op);\r\n                    const polygon: BingPolygon = new BingPolygon(poly, <BingMapService>this._mapService, l.NativePrimitve);\r\n                    if (o.title && o.title !== '') { polygon.Title = o.title; }\r\n                    if (o.metadata) { o.metadata.forEach((v, k) => polygon.Metadata.set(k, v)); }\r\n                    return polygon;\r\n                });\r\n                resolve(polys);\r\n            });\r\n            return polygons;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a polyline to the layer.\r\n     *\r\n     * @abstract\r\n     * @param layer - The id of the layer to which to add the line.\r\n     * @param options - Polyline options defining the line.\r\n     * @returns - A promise that when fullfilled contains the an instance of the Polyline (or an array\r\n     * of polygons for complex paths) model.\r\n     *\r\n     * @memberof BingLayerService\r\n     */\r\n    public CreatePolyline(layer: number, options: IPolylineOptions): Promise<Polyline|Array<Polyline>> {\r\n        const p: Promise<Layer> = this.GetLayerById(layer);\r\n        let polyline: Microsoft.Maps.Polyline;\r\n        let line: Polyline;\r\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\r\n        return p.then((l: Layer) => {\r\n            const locs: Array<Array<Microsoft.Maps.Location>> = BingConversions.TranslatePaths(options.path);\r\n            const o: Microsoft.Maps.IPolylineOptions = BingConversions.TranslatePolylineOptions(options);\r\n            if (options.path && options.path.length > 0 && !Array.isArray(options.path[0])) {\r\n                polyline = new Microsoft.Maps.Polyline(locs[0], o);\r\n                line = new BingPolyline(polyline, this._mapService.MapInstance, l.NativePrimitve);\r\n                l.AddEntity(line);\r\n\r\n                if (options.metadata) { options.metadata.forEach((v, k) => line.Metadata.set(k, v)); }\r\n                if (options.title && options.title !== '') {line.Title = options.title; }\r\n                if (options.showTooltip != null) { line.ShowTooltip = options.showTooltip; }\r\n                return line;\r\n            }\r\n            else {\r\n                const lines: Array<Polyline> = new Array<Polyline>();\r\n                locs.forEach(x => {\r\n                    polyline = new Microsoft.Maps.Polyline(x, o);\r\n                    line = new BingPolyline(polyline, this._mapService.MapInstance, l.NativePrimitve);\r\n                    l.AddEntity(line);\r\n\r\n                    if (options.metadata) { options.metadata.forEach((v, k) => line.Metadata.set(k, v)); }\r\n                    if (options.title && options.title !== '') {line.Title = options.title; }\r\n                    if (options.showTooltip != null) { line.ShowTooltip = options.showTooltip; }\r\n                    lines.push(line);\r\n                });\r\n                return lines;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an array of unbound polylines. Use this method to create arrays of polylines to be used in bulk\r\n     * operations.\r\n     *\r\n     * @param layer - The id of the layer to which to add the polylines.\r\n     * @param options - Polyline options defining the polylines.\r\n     * @returns - A promise that when fullfilled contains the an arrays of the Polyline models.\r\n     *\r\n     * @memberof BingLayerService\r\n     */\r\n    public CreatePolylines(layer: number, options: Array<IPolylineOptions>): Promise<Array<Polyline|Array<Polyline>>> {\r\n        const p: Promise<Layer> = this.GetLayerById(layer);\r\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\r\n        return p.then((l: Layer) => {\r\n            const polylines: Promise<Array<Polyline|Array<Polyline>>> = new Promise<Array<Polyline|Array<Polyline>>>((resolve, reject) => {\r\n                const polys: Array<Polyline|Array<Polyline>> = options.map(o => {\r\n                    const locs: Array<Array<Microsoft.Maps.Location>> = BingConversions.TranslatePaths(o.path);\r\n                    const op: Microsoft.Maps.IPolylineOptions = BingConversions.TranslatePolylineOptions(o);\r\n                    if (locs && locs.length > 0 && !Array.isArray(locs[0])) {\r\n                        const poly: Microsoft.Maps.Polyline = new Microsoft.Maps.Polyline(locs[0], op);\r\n                        const polyline: BingPolyline = new BingPolyline(poly, this._mapService.MapInstance, l.NativePrimitve);\r\n                        if (o.title && o.title !== '') { polyline.Title = o.title; }\r\n                        if (o.metadata) { o.metadata.forEach((v, k) => polyline.Metadata.set(k, v)); }\r\n                        return polyline;\r\n                    }\r\n                    else {\r\n                        const lines: Array<Polyline> = new Array<Polyline>();\r\n                        locs.forEach(x => {\r\n                            const poly = new Microsoft.Maps.Polyline(x, op);\r\n                            const polyline: BingPolyline = new BingPolyline(poly, this._mapService.MapInstance, l.NativePrimitve);\r\n                            if (o.metadata) { o.metadata.forEach((v, k) => polyline.Metadata.set(k, v)); }\r\n                            if (o.title && o.title !== '') {polyline.Title = o.title; }\r\n                            lines.push(polyline);\r\n                        });\r\n                        return lines;\r\n                    }\r\n                });\r\n                resolve(polys);\r\n            });\r\n            return polylines;\r\n        });\r\n    }\r\n\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\r\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\r\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\r\nimport { IClusterOptions } from '../../interfaces/icluster-options';\r\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\r\nimport { Marker } from '../../models/marker';\r\nimport { Polygon } from '../../models/polygon';\r\nimport { Polyline } from '../../models/polyline';\r\nimport { BingMarker } from '../../models/bing/bing-marker';\r\nimport { BingClusterLayer } from '../../models/bing/bing-cluster-layer';\r\nimport { Layer } from '../../models/layer';\r\nimport { MarkerTypeId } from '../../models/marker-type-id';\r\nimport { ClusterClickAction } from '../../models/cluster-click-action';\r\nimport { MapService } from '../map.service';\r\nimport { ClusterLayerDirective } from '../../components/cluster-layer';\r\nimport { ClusterService } from '../cluster.service';\r\nimport { BingLayerBase } from './bing-layer-base';\r\nimport { BingMapService } from './bing-map.service';\r\nimport { BingConversions } from './bing-conversions';\r\n\r\n/**\r\n * Implements the {@link ClusterService} contract for a  Bing Maps V8 specific implementation.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class BingClusterService extends BingLayerBase implements ClusterService {\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of BingClusterService.\r\n     * @param _mapService - Concrete {@link MapService} implementation for Bing Maps V8. An instance of {@link BingMapService}.\r\n     * @param _zone - NgZone instance to provide zone aware promises.\r\n     *\r\n     * @memberof BingClusterService\r\n     */\r\n    constructor(_mapService: MapService, _zone: NgZone) {\r\n        super(_mapService, _zone);\r\n    }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Adds a layer to the map.\r\n     *\r\n     * @abstract\r\n     * @param layer - ClusterLayerDirective component object.\r\n     * Generally, MapLayer will be injected with an instance of the\r\n     * LayerService and then self register on initialization.\r\n     *\r\n     * @memberof BingClusterService\r\n     */\r\n    public AddLayer(layer: ClusterLayerDirective): void {\r\n        const options: IClusterOptions = {\r\n            id: layer.Id,\r\n            visible: layer.Visible,\r\n            clusteringEnabled: layer.ClusteringEnabled,\r\n            placementMode: layer.ClusterPlacementMode\r\n        };\r\n        if (layer.GridSize) { options.gridSize = layer.GridSize; }\r\n        if (layer.LayerOffset) { options.layerOffset = layer.LayerOffset; }\r\n        if (layer.ZIndex) { options.zIndex = layer.ZIndex; }\r\n        if (layer.IconInfo) {\r\n            options.clusteredPinCallback = (pin: Microsoft.Maps.ClusterPushpin) => { this.CreateClusterPushPin(pin, layer); };\r\n        }\r\n        if (layer.CustomMarkerCallback) {\r\n            options.clusteredPinCallback = (pin: Microsoft.Maps.ClusterPushpin) => { this.CreateCustomClusterPushPin(pin, layer); };\r\n        }\r\n        if (layer.SpiderClusterOptions) { options.spiderClusterOptions = layer.SpiderClusterOptions; }\r\n\r\n        const layerPromise: Promise<Layer> = this._mapService.CreateClusterLayer(options);\r\n        (<BingMapService>this._mapService).MapPromise.then(m => {\r\n            Microsoft.Maps.Events.addHandler(m, 'viewchangeend', (e) => {\r\n                if (layer.ClusteringEnabled && m.getZoom() === 19) {\r\n                    layerPromise.then((l: BingClusterLayer) => {\r\n                        l.SetOptions({ id: layer.Id, clusteringEnabled: false });\r\n                    });\r\n                }\r\n                if (layer.ClusteringEnabled && m.getZoom() < 19) {\r\n                    layerPromise.then((l: BingClusterLayer) => {\r\n                        if (!l.GetOptions().clusteringEnabled) {\r\n                            l.SetOptions({ id: layer.Id, clusteringEnabled: true });\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n        this._layers.set(layer.Id, layerPromise);\r\n    }\r\n\r\n    /**\r\n     * Adds a polygon to the layer.\r\n     *\r\n     * @abstract\r\n     * @param layer - The id of the layer to which to add the polygon.\r\n     * @param options - Polygon options defining the polygon.\r\n     * @returns - A promise that when fullfilled contains the an instance of the Polygon model.\r\n     *\r\n     * @memberof BingClusterService\r\n     */\r\n    public CreatePolygon(layer: number, options: IPolygonOptions): Promise<Polygon> {\r\n        throw (new Error('Polygons are not supported in clustering layers. You can only use markers.'));\r\n    }\r\n\r\n    /**\r\n     * Creates an array of unbound polygons. Use this method to create arrays of polygons to be used in bulk\r\n     * operations.\r\n     *\r\n     * @param layer - The id of the layer to which to add the polygon.\r\n     * @param options - Polygon options defining the polygons.\r\n     * @returns - A promise that when fullfilled contains the an arrays of the Polygon models.\r\n     *\r\n     * @memberof BingClusterService\r\n     */\r\n    public CreatePolygons(layer: number, options: Array<IPolygonOptions>): Promise<Array<Polygon>> {\r\n        throw (new Error('Polygons are not supported in clustering layers. You can only use markers.'));\r\n    }\r\n\r\n    /**\r\n     * Adds a polyline to the layer.\r\n     *\r\n     * @abstract\r\n     * @param layer - The id of the layer to which to add the line.\r\n     * @param options - Polyline options defining the line.\r\n     * @returns - A promise that when fullfilled contains the an instance of the Polyline (or an array\r\n     * of polygons for complex paths) model.\r\n     *\r\n     * @memberof BingClusterService\r\n     */\r\n    public CreatePolyline(layer: number, options: IPolylineOptions): Promise<Polyline|Array<Polyline>> {\r\n        throw (new Error('Polylines are not supported in clustering layers. You can only use markers.'));\r\n    }\r\n\r\n    /**\r\n     * Creates an array of unbound polylines. Use this method to create arrays of polylines to be used in bulk\r\n     * operations.\r\n     *\r\n     * @param layer - The id of the layer to which to add the polylines.\r\n     * @param options - Polyline options defining the polylines.\r\n     * @returns - A promise that when fullfilled contains the an arrays of the Polyline models.\r\n     *\r\n     * @memberof BingClusterService\r\n     */\r\n    public CreatePolylines(layer: number, options: Array<IPolylineOptions>): Promise<Array<Polyline|Array<Polyline>>> {\r\n        throw (new Error('Polylines are not supported in clustering layers. You can only use markers.'));\r\n    }\r\n\r\n    /**\r\n     * Start to actually cluster the entities in a cluster layer. This method should be called after the initial set of entities\r\n     * have been added to the cluster. This method is used for performance reasons as adding an entitiy will recalculate all clusters.\r\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\r\n     * complete to recalculate the clusters.\r\n     *\r\n     * @param layer - ClusterLayerDirective component object for which to retrieve the layer.\r\n     *\r\n     * @memberof BingClusterService\r\n     */\r\n    public StartClustering(layer: ClusterLayerDirective): Promise<void> {\r\n        const l = this._layers.get(layer.Id);\r\n        if (l == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return l.then((l1: BingClusterLayer) => {\r\n            return this._zone.run(() => {\r\n                l1.StartClustering();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Stop to actually cluster the entities in a cluster layer.\r\n     * This method is used for performance reasons as adding an entitiy will recalculate all clusters.\r\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\r\n     * complete to recalculate the clusters.\r\n     *\r\n     * @param layer - ClusterLayerDirective component object for which to retrieve the layer.\r\n     *\r\n     * @memberof BingClusterService\r\n     */\r\n    public StopClustering(layer: ClusterLayerDirective): Promise<void> {\r\n        const l = this._layers.get(layer.Id);\r\n        if (l == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return l.then((l1: BingClusterLayer) => {\r\n            return this._zone.run(() => {\r\n                l1.StopClustering();\r\n            });\r\n        });\r\n    }\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n\r\n    /**\r\n     * Creates the default cluster pushpin as a callback from BingMaps when clustering occurs. The {@link ClusterLayerDirective} model\r\n     * can provide an IconInfo property that would govern the apparenace of the pin. This method will assign the same pin to all\r\n     * clusters in the layer.\r\n     *\r\n     * @param cluster - The cluster for which to create the pushpin.\r\n     * @param layer - The {@link ClusterLayerDirective} component representing the layer.\r\n     *\r\n     * @memberof BingClusterService\r\n     */\r\n    private CreateClusterPushPin(cluster: Microsoft.Maps.ClusterPushpin, layer: ClusterLayerDirective): void {\r\n        this._layers.get(layer.Id).then((l: BingClusterLayer) => {\r\n            if (layer.IconInfo) {\r\n                const o: Microsoft.Maps.IPushpinOptions = {};\r\n                const payload: (ico: string, info: IMarkerIconInfo) => void = (ico, info) => {\r\n                        o.icon = ico;\r\n                        o.anchor = new Microsoft.Maps.Point(\r\n                            (info.size && info.markerOffsetRatio) ? (info.size.width * info.markerOffsetRatio.x) : 0,\r\n                            (info.size && info.markerOffsetRatio) ? (info.size.height * info.markerOffsetRatio.y) : 0\r\n                        );\r\n                        cluster.setOptions(o);\r\n                };\r\n                const icon: string|Promise<{icon: string, iconInfo: IMarkerIconInfo}> = Marker.CreateMarker(layer.IconInfo);\r\n                if (typeof(icon) === 'string') {\r\n                    payload(icon, layer.IconInfo);\r\n                }\r\n                else {\r\n                    icon.then(x => {\r\n                        payload(x.icon, x.iconInfo);\r\n                    });\r\n                }\r\n            }\r\n            if (layer.ClusterClickAction === ClusterClickAction.ZoomIntoCluster) {\r\n                Microsoft.Maps.Events.addHandler(cluster, 'click', (e: Microsoft.Maps.IMouseEventArgs) => this.ZoomIntoCluster(e));\r\n            }\r\n            if (layer.ClusterClickAction === ClusterClickAction.Spider) {\r\n                Microsoft.Maps.Events.addHandler(cluster, 'dblclick', (e: Microsoft.Maps.IMouseEventArgs) => this.ZoomIntoCluster(e));\r\n                l.InitializeSpiderClusterSupport();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Provides a hook for consumers to provide a custom function to create cluster bins for a cluster. This is particuarily useful\r\n     * in situation where the pin should differ to represent information about the pins in the cluster.\r\n     *\r\n     * @param cluster - The cluster for which to create the pushpin.\r\n     * @param layer - The {@link ClusterLayerDirective} component\r\n     * representing the layer. Set the {@link ClusterLayerDirective.CustomMarkerCallback}\r\n     * property to define the callback generating the pin.\r\n     *\r\n     * @memberof BingClusterService\r\n     */\r\n    private CreateCustomClusterPushPin(cluster: Microsoft.Maps.ClusterPushpin, layer: ClusterLayerDirective): void {\r\n        this._layers.get(layer.Id).then((l: BingClusterLayer) => {\r\n            // assemble markers for callback\r\n            const m: Array<Marker> = new Array<Marker>();\r\n            cluster.containedPushpins.forEach(p => {\r\n                const marker: Marker = l.GetMarkerFromBingMarker(p);\r\n                if (marker) { m.push(marker); }\r\n            });\r\n            const iconInfo: IMarkerIconInfo = { markerType: MarkerTypeId.None };\r\n            const o: Microsoft.Maps.IPushpinOptions = {};\r\n            o.icon = layer.CustomMarkerCallback(m, iconInfo);\r\n            if (o.icon !== '') {\r\n                o.anchor = new Microsoft.Maps.Point(\r\n                    (iconInfo.size && iconInfo.markerOffsetRatio) ? (iconInfo.size.width * iconInfo.markerOffsetRatio.x) : 0,\r\n                    (iconInfo.size && iconInfo.markerOffsetRatio) ? (iconInfo.size.height * iconInfo.markerOffsetRatio.y) : 0\r\n                );\r\n                if (iconInfo.textOffset) { o.textOffset = new Microsoft.Maps.Point(iconInfo.textOffset.x, iconInfo.textOffset.y); }\r\n                cluster.setOptions(o);\r\n            }\r\n            if (layer.ClusterClickAction === ClusterClickAction.ZoomIntoCluster) {\r\n                Microsoft.Maps.Events.addHandler(cluster, 'click', (e: Microsoft.Maps.IMouseEventArgs) => this.ZoomIntoCluster(e));\r\n            }\r\n            if (layer.ClusterClickAction === ClusterClickAction.Spider) {\r\n                Microsoft.Maps.Events.addHandler(cluster, 'dblclick', (e: Microsoft.Maps.IMouseEventArgs) => this.ZoomIntoCluster(e));\r\n                l.InitializeSpiderClusterSupport();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Zooms into the cluster on click so that the members of the cluster comfortable fit into the zommed area.\r\n     *\r\n     * @param e - Mouse Event.\r\n     *\r\n     * @memberof BingClusterService\r\n     */\r\n    private ZoomIntoCluster(e: Microsoft.Maps.IMouseEventArgs): void {\r\n        const pin: Microsoft.Maps.ClusterPushpin = <Microsoft.Maps.ClusterPushpin>e.target;\r\n        if (pin && pin.containedPushpins) {\r\n            let bounds: Microsoft.Maps.LocationRect;\r\n            const locs: Array<Microsoft.Maps.Location> = new Array<Microsoft.Maps.Location>();\r\n            pin.containedPushpins.forEach(p => locs.push(p.getLocation()));\r\n            bounds = Microsoft.Maps.LocationRect.fromLocations(locs);\r\n\r\n            // Zoom into the bounding box of the cluster.\r\n            // Add a padding to compensate for the pixel area of the pushpins.\r\n            (<BingMapService>this._mapService).MapPromise.then((m: Microsoft.Maps.Map) => {\r\n                m.setView({ bounds: bounds, padding: 75 });\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, Observer, Subject } from 'rxjs';\r\nimport { ILatLong } from '../../interfaces/ilatlong';\r\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\r\nimport { Polygon } from '../../models/polygon';\r\nimport { MapPolygonDirective } from '../../components/map-polygon';\r\nimport { PolygonService } from '../polygon.service';\r\nimport { MapService } from '../map.service';\r\nimport { LayerService } from '../layer.service';\r\n\r\n/**\r\n * Concrete implementation of the Polygon Service abstract class for Bing Maps V8.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class BingPolygonService implements PolygonService {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _polygons: Map<MapPolygonDirective, Promise<Polygon>> = new Map<MapPolygonDirective, Promise<Polygon>>();\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of BingPolygonService.\r\n     * @param _mapService - {@link MapService} instance. The concrete {@link BingMapService} implementation is expected.\r\n     * @param _layerService - {@link BingLayerService} instance.\r\n     * The concrete {@link BingLayerService} implementation is expected.\r\n     * @param _zone - NgZone instance to support zone aware promises.\r\n     *\r\n     * @memberof BingPolygonService\r\n     */\r\n    constructor(private _mapService: MapService,\r\n        private _layerService: LayerService,\r\n        private _zone: NgZone) {\r\n    }\r\n\r\n    /**\r\n     * Adds a polygon to a map. Depending on the polygon context, the polygon will either by added to the map or a\r\n     * correcsponding layer.\r\n     *\r\n     * @param polygon - The {@link MapPolygonDirective} to be added.\r\n     *\r\n     * @memberof BingPolygonService\r\n     */\r\n    public AddPolygon(polygon: MapPolygonDirective): void {\r\n        const o: IPolygonOptions = {\r\n            id: polygon.Id,\r\n            clickable: polygon.Clickable,\r\n            draggable: polygon.Draggable,\r\n            editable: polygon.Editable,\r\n            fillColor: polygon.FillColor,\r\n            fillOpacity: polygon.FillOpacity,\r\n            geodesic: polygon.Geodesic,\r\n            labelMaxZoom: polygon.LabelMaxZoom,\r\n            labelMinZoom: polygon.LabelMinZoom,\r\n            paths: polygon.Paths,\r\n            showLabel: polygon.ShowLabel,\r\n            showTooltip: polygon.ShowTooltip,\r\n            strokeColor: polygon.StrokeColor,\r\n            strokeOpacity: polygon.StrokeOpacity,\r\n            strokeWeight: polygon.StrokeWeight,\r\n            title: polygon.Title,\r\n            visible: polygon.Visible,\r\n            zIndex: polygon.zIndex,\r\n        };\r\n        let polygonPromise: Promise<Polygon>;\r\n        if (polygon.InCustomLayer) {\r\n            polygonPromise = this._layerService.CreatePolygon(polygon.LayerId, o);\r\n        }\r\n        else {\r\n            polygonPromise = this._mapService.CreatePolygon(o);\r\n        }\r\n        this._polygons.set(polygon, polygonPromise);\r\n    }\r\n\r\n    /**\r\n      * Registers an event delegate for a polygon.\r\n      *\r\n      * @param eventName - The name of the event to register (e.g. 'click')\r\n      * @param polygon - The {@link MapPolygonDirective} for which to register the event.\r\n      * @returns - Observable emiting an instance of T each time the event occurs.\r\n      *\r\n      * @memberof BingPolygonService\r\n      */\r\n    public CreateEventObservable<T>(eventName: string, polygon: MapPolygonDirective): Observable<T> {\r\n        const b: Subject<T> = new Subject<T>();\r\n        if (eventName === 'mousemove') {\r\n            return b.asObservable();\r\n        }\r\n        if (eventName === 'rightclick') {\r\n            return b.asObservable();\r\n        }\r\n        ///\r\n        /// mousemove and rightclick are not supported by bing polygons.\r\n        ///\r\n\r\n        return Observable.create((observer: Observer<T>) => {\r\n            this._polygons.get(polygon).then((p: Polygon) => {\r\n                p.AddListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n      * Deletes a polygon.\r\n      *\r\n      * @param polygon - {@link MapPolygonDirective} to be deleted.\r\n      * @returns - A promise fullfilled once the polygon has been deleted.\r\n      *\r\n      * @memberof BingPolygonService\r\n      */\r\n    public DeletePolygon(polygon: MapPolygonDirective): Promise<void> {\r\n        const m = this._polygons.get(polygon);\r\n        if (m == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return m.then((l: Polygon) => {\r\n            return this._zone.run(() => {\r\n                l.Delete();\r\n                this._polygons.delete(polygon);\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Obtains geo coordinates for the polygon on the click location\r\n     *\r\n     * @abstract\r\n     * @param e - The mouse event. Expected to implement {@link Microsoft.Maps.IMouseEventArgs}.\r\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\r\n     *\r\n     * @memberof BingPolygonService\r\n     */\r\n    public GetCoordinatesFromClick(e: MouseEvent | any): ILatLong {\r\n        const x: Microsoft.Maps.IMouseEventArgs = <Microsoft.Maps.IMouseEventArgs>e;\r\n        return { latitude: x.location.latitude, longitude: x.location.longitude };\r\n    }\r\n\r\n    /**\r\n     * Obtains the polygon model for the polygon allowing access to native implementation functionatiliy.\r\n     *\r\n     * @param polygon - The {@link MapPolygonDirective} for which to obtain the polygon model.\r\n     * @returns - A promise that when fullfilled contains the {@link Polygon} implementation of the underlying platform.\r\n     *\r\n     * @memberof BingPolygonService\r\n     */\r\n    public GetNativePolygon(polygon: MapPolygonDirective): Promise<Polygon> {\r\n        return this._polygons.get(polygon);\r\n    }\r\n\r\n    /**\r\n     * Set the polygon options.\r\n     *\r\n     * @param polygon - {@link MapPolygonDirective} to be updated.\r\n     * @param options - {@link IPolygonOptions} object containing the options. Options will be merged with the\r\n     * options already on the underlying object.\r\n     * @returns - A promise fullfilled once the polygon options have been set.\r\n     *\r\n     * @memberof BingPolygonService\r\n     */\r\n    public SetOptions(polygon: MapPolygonDirective, options: IPolygonOptions): Promise<void> {\r\n        return this._polygons.get(polygon).then((l: Polygon) => { l.SetOptions(options); });\r\n    }\r\n\r\n    /**\r\n     * Updates the Polygon path\r\n     *\r\n     * @param polygon - {@link MapPolygonDirective} to be updated.\r\n     * @returns - A promise fullfilled once the polygon has been updated.\r\n     *\r\n     * @memberof BingPolygonService\r\n     */\r\n    public UpdatePolygon(polygon: MapPolygonDirective): Promise<void> {\r\n        const m = this._polygons.get(polygon);\r\n        if (m == null || polygon.Paths == null || !Array.isArray(polygon.Paths) || polygon.Paths.length === 0) {\r\n            return Promise.resolve();\r\n        }\r\n        return m.then((l: Polygon) =>  {\r\n            if (Array.isArray(polygon.Paths[0])) {\r\n                l.SetPaths(polygon.Paths);\r\n            }\r\n            else {\r\n                l.SetPath(<Array<ILatLong>>polygon.Paths);\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, Observer, Subject } from 'rxjs';\r\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\r\nimport { ILatLong } from '../../interfaces/ilatlong';\r\nimport { Polyline } from '../../models/polyline';\r\nimport { MapPolylineDirective } from '../../components/map-polyline';\r\nimport { PolylineService } from '../polyline.service';\r\nimport { MapService } from '../map.service';\r\nimport { LayerService } from '../layer.service';\r\n\r\n/**\r\n * Concrete implementation of the Polyline Service abstract class for Bing Maps V8.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class BingPolylineService implements PolylineService {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _polylines: Map<MapPolylineDirective, Promise<Polyline|Array<Polyline>>> =\r\n    new Map<MapPolylineDirective, Promise<Polyline|Array<Polyline>>>();\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of BingPolylineService.\r\n     * @param _mapService - {@link MapService} instance. The concrete {@link BingMapService} implementation is expected.\r\n     * @param _layerService - {@link LayerService} instance.\r\n     * The concrete {@link BingLayerService} implementation is expected.\r\n     * @param _zone - NgZone instance to support zone aware promises.\r\n     *\r\n     * @memberof BingPolylineService\r\n     */\r\n    constructor(private _mapService: MapService,\r\n        private _layerService: LayerService,\r\n        private _zone: NgZone) {\r\n    }\r\n\r\n    ///\r\n    /// Public members and MarkerService implementation\r\n    ///\r\n\r\n    /**\r\n     * Adds a polyline to a map. Depending on the polyline context, the polyline will either by added to the map or a\r\n     * corresponding layer.\r\n     *\r\n     * @param polyline - The {@link MapPolylineDirective} to be added.\r\n     *\r\n     * @memberof BingPolylineService\r\n     */\r\n    public AddPolyline(polyline: MapPolylineDirective): void {\r\n        const o: IPolylineOptions = {\r\n            id: polyline.Id,\r\n            clickable: polyline.Clickable,\r\n            draggable: polyline.Draggable,\r\n            editable: polyline.Editable,\r\n            geodesic: polyline.Geodesic,\r\n            path: polyline.Path,\r\n            showTooltip: polyline.ShowTooltip,\r\n            strokeColor: polyline.StrokeColor,\r\n            strokeOpacity: polyline.StrokeOpacity,\r\n            strokeWeight: polyline.StrokeWeight,\r\n            title: polyline.Title,\r\n            visible: polyline.Visible,\r\n            zIndex: polyline.zIndex,\r\n        };\r\n        let polylinePromise: Promise<Polyline|Array<Polyline>>;\r\n        if (polyline.InCustomLayer) {\r\n            polylinePromise = this._layerService.CreatePolyline(polyline.LayerId, o);\r\n        } else {\r\n            polylinePromise = this._mapService.CreatePolyline(o);\r\n        }\r\n        this._polylines.set(polyline, polylinePromise);\r\n    }\r\n\r\n    /**\r\n      * Registers an event delegate for a line.\r\n      *\r\n      * @param eventName - The name of the event to register (e.g. 'click')\r\n      * @param polyline - The {@link MapPolylineDirective} for which to register the event.\r\n      * @returns - Observable emiting an instance of T each time the event occurs.\r\n      *\r\n      * @memberof BingPolylineService\r\n      */\r\n    public CreateEventObservable<T>(eventName: string, polyline: MapPolylineDirective): Observable<T> {\r\n        const b: Subject<T> = new Subject<T>();\r\n        if (eventName === 'mousemove') {\r\n            return b.asObservable();\r\n        }\r\n        if (eventName === 'rightclick') {\r\n            return b.asObservable();\r\n        }\r\n        ///\r\n        /// mousemove and rightclick are not supported by bing polygons.\r\n        ///\r\n        return Observable.create((observer: Observer<T>) => {\r\n            this._polylines.get(polyline).then(p => {\r\n                const x: Array<Polyline> = Array.isArray(p) ? p : [p];\r\n                x.forEach(line => line.AddListener(eventName, (e: T) => this._zone.run(() => observer.next(e))));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n      * Deletes a polyline.\r\n      *\r\n      * @param polyline - {@link MapPolylineDirective} to be deleted.\r\n      * @returns - A promise fullfilled once the polyline has been deleted.\r\n      *\r\n      * @memberof BingPolylineService\r\n      */\r\n    public DeletePolyline(polyline: MapPolylineDirective): Promise<void> {\r\n        const m = this._polylines.get(polyline);\r\n        if (m == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return m.then((l: Polyline) => {\r\n            return this._zone.run(() => {\r\n                const x: Array<Polyline> = Array.isArray(l) ? l : [l];\r\n                x.forEach(line =>  line.Delete());\r\n                this._polylines.delete(polyline);\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Obtains geo coordinates for the marker on the click location\r\n     *\r\n     * @abstract\r\n     * @param e - The mouse event.\r\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\r\n     *\r\n     * @memberof BingPolylineService\r\n     */\r\n    public GetCoordinatesFromClick(e: Microsoft.Maps.IMouseEventArgs): ILatLong {\r\n        if (!e) { return null; }\r\n        if (!e.location) { return null; }\r\n        return { latitude: e.location.latitude, longitude: e.location.longitude };\r\n    }\r\n\r\n    /**\r\n     * Obtains the marker model for the marker allowing access to native implementation functionatiliy.\r\n     *\r\n     * @param polyline - The {@link MapPolylineDirective} for which to obtain the polyline model.\r\n     * @returns - A promise that when fullfilled contains the {@link Polyline}\r\n     * implementation of the underlying platform. For complex paths, returns an array of polylines.\r\n     *\r\n     * @memberof BingPolylineService\r\n     */\r\n    public GetNativePolyline(polyline: MapPolylineDirective): Promise<Polyline|Array<Polyline>> {\r\n        return this._polylines.get(polyline);\r\n    }\r\n\r\n    /**\r\n     * Set the polyline options.\r\n     *\r\n     * @param polyline - {@link MapPolylineDirective} to be updated.\r\n     * @param options - {@link IPolylineOptions} object containing the options. Options will be merged with the\r\n     * options already on the underlying object.\r\n     * @returns - A promise fullfilled once the polyline options have been set.\r\n     *\r\n     * @memberof BingPolylineService\r\n     */\r\n    public SetOptions(polyline: MapPolylineDirective, options: IPolylineOptions): Promise<void> {\r\n        return this._polylines.get(polyline).then(l => {\r\n            const x: Array<Polyline> = Array.isArray(l) ? l : [l];\r\n            x.forEach(line => line.SetOptions(options));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the Polyline path\r\n     *\r\n     * @param polyline - {@link MapPolylineDirective} to be updated.\r\n     * @returns - A promise fullfilled once the polyline has been updated.\r\n     *\r\n     * @memberof BingPolylineService\r\n     */\r\n    public UpdatePolyline(polyline: MapPolylineDirective): Promise<void> {\r\n        const m = this._polylines.get(polyline);\r\n        if (m == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return m.then(l => this._zone.run(() => {\r\n            const x: Array<Polyline> = Array.isArray(l) ? l : [l];\r\n            const p: Array<Array<ILatLong>> =\r\n                polyline.Path.length > 0 && Array.isArray(polyline.Path[0]) ? <Array<Array<ILatLong>>>polyline.Path :\r\n                <Array<Array<ILatLong>>>[polyline.Path];\r\n             x.forEach((line, index) => {\r\n                 if (p.length > index) { line.SetPath(p[index]); }\r\n            });\r\n            if (Array.isArray(l) && l.length > p.length) {\r\n                l.splice(p.length - 1).forEach(line => line.Delete());\r\n            }\r\n        }));\r\n    }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { MapServiceFactory } from '../mapservicefactory';\r\nimport { MapService } from '../map.service';\r\nimport { MapAPILoader, WindowRef, DocumentRef } from '../mapapiloader';\r\nimport { MarkerService } from '../marker.service';\r\nimport { InfoBoxService } from '../infobox.service';\r\nimport { LayerService } from '../layer.service';\r\nimport { ClusterService } from '../cluster.service';\r\nimport { PolygonService } from '../polygon.service';\r\nimport { PolylineService } from '../polyline.service';\r\nimport { BingMapAPILoader, BingMapAPILoaderConfig } from './bing-map.api-loader.service';\r\nimport { BingInfoBoxService } from './bing-infobox.service';\r\nimport { BingMarkerService } from './bing-marker.service';\r\nimport { BingMapService } from './bing-map.service';\r\nimport { BingLayerService } from './bing-layer.service';\r\nimport { BingClusterService } from './bing-cluster.service';\r\nimport { BingPolygonService } from './bing-polygon.service';\r\nimport { BingPolylineService } from './bing-polyline.service';\r\n\r\n/**\r\n * Implements a factory to create thre necessary Bing Maps V8 specific service instances.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class BingMapServiceFactory implements MapServiceFactory {\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of BingMapServiceFactory.\r\n     * @param _loader - {@link MapAPILoader} implementation for the Bing Map V8 provider.\r\n     * @param _zone - NgZone object to implement zone aware promises.\r\n     *\r\n     * @memberof BingMapServiceFactory\r\n     */\r\n    constructor(private _loader: MapAPILoader, private _zone: NgZone) { }\r\n\r\n    ///\r\n    /// Public methods and MapServiceFactory implementation.\r\n    ///\r\n\r\n    /**\r\n     * Creates the map service for the Bing Maps V8 implementation.\r\n     *\r\n     * @returns - {@link MapService}. A concreted instance of the {@link BingMapService}.\r\n     *\r\n     * @memberof BingMapServiceFactory\r\n     */\r\n    public Create(): MapService {\r\n        return new BingMapService(this._loader, this._zone);\r\n    }\r\n\r\n    /**\r\n     * Creates the cluster service for the Bing Maps V8 implementation.\r\n     *\r\n     * @param map - {@link MapService}. A concreted instance of the {@link BingMapService}.\r\n     * @returns - {@link ClusterService}. A concreted instance of the {@link BingClusterService}.\r\n     *\r\n     * @memberof BingMapServiceFactory\r\n     */\r\n    public CreateClusterService(_mapService: BingMapService): ClusterService {\r\n        return new BingClusterService(_mapService, this._zone);\r\n    }\r\n\r\n    /**\r\n     * Creates thh info box service for the Bing Maps V8 implementation.\r\n     *\r\n     * @param map - {@link MapService}. A concreted instance of the {@link BingMapService}.\r\n     * @returns - {@link InfoBoxService}. A concreted instance of the {@link BingInfoBoxService}.\r\n     *\r\n     * @memberof BingMapServiceFactory\r\n     */\r\n    public CreateInfoBoxService(_mapService: BingMapService): InfoBoxService {\r\n        return new BingInfoBoxService(_mapService, this._zone);\r\n    }\r\n\r\n    /**\r\n     * Creates the layer service for the Bing Maps V8 implementation.\r\n     *\r\n     * @param map - {@link MapService}. A concreted instance of the {@link BingMapService}.\r\n     * @returns - {@link LayerService}. A concreted instance of the {@link BingLayerService}.\r\n     *\r\n     * @memberof BingMapServiceFactory\r\n     */\r\n    public CreateLayerService(_mapService: BingMapService): LayerService {\r\n        return new BingLayerService(_mapService, this._zone);\r\n    }\r\n\r\n    /**\r\n     * Creates the marker service for the Bing Maps V8 implementation.\r\n     *\r\n     * @param map - {@link MapService}. A concreted instance of the {@link BingMapService}.\r\n     * @param layers - {@link LayerService}. A concreted instance of the {@link BingLayerService}.\r\n     * @param clusters  - {@link ClusterService}. A concreted instance of the {@link BingClusterService}.\r\n     * @returns - {@link MarkerService}. A concreted instance of the {@link BingMarkerService}.\r\n     *\r\n     * @memberof BingMapServiceFactory\r\n     */\r\n    public CreateMarkerService(_mapService: BingMapService,\r\n        _layerService: BingLayerService, _clusterService: BingClusterService): MarkerService {\r\n        return new BingMarkerService(_mapService, _layerService, _clusterService, this._zone);\r\n    }\r\n\r\n    /**\r\n     * Creates the polygon service for the Bing Maps V8 implementation.\r\n     *\r\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\r\n     * @param layers - {@link LayerService} implementation for the underlying map architecture.\r\n     * @returns - {@link PolygonService} implementation for the underlying map architecture.\r\n     *\r\n     * @memberof MapServiceFactory\r\n     */\r\n    public CreatePolygonService(map: MapService, layers: LayerService): PolygonService {\r\n        return new BingPolygonService(map, layers, this._zone);\r\n    }\r\n\r\n    /**\r\n     * Creates the polyline service for the Bing Maps V8 implementation.\r\n     *\r\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\r\n     * @param layers - {@link LayerService} implementation for the underlying map architecture.\r\n     * @returns - {@link PolylineService} implementation for the underlying map architecture.\r\n     *\r\n     * @memberof MapServiceFactory\r\n     */\r\n    public CreatePolylineService(map: MapService, layers: LayerService): PolylineService {\r\n        return new BingPolylineService(map, layers, this._zone);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Creates a new instance of a plaform specific MapServiceFactory.\r\n *\r\n * @export\r\n * @param apiLoader - An {@link MapAPILoader} instance. This is expected to the a {@link BingMapAPILoader}.\r\n * @param zone - An NgZone instance to provide zone aware promises.\r\n *\r\n * @returns -  A {@link MapServiceFactory} instance.\r\n */\r\nexport function BingMapServiceFactoryFactory(apiLoader: MapAPILoader, zone: NgZone): MapServiceFactory {\r\n    return new BingMapServiceFactory(apiLoader, zone);\r\n}\r\n\r\n/**\r\n * Creates a new instance of a plaform specific MapLoaderFactory.\r\n *\r\n * @export\r\n * @returns - A {@link MapAPILoader} instance.\r\n */\r\nexport function BingMapLoaderFactory(): MapAPILoader {\r\n    return new BingMapAPILoader(new BingMapAPILoaderConfig(), new WindowRef(), new DocumentRef());\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\r\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\r\nimport { Marker } from '../../models/marker';\r\nimport { Layer } from '../../models/layer';\r\nimport { MarkerTypeId } from '../../models/marker-type-id';\r\nimport { MapService } from '../map.service';\r\nimport { MapLayerDirective } from '../../components/map-layer';\r\nimport { LayerService } from '../layer.service';\r\nimport { GoogleMapService } from './google-map.service';\r\nimport { GoogleConversions } from './google-conversions';\r\nimport { GoogleMarker } from '../../models/google/google-marker';\r\nimport * as GoogleMapTypes from './google-map-types';\r\n\r\ndeclare var google: any;\r\n\r\n/**\r\n * This abstract partially implements the contract for the {@link LayerService}\r\n * and {@link ClusterService} for the Google Maps archtiecture. It serves\r\n * as the base class for basic layer ({@link GoogleLayerService}) and cluster layer ({@link GoogleClusterLayer}).\r\n *\r\n * @export\r\n * @abstract\r\n */\r\nexport abstract class GoogleLayerBase {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    protected abstract _layers: Map<number, Promise<Layer>>;\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of GoogleLayerBase.\r\n     * @param _mapService - Concrete {@link MapService} implementation for Google Maps.\r\n     * An instance of {@link GoogleMapService}.\r\n     * @param _zone - NgZone instance to provide zone aware promises.\r\n     *\r\n     * @memberof GoogleLayerBase\r\n     */\r\n    constructor(protected _mapService: MapService, protected _zone: NgZone) { }\r\n\r\n    ///\r\n    /// Public methods\r\n    ///\r\n\r\n    /**\r\n     * Adds a layer to the map.\r\n     *\r\n     * @abstract\r\n     * @param layer - MapLayerDirective component object.\r\n     * Generally, MapLayerDirective will be injected with an instance of the\r\n     * LayerService and then self register on initialization.\r\n     *\r\n     * @memberof GoogleLayerBase\r\n     */\r\n    public abstract AddLayer(layer: MapLayerDirective): void;\r\n\r\n    /**\r\n     * Deletes the layer\r\n     *\r\n     * @param layer - MapLayerDirective component object for which to retrieve the layer.\r\n     * @returns - A promise that is fullfilled when the layer has been removed.\r\n     *\r\n     * @memberof GoogleLayerBase\r\n     */\r\n    public DeleteLayer(layer: MapLayerDirective): Promise<void> {\r\n        const l = this._layers.get(layer.Id);\r\n        if (l == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return l.then((l1: Layer) => {\r\n            return this._zone.run(() => {\r\n                l1.Delete();\r\n                this._layers.delete(layer.Id);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the Layer model represented by this layer.\r\n     *\r\n     * @param layer - MapLayerDirective component object or layer id for which to retrieve the layer model.\r\n     * @returns - A promise that when resolved contains the Layer model.\r\n     *\r\n     * @memberof GoogleLayerBase\r\n     */\r\n    public GetNativeLayer(layer: MapLayerDirective|number): Promise<Layer> {\r\n        let p: Promise<Layer> = null;\r\n        if (typeof(layer) === 'number') {\r\n            p = this._layers.get(layer);\r\n        }\r\n        else {\r\n            p = this._layers.get((<MapLayerDirective>layer).Id);\r\n        }\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Creates a marker in the layer.\r\n     *\r\n     * @param layer - The Id of the layer in which to create the marker.\r\n     * @param options - {@link IMarkerOptions} object containing the marker properties.\r\n     * @returns - A promise that when fullfilled contains the {@link Marker} model for the created marker.\r\n     *\r\n     * @memberof GoogleLayerBase\r\n     */\r\n    public CreateMarker(layer: number, options: IMarkerOptions): Promise<Marker> {\r\n        const mp: Promise<GoogleMapTypes.GoogleMap> = this._mapService.MapPromise;\r\n        const lp: Promise<Layer> = this._layers.get(layer);\r\n\r\n        return Promise.all([mp, lp]).then(([map, l]) => {\r\n            const payload = (x: GoogleMapTypes.MarkerOptions): GoogleMarker => {\r\n                const marker = new google.maps.Marker(x);\r\n                if (options.metadata) { options.metadata.forEach((val: any, key: string) => marker.Metadata.set(key, val)); }\r\n                marker.setMap(map);\r\n                const m = new GoogleMarker(marker);\r\n                m.IsFirst = options.isFirst;\r\n                m.IsLast = options.isLast;\r\n                if (options.metadata) { options.metadata.forEach((val: any, key: string) => m.Metadata.set(key, val)); }\r\n                l.AddEntity(m);\r\n                return m;\r\n            };\r\n            const o: GoogleMapTypes.MarkerOptions = GoogleConversions.TranslateMarkerOptions(options);\r\n            if (options.iconInfo && options.iconInfo.markerType) {\r\n                const s = Marker.CreateMarker(options.iconInfo);\r\n                if (typeof(s) === 'string') {\r\n                    o.icon = s;\r\n                    return payload(o);\r\n                }\r\n                else {\r\n                    return s.then(x => {\r\n                        o.icon = x.icon;\r\n                        return payload(o);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                return payload(o);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an array of unbound markers. Use this method to create arrays of markers to be used in bulk\r\n     * operations.\r\n     *\r\n     * @param options - Marker options defining the markers.\r\n     * @param markerIcon - Optional information to generate custom markers. This will be applied to all markers.\r\n     * @returns - A promise that when fullfilled contains the an arrays of the Marker models.\r\n     *\r\n     * @memberof GoogleLayerBase\r\n     */\r\n    public CreateMarkers(options: Array<IMarkerOptions>, markerIcon?: IMarkerIconInfo): Promise<Array<Marker>> {\r\n        const payload = (icon: string): Array<GoogleMarker> => {\r\n            const markers: Array<GoogleMarker> = options.map(mo => {\r\n                const o: GoogleMapTypes.MarkerOptions = GoogleConversions.TranslateMarkerOptions(mo);\r\n                if (icon && icon !== '') { o.icon = icon; }\r\n                const pushpin = new google.maps.Marker(o);\r\n                const marker: GoogleMarker = new GoogleMarker(pushpin);\r\n                marker.IsFirst = mo.isFirst;\r\n                marker.IsLast = mo.isLast;\r\n                if (mo.metadata) { mo.metadata.forEach((val: any, key: string) => marker.Metadata.set(key, val)); }\r\n                return marker;\r\n            });\r\n            return markers;\r\n        };\r\n        const p: Promise<Array<Marker>> = new Promise<Array<Marker>>((resolve, reject) => {\r\n            if (markerIcon && markerIcon.markerType) {\r\n                const s = Marker.CreateMarker(markerIcon);\r\n                if (typeof(s) === 'string') { resolve(payload(s)); }\r\n                else {\r\n                    return s.then(x => {\r\n                        resolve(payload(x.icon));\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                resolve (payload(null));\r\n            }\r\n        });\r\n        return p;\r\n    }\r\n\r\n    ///\r\n    /// Protected methods\r\n    ///\r\n\r\n    /**\r\n     * Gets the layer based on its id.\r\n     *\r\n     * @protected\r\n     * @param id - Layer Id.\r\n     * @returns - A promise that when fullfilled contains the {@link Layer} model for the layer.\r\n     *\r\n     * @memberof GoogleLayerBase\r\n     */\r\n    protected GetLayerById(id: number): Promise<Layer> {\r\n        let p: Promise<Layer>;\r\n        this._layers.forEach((l: Promise<Layer>, k: number) => { if (k === id) { p = l; } });\r\n        return p;\r\n    }\r\n\r\n}\r\n","ï»¿import { IClusterIconInfo } from '../../interfaces/icluster-icon-info';\r\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\r\nimport { MarkerService } from '../marker.service';\r\nimport { IClusterOptions } from '../../interfaces/icluster-options';\r\nimport { Injectable, NgZone } from '@angular/core';\r\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\r\nimport { Marker } from '../../models/marker';\r\nimport { Layer } from '../../models/layer';\r\nimport { MarkerTypeId } from '../../models/marker-type-id';\r\nimport { ClusterClickAction } from '../../models/cluster-click-action';\r\nimport { ClusterLayerDirective } from '../../components/cluster-layer';\r\nimport { ClusterService } from '../cluster.service';\r\nimport { MapService } from '../map.service';\r\nimport { GoogleLayerBase } from './google-layer-base';\r\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\r\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\r\nimport { Polygon } from '../../models/polygon';\r\nimport { Polyline } from '../../models/polyline';\r\nimport * as GoogleMapTypes from './google-map-types';\r\n\r\n@Injectable()\r\nexport class GoogleClusterService extends GoogleLayerBase implements ClusterService {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    protected _layers: Map<number, Promise<Layer>> = new Map<number, Promise<Layer>>();\r\n    protected _layerStyles: Map<number, Array<GoogleMapTypes.ClusterStyle>> = new Map<number, Array<GoogleMapTypes.ClusterStyle>>();\r\n\r\n    ///\r\n    /// Static methods\r\n    ///\r\n\r\n    /**\r\n     * Creates the cluster icon from the styles\r\n     *\r\n     * @param styles\r\n     * @returns - Promise that when resolved contains an Array of IClusterIconInfo objects\r\n     * containing the hydrated cluster icons.\r\n     * @memberof GoogleClusterService\r\n     */\r\n    public static CreateClusterIcons(styles: Array<IClusterIconInfo>): Promise<Array<IClusterIconInfo>> {\r\n        const i: Promise<Array<IClusterIconInfo>> = new Promise<Array<IClusterIconInfo>>((resolve, reject) => {\r\n            const pa = new Array<Promise<{icon: string, iconInfo: IMarkerIconInfo}>>();\r\n            styles.forEach((style, index) => {\r\n                if (style.iconInfo) {\r\n                    const s: string|Promise<{icon: string, iconInfo: IMarkerIconInfo}> = Marker.CreateMarker(style.iconInfo);\r\n                    if (typeof(s) === 'string') {\r\n                        style.url = s;\r\n                        if (style.width == null) {\r\n                            style.width = style.iconInfo.size.width;\r\n                            style.height = style.iconInfo.size.height;\r\n                        }\r\n                        if (style.iconInfo.markerOffsetRatio && style.iconInfo.size && style.anchor == null) {\r\n                            const o: IMarkerIconInfo = style.iconInfo;\r\n                            style.anchor = [\r\n                                o.size.width * o.markerOffsetRatio.x,\r\n                                o.size.height * o.markerOffsetRatio.y\r\n                            ];\r\n                        }\r\n                        delete style.iconInfo;\r\n                    }\r\n                    else {\r\n                        s.then(x => {\r\n                            style.url = x.icon;\r\n                            if (style.width == null) {\r\n                                style.width = x.iconInfo.size.width;\r\n                                style.height = x.iconInfo.size.height;\r\n                            }\r\n                            if (x.iconInfo.markerOffsetRatio && x.iconInfo.size && style.anchor == null) {\r\n                                const o: IMarkerIconInfo = x.iconInfo;\r\n                                style.anchor = [\r\n                                    o.size.width * o.markerOffsetRatio.x,\r\n                                    o.size.height * o.markerOffsetRatio.y\r\n                                ];\r\n                            }\r\n                            delete style.iconInfo;\r\n                        });\r\n                        pa.push(s);\r\n                    }\r\n                }\r\n            });\r\n            if (pa.length === 0) { resolve(styles); }\r\n            else {\r\n                Promise.all(pa).then(() => {\r\n                    resolve(styles);\r\n                });\r\n            }\r\n        });\r\n        return i;\r\n    }\r\n\r\n    ///\r\n    /// Constructors\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of GoogleClusterService.\r\n     * @param _mapService\r\n     * @param _zone\r\n     * @memberof GoogleClusterService\r\n     */\r\n    constructor(_mapService: MapService, _zone: NgZone) {\r\n        super(_mapService, _zone);\r\n    }\r\n\r\n    /**\r\n     * Adds the cluster layer to the map\r\n     *\r\n     * @param layer\r\n     * @memberof GoogleClusterService\r\n     */\r\n    public AddLayer(layer: ClusterLayerDirective): void {\r\n        const options: IClusterOptions = {\r\n            id: layer.Id,\r\n            visible: layer.Visible,\r\n            clusteringEnabled: layer.ClusteringEnabled,\r\n            zoomOnClick: layer.ClusterClickAction === ClusterClickAction.ZoomIntoCluster\r\n        };\r\n        if (layer.GridSize) { options.gridSize = layer.GridSize; }\r\n        if (layer.MinimumClusterSize) { options.minimumClusterSize = layer.MinimumClusterSize; }\r\n        if (layer.Styles) { options.styles = layer.Styles; }\r\n        if (layer.UseDynamicSizeMarkers) {\r\n            options.styles = null;\r\n            // do not to attempt to setup styles here as the dynamic call back will generate them.\r\n        }\r\n        else {\r\n            options.styles = [{\r\n                height: 30,\r\n                width: 35,\r\n                textColor: 'white',\r\n                textSize: 11,\r\n                backgroundPosition: 'center',\r\n                iconInfo: {\r\n                    markerType: MarkerTypeId.FontMarker,\r\n                    fontName: 'FontAwesome',\r\n                    fontSize: 30,\r\n                    color: 'green',\r\n                    text: '\\uF111'\r\n                }\r\n            }];\r\n        }\r\n        const dynamicClusterCallback = (markers: Array<GoogleMapTypes.Marker>, numStyles: number,\r\n            clusterer: GoogleMapTypes.MarkerClusterer) => {\r\n            // dynamically ensure that the necessary style for this cluster icon exists and\r\n            // the clusterer is already hooked up to the styles array via pointer, so we only\r\n            // need to update the style. Since the clusterer re-renders a cluster icon is the\r\n            // the marker count changes, we will only need to retain the current icon as opposed\r\n            // to all cluster icon.\r\n            const styles: Array<GoogleMapTypes.ClusterStyle> = this._layerStyles.get(layer.Id);\r\n            const iconInfo: IMarkerIconInfo = {\r\n                markerType: MarkerTypeId.None\r\n            };\r\n            const icon: string = layer.CustomMarkerCallback(<any>markers, iconInfo);\r\n            styles[0] = {\r\n                url: `\\\"data:image/svg+xml;utf8,${icon}\\\"`,\r\n                height: iconInfo.size.height,\r\n                width: iconInfo.size.width,\r\n                textColor: 'white',\r\n                textSize: 11,\r\n                backgroundPosition: 'center',\r\n            };\r\n            return {\r\n                text: markers.length.toString(),\r\n                index: 1\r\n            };\r\n        };\r\n        const resetStyles = (clusterer: GoogleMapTypes.MarkerClusterer) => {\r\n            if (this._layerStyles.has(layer.Id)) { this._layerStyles.get(layer.Id).splice(0); }\r\n            else {\r\n                const styles: Array<GoogleMapTypes.ClusterStyle> = new Array<GoogleMapTypes.ClusterStyle>();\r\n                styles.push({});\r\n                this._layerStyles.set(layer.Id, styles);\r\n                clusterer.setStyles(styles);\r\n                    // this is important for dynamic styles as the pointer to this array gets passed\r\n                    // around key objects in the clusterer. Therefore, it must be initialized here in order for\r\n                    // updates to the styles to be visible.\r\n                    // also, we need to add at least one style to prevent the default styles from being picked up.\r\n            }\r\n        };\r\n\r\n        const layerPromise = this._mapService.CreateClusterLayer(options);\r\n        this._layers.set(layer.Id, layerPromise);\r\n        layerPromise.then(l => {\r\n            const clusterer: GoogleMapTypes.MarkerClusterer = <GoogleMapTypes.MarkerClusterer>l.NativePrimitve;\r\n            if (options.styles) {\r\n                const s  = GoogleClusterService.CreateClusterIcons(options.styles);\r\n                s.then(x => {\r\n                    clusterer.setStyles(<Array<GoogleMapTypes.ClusterStyle>>x);\r\n                });\r\n            }\r\n            else {\r\n                resetStyles(clusterer);\r\n                this._mapService.MapPromise.then((m: GoogleMapTypes.GoogleMap) => {\r\n                    m.addListener('zoom_changed', () => {\r\n                        resetStyles(clusterer);\r\n                    });\r\n                });\r\n                clusterer.setCalculator((m, n) => {\r\n                    return dynamicClusterCallback(m, n, clusterer);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create a marker in the cluster\r\n     *\r\n     * @param layer\r\n     * @param options\r\n     * @memberof GoogleClusterService\r\n     */\r\n    public CreateMarker(layer: number, options: IMarkerOptions): Promise<Marker> {\r\n        const p: Promise<Layer> = this.GetLayerById(layer);\r\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\r\n\r\n        return p.then((l: Layer) => {\r\n            return this._mapService.CreateMarker(options)\r\n                .then((marker: Marker) => {\r\n                    marker.IsFirst = options.isFirst;\r\n                    marker.IsLast = options.isLast;\r\n                    l.AddEntity(marker);\r\n                    return marker;\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Starts the clustering\r\n     *\r\n     * @param layer\r\n     * @memberof GoogleClusterService\r\n     */\r\n    public StartClustering(layer: ClusterLayerDirective): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Stops the clustering\r\n     *\r\n     * @param layer\r\n     * @memberof GoogleClusterService\r\n     */\r\n    public StopClustering(layer: ClusterLayerDirective): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Adds a polygon to the layer.\r\n     *\r\n     * @abstract\r\n     * @param layer - The id of the layer to which to add the polygon.\r\n     * @param options - Polygon options defining the polygon.\r\n     * @returns - A promise that when fullfilled contains the an instance of the Polygon model.\r\n     *\r\n     * @memberof GoogleClusterService\r\n     */\r\n    public CreatePolygon(layer: number, options: IPolygonOptions): Promise<Polygon> {\r\n        throw (new Error('Polygons are not supported in clustering layers. You can only use markers.'));\r\n    }\r\n\r\n    /**\r\n     * Creates an array of unbound polygons. Use this method to create arrays of polygons to be used in bulk\r\n     * operations.\r\n     *\r\n     * @param layer - The id of the layer to which to add the polygon.\r\n     * @param options - Polygon options defining the polygons.\r\n     * @returns - A promise that when fullfilled contains the an arrays of the Polygon models.\r\n     *\r\n     * @memberof GoogleClusterService\r\n     */\r\n    public CreatePolygons(layer: number, options: Array<IPolygonOptions>): Promise<Array<Polygon>> {\r\n        throw (new Error('Polygons are not supported in clustering layers. You can only use markers.'));\r\n    }\r\n\r\n    /**\r\n     * Adds a polyline to the layer.\r\n     *\r\n     * @abstract\r\n     * @param layer - The id of the layer to which to add the line.\r\n     * @param options - Polyline options defining the line.\r\n     * @returns - A promise that when fullfilled contains the an instance of the Polyline (or an\r\n     * array of polygons for complex paths) model.\r\n     *\r\n     * @memberof GoogleClusterService\r\n     */\r\n    public CreatePolyline(layer: number, options: IPolylineOptions): Promise<Polyline|Array<Polyline>> {\r\n        throw (new Error('Polylines are not supported in clustering layers. You can only use markers.'));\r\n    }\r\n\r\n    /**\r\n     * Creates an array of unbound polylines. Use this method to create arrays of polylines to be used in bulk\r\n     * operations.\r\n     *\r\n     * @param layer - The id of the layer to which to add the polylines.\r\n     * @param options - Polyline options defining the polylines.\r\n     * @returns - A promise that when fullfilled contains the an arrays of the Polyline models.\r\n     *\r\n     * @memberof GoogleClusterService\r\n     */\r\n    public CreatePolylines(layer: number, options: Array<IPolylineOptions>): Promise<Array<Polyline|Array<Polyline>>> {\r\n        throw (new Error('Polylines are not supported in clustering layers. You can only use markers.'));\r\n    }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { InfoBoxComponent } from '../../components/infobox';\r\nimport { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\r\nimport { ILatLong } from '../../interfaces/ilatlong';\r\nimport { InfoBoxService } from '../infobox.service';\r\nimport { MarkerService } from '../marker.service';\r\nimport { MapService } from '../map.service';\r\nimport { InfoWindow } from '../../models/info-window';\r\nimport { GoogleInfoWindow } from '../../models/google/google-info-window';\r\nimport { GoogleMarker } from '../../models/google/google-marker';\r\nimport { GoogleMapEventsLookup } from '../../models/google/google-events-lookup';\r\n\r\n@Injectable()\r\nexport class GoogleInfoBoxService extends InfoBoxService {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n\r\n    private _boxes: Map<InfoBoxComponent, Promise<InfoWindow>> = new Map<InfoBoxComponent, Promise<GoogleInfoWindow>>();\r\n\r\n    ///\r\n    /// Constructors\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of GoogleInfoBoxService.\r\n     * @param _mapService\r\n     * @param _markerService\r\n     * @param _zone\r\n     *\r\n     * @memberof GoogleInfoBoxService\r\n     */\r\n    constructor(private _mapService: MapService,\r\n        private _markerService: MarkerService,\r\n        private _zone: NgZone) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of an info window\r\n     *\r\n     * @param info\r\n     *\r\n     * @memberof GoogleInfoBoxService\r\n     */\r\n    public AddInfoWindow(info: InfoBoxComponent): void {\r\n        const options: IInfoWindowOptions = {};\r\n        if (info.HtmlContent !== '') {\r\n            options.htmlContent = info.HtmlContent;\r\n        }\r\n        else {\r\n            options.title = info.Title;\r\n            options.description = info.Description;\r\n        }\r\n        if (info.xOffset || info.yOffset) {\r\n            if (options.pixelOffset == null) { options.pixelOffset = { x: 0, y: 0 }; }\r\n            if (info.xOffset) { options.pixelOffset.x = info.xOffset; }\r\n            if (info.yOffset) { options.pixelOffset.y = info.yOffset; }\r\n        }\r\n        options.disableAutoPan = info.DisableAutoPan;\r\n        options.visible = info.Visible;\r\n\r\n        if (typeof info.Latitude === 'number' && typeof info.Longitude === 'number') {\r\n            options.position = { latitude: info.Latitude, longitude: info.Longitude };\r\n        }\r\n        const infoWindowPromise = this._mapService.CreateInfoWindow(options);\r\n        this._boxes.set(info, infoWindowPromise);\r\n    }\r\n\r\n    /**\r\n     * Closes the info window\r\n     *\r\n     * @param info\r\n     * @returns -  A promise that is resolved when the info box is closed.\r\n     *\r\n     * @memberof GoogleInfoBoxService\r\n     */\r\n    public Close(info: InfoBoxComponent): Promise<void> {\r\n        return this._boxes.get(info).then(w => {\r\n            w.Close();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Registers an event delegate for an info window.\r\n     *\r\n     * @param eventName - The name of the event to register (e.g. 'click')\r\n     * @param infoComponent - The {@link InfoBoxComponent} for which to register the event.\r\n     * @returns - Observable emiting an instance of T each time the event occurs.\r\n     *\r\n     * @memberof GoogleInfoBoxService\r\n     */\r\n    public CreateEventObservable<T>(eventName: string, infoComponent: InfoBoxComponent): Observable<T> {\r\n        const googleEventName: string = GoogleMapEventsLookup[eventName];\r\n        return Observable.create((observer: Observer<T>) => {\r\n            this._boxes.get(infoComponent).then((b: InfoWindow) => {\r\n                b.AddListener(googleEventName, (e: T) => this._zone.run(() => observer.next(e)));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes the info window\r\n     *\r\n     * @param info\r\n     *\r\n     * @memberof GoogleInfoBoxService\r\n     */\r\n    public DeleteInfoWindow(info: InfoBoxComponent): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Opens the info window. Window opens on a marker, if supplied, or a specific location if given\r\n     *\r\n     * @param info\r\n     * @param [loc]\r\n     *\r\n     * @memberof GoogleInfoBoxService\r\n     */\r\n    public Open(info: InfoBoxComponent, loc?: ILatLong): Promise<void> {\r\n        if (info.CloseInfoBoxesOnOpen || info.Modal) {\r\n            // close all open info boxes\r\n            this._boxes.forEach((box: Promise<InfoWindow>, i: InfoBoxComponent) => {\r\n                if (info.Id !== i.Id) {\r\n                    box.then((w) => {\r\n                        if (w.IsOpen) {\r\n                            w.Close();\r\n                            i.Close();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        return this._boxes.get(info).then((w: GoogleInfoWindow) => {\r\n            const options: IInfoWindowOptions = {};\r\n            if (info.HtmlContent !== '') {\r\n                options.htmlContent = info.HtmlContent;\r\n            }\r\n            else {\r\n                options.title = info.Title;\r\n                options.description = info.Description;\r\n            }\r\n            w.SetOptions(options);\r\n            if (info.HostMarker != null) {\r\n                return this._markerService.GetNativeMarker(info.HostMarker).then((marker) => {\r\n                    return this._mapService.MapPromise.then((map) => (<GoogleInfoWindow>w).Open((<GoogleMarker>marker).NativePrimitve));\r\n                });\r\n            }\r\n            return this._mapService.MapPromise.then((map) => {\r\n                if (loc) { w.SetPosition(loc); }\r\n                w.Open();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the info window options\r\n     *\r\n     * @param info\r\n     * @param options\r\n     *\r\n     * @memberof GoogleInfoBoxService\r\n     */\r\n    public SetOptions(info: InfoBoxComponent, options: IInfoWindowOptions): Promise<void> {\r\n        return this._boxes.get(info).then((w: GoogleInfoWindow) => {\r\n            w.SetOptions(options);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the info window position\r\n     *\r\n     * @param info\r\n     * @param latlng\r\n     *\r\n     * @memberof GoogleInfoBoxService\r\n     */\r\n    public SetPosition(info: InfoBoxComponent, latlng: ILatLong): Promise<void> {\r\n        this._boxes.get(info).then((w) => {\r\n            w.SetPosition(latlng);\r\n        });\r\n        return Promise.resolve();\r\n    }\r\n\r\n}\r\n","import { eachSeries, nextTick } from 'async';\r\nimport { GoogleMarker } from './google-marker';\r\nimport { ILayerOptions } from '../../interfaces/ilayer-options';\r\nimport { MapService } from '../../services/map.service';\r\nimport { Layer } from '../layer';\r\nimport { Marker } from '../marker';\r\nimport { InfoWindow } from '../info-window';\r\nimport { Polygon } from '../polygon';\r\nimport { Polyline } from '../polyline';\r\nimport { ClusterPlacementMode } from '../cluster-placement-mode';\r\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\r\n\r\n/**\r\n * Concrete implementation of a layer for the Google Map Provider.\r\n *\r\n * @export\r\n */\r\nexport class GoogleLayer implements Layer {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _entities: Array<Marker|InfoWindow|Polygon|Polyline> = new Array<Marker|InfoWindow|Polygon|Polyline>();\r\n    private _visible: boolean = true;\r\n\r\n    ///\r\n    /// Property definitions\r\n    ///\r\n\r\n    /**\r\n     * Get the native primitive underneath the abstraction layer. Google does not have the concept of a custom layer,\r\n     * so we are returning the Map as the native object because it hosts all the markers.\r\n     *\r\n     * @returns GoogleMapTypes.GoogleMap.\r\n     *\r\n     * @memberof GoogleLayer\r\n     */\r\n    public get NativePrimitve(): GoogleMapTypes.GoogleMap {\r\n        return this._layer;\r\n    }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates a new instance of the GoogleMarkerClusterer class.\r\n     *\r\n     * @param _layer GoogleMapTypes.MarkerClusterer. Native Google Maps Marker Clusterer supporting the cluster layer.\r\n     * @param _maps MapService. MapService implementation to leverage for the layer.\r\n     *\r\n     * @memberof GoogleLayer\r\n     */\r\n    constructor(private _layer: GoogleMapTypes.GoogleMap, private _maps: MapService, private _id: number) { }\r\n\r\n\r\n    ///\r\n    /// Public methods, Layer interface implementation\r\n    ///\r\n\r\n    /**\r\n     * Adds an event listener for the layer.\r\n     *\r\n     * @param eventType string. Type of event to add (click, mouseover, etc). You can use any event that the underlying native\r\n     * layer supports.\r\n     * @param fn function. Handler to call when the event occurs.\r\n     *\r\n     * @memberof GoogleLayer\r\n     */\r\n    public AddListener(eventType: string, fn: Function): void {\r\n        throw (new Error('Events are not supported on Google Layers. You can still add events to individual markers.'));\r\n    }\r\n\r\n    /**\r\n     * Adds an entity to the layer. Use this method with caution as it will\r\n     * trigger a recaluation of the clusters (and associated markers if approprite) for\r\n     * each invocation. If you use this method to add many markers to the cluster, use\r\n     *\r\n     * @param entity Marker|InfoWindow|Polygon|Polyline. Entity to add to the layer.\r\n     *\r\n     * @memberof GoogleLAyer\r\n     */\r\n    public AddEntity(entity: Marker | InfoWindow | Polygon | Polyline): void {\r\n        if (entity.NativePrimitve) {\r\n            this._entities.push(entity);\r\n            entity.NativePrimitve.setVisible(this._visible);\r\n            entity.NativePrimitve.setMap(this.NativePrimitve);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a number of entities to the layer. Entities in this context should be model abstractions of concered map functionality (such\r\n     * as marker, infowindow, polyline, polygon, etc..)\r\n     *\r\n     * @param entities Array<Marker|InfoWindow|Polygon|Polyline>. Entities to add to the layer.\r\n     *\r\n     * @memberof GoogleLAyer\r\n     */\r\n    public AddEntities(entities: Array<Marker|InfoWindow|Polygon|Polyline>): void {\r\n        if (entities != null && Array.isArray(entities) && entities.length !== 0 ) {\r\n            this._entities.push(...entities);\r\n            eachSeries([...entities], (e, next) => {\r\n                e.NativePrimitve.setVisible(this._visible);\r\n                e.NativePrimitve.setMap(this.NativePrimitve);\r\n                nextTick(() => next());\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes the layer anbd the markers in it.\r\n     *\r\n     * @memberof GoogleLayer\r\n     */\r\n    public Delete(): void {\r\n        eachSeries(this._entities.splice(0), (e, next) => {\r\n            e.NativePrimitve.setMap(null);\r\n            nextTick(() => next());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the options governing the behavior of the layer.\r\n     *\r\n     * @returns ILayerOptions. The layer options.\r\n     *\r\n     * @memberof GoogleLayer\r\n     */\r\n    public GetOptions(): ILayerOptions {\r\n        const options: ILayerOptions = {\r\n            id: this._id\r\n        };\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * Returns the visibility state of the layer.\r\n     *\r\n     * @returns Boolean. True is the layer is visible, false otherwise.\r\n     *\r\n     * @memberof GoogleLayer\r\n     */\r\n    public GetVisible(): boolean {\r\n        return this._visible;\r\n    }\r\n\r\n    /**\r\n     * Removes an entity from the layer.\r\n     *\r\n     * @param entity Marker|InfoWindow|Polygon|Polyline Entity to be removed from the layer.\r\n     *\r\n     * @memberof GoogleLayer\r\n     */\r\n    public RemoveEntity(entity: Marker | InfoWindow | Polygon | Polyline): void {\r\n        if (entity.NativePrimitve) {\r\n            const j: number = this._entities.indexOf(entity);\r\n            if (j > -1) { this._entities.splice(j, 1); }\r\n            entity.NativePrimitve.setMap(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the entities for the cluster layer.\r\n     *\r\n     * @param entities Array<Marker>|Array<InfoWindow>|Array<Polygon>|Array<Polyline> containing\r\n     * the entities to add to the cluster. This replaces any existing entities.\r\n     *\r\n     * @memberof GoogleLayer\r\n     */\r\n    public SetEntities(entities: Array<Marker> | Array<InfoWindow> | Array<Polygon> | Array<Polyline>): void {\r\n        this.Delete();\r\n        this.AddEntities(entities);\r\n    }\r\n\r\n    /**\r\n     * Sets the options for the cluster layer.\r\n     *\r\n     * @param options ILayerOptions containing the options enumeration controlling the layer behavior. The supplied options\r\n     * are merged with the default/existing options.\r\n     *\r\n     * @memberof GoogleLayer\r\n     */\r\n    public SetOptions(options: ILayerOptions): void {\r\n        this._id = options.id;\r\n    }\r\n\r\n    /**\r\n     * Toggles the cluster layer visibility.\r\n     *\r\n     * @param visible Boolean true to make the layer visible, false to hide the layer.\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    public SetVisible(visible: boolean): void {\r\n        eachSeries([...this._entities], (e, next) => {\r\n            e.NativePrimitve.setVisible(visible);\r\n            nextTick(() => next());\r\n        });\r\n        this._visible = visible;\r\n    }\r\n\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\r\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\r\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\r\nimport { Marker } from '../../models/marker';\r\nimport { Polygon } from '../../models/polygon';\r\nimport { Polyline } from '../../models/polyline';\r\nimport { Layer } from '../../models/layer';\r\nimport { GoogleLayer } from '../../models/google/google-layer';\r\nimport { GooglePolygon } from '../../models/google/google-polygon';\r\nimport { GooglePolyline } from '../../models/google/google-polyline';\r\nimport { MapLayerDirective } from '../../components/map-layer';\r\nimport { LayerService } from '../layer.service';\r\nimport { GoogleLayerBase } from './google-layer-base';\r\nimport { MapService } from '../map.service';\r\nimport { GoogleConversions } from './google-conversions';\r\nimport * as GoogleMapTypes from './google-map-types';\r\n\r\ndeclare var google: any;\r\n\r\n/**\r\n * Implements the {@link LayerService} contract for a Google Maps specific implementation.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class GoogleLayerService extends GoogleLayerBase implements LayerService  {\r\n\r\n    ///\r\n    /// Field Declarations.\r\n    ///\r\n    protected _layers: Map<number, Promise<Layer>> = new Map<number, Promise<Layer>>();\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of GoogleLayerService.\r\n     * @param _mapService - Instance of the Google Maps Service. Will generally be injected.\r\n     * @param _zone - NgZone instance to provide zone aware promises.\r\n     *\r\n     * @memberof GoogleLayerService\r\n     */\r\n    constructor(_mapService: MapService, _zone: NgZone) {\r\n        super(_mapService, _zone);\r\n    }\r\n\r\n    /**\r\n     * Adds a layer to the map.\r\n     *\r\n     * @abstract\r\n     * @param layer - MapLayerDirective component object.\r\n     * Generally, MapLayerDirective will be injected with an instance of the\r\n     * LayerService and then self register on initialization.\r\n     *\r\n     * @memberof GoogleLayerService\r\n     */\r\n    public AddLayer(layer: MapLayerDirective): void {\r\n        const p: Promise<Layer> = new Promise<Layer>((resolve, reject) => {\r\n            this._mapService.MapPromise.then(m => {\r\n                const l: GoogleLayer = new GoogleLayer(m, this._mapService, layer.Id);\r\n                l.SetVisible(layer.Visible);\r\n                resolve(l);\r\n            });\r\n        });\r\n        this._layers.set(layer.Id, p);\r\n    }\r\n\r\n    /**\r\n     * Adds a polygon to the layer.\r\n     *\r\n     * @abstract\r\n     * @param layer - The id of the layer to which to add the polygon.\r\n     * @param options - Polygon options defining the polygon.\r\n     * @returns - A promise that when fullfilled contains the an instance of the Polygon model.\r\n     *\r\n     * @memberof GoogleLayerService\r\n     */\r\n    public CreatePolygon(layer: number, options: IPolygonOptions): Promise<Polygon> {\r\n        const p: Promise<Polygon> = this._mapService.CreatePolygon(options);\r\n        const l: Promise<Layer> = this._layers.get(layer);\r\n        Promise.all([p, l]).then(x => x[1].AddEntity(x[0]));\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Creates an array of unbound polygons. Use this method to create arrays of polygons to be used in bulk\r\n     * operations.\r\n     *\r\n     * @param layer - The id of the layer to which to add the polygon.\r\n     * @param options - Polygon options defining the polygons.\r\n     * @returns - A promise that when fullfilled contains the an arrays of the Polygon models.\r\n     *\r\n     * @memberof GoogleLayerService\r\n     */\r\n    public CreatePolygons(layer: number, options: Array<IPolygonOptions>): Promise<Array<Polygon>> {\r\n        //\r\n        // Note: we attempted using data.Polygons in an attempt to improve performance, but either data.Polygon\r\n        // or data.MultiPolygon actually operate significantly slower than generating the polygons this way.\r\n        // the slowness in google as opposed to bing probably comes from the point reduction algorithm uses.\r\n        // Signigicant performance improvements might be possible in google when using a pixel based reduction algorithm\r\n        // prior to setting the polygon path. This will lower to processing overhead of the google algorithm (with is Douglas-Peucker\r\n        // and rather compute intensive)\r\n        //\r\n        const p: Promise<Layer> = this.GetLayerById(layer);\r\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\r\n        return p.then((l: Layer) => {\r\n            const polygons: Promise<Array<Polygon>> = new Promise<Array<Polygon>>((resolve, reject) => {\r\n                const polys: Array<GooglePolygon> = options.map(o => {\r\n                    const op: GoogleMapTypes.PolygonOptions = GoogleConversions.TranslatePolygonOptions(o);\r\n                    const poly: GoogleMapTypes.Polygon = new google.maps.Polygon(op);\r\n                    const polygon: GooglePolygon = new GooglePolygon(poly);\r\n                    if (o.title && o.title !== '') { polygon.Title = o.title; }\r\n                    if (o.metadata) { o.metadata.forEach((val: any, key: string) => polygon.Metadata.set(key, val)); }\r\n                    return polygon;\r\n                });\r\n                resolve(polys);\r\n            });\r\n            return polygons;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a polyline to the layer.\r\n     *\r\n     * @abstract\r\n     * @param layer - The id of the layer to which to add the polyline.\r\n     * @param options - Polyline options defining the polyline.\r\n     * @returns - A promise that when fullfilled contains the an instance of the Polyline (or an array\r\n     * of polygons for complex paths) model.\r\n     *\r\n     * @memberof GoogleLayerService\r\n     */\r\n    public CreatePolyline(layer: number, options: IPolylineOptions): Promise<Polyline|Array<Polyline>> {\r\n        const p: Promise<Polyline|Array<Polyline>> = this._mapService.CreatePolyline(options);\r\n        const l: Promise<Layer> = this._layers.get(layer);\r\n        Promise.all([p, l]).then(x => {\r\n            const p1: Array<Polyline> =  Array.isArray(x[0]) ? <Array<Polyline>>x[0] : [<Polyline>x[0]];\r\n            for (const p2 of p1) {x[1].AddEntity(p2); }\r\n        });\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Creates an array of unbound polylines. Use this method to create arrays of polylines to be used in bulk\r\n     * operations.\r\n     *\r\n     * @param layer - The id of the layer to which to add the polylines.\r\n     * @param options - Polyline options defining the polylines.\r\n     * @returns - A promise that when fullfilled contains the an arrays of the Polyline models.\r\n     *\r\n     * @memberof GoogleLayerService\r\n     */\r\n    public CreatePolylines(layer: number, options: Array<IPolylineOptions>): Promise<Array<Polyline|Array<Polyline>>> {\r\n        const p: Promise<Layer> = this.GetLayerById(layer);\r\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\r\n        return p.then((l: Layer) => {\r\n            const polylines: Promise<Array<Polyline|Array<Polyline>>> = new Promise<Array<Polyline|Array<Polyline>>>((resolve, reject) => {\r\n                const polys: Array<Polyline|Array<Polyline>> = options.map(o => {\r\n                    const op: GoogleMapTypes.PolylineOptions = GoogleConversions.TranslatePolylineOptions(o);\r\n                    if (o.path && o.path.length > 0 && !Array.isArray(o.path[0])) {\r\n                        op.path = GoogleConversions.TranslatePaths(o.path)[0];\r\n                        const poly: GoogleMapTypes.Polyline = new google.maps.Polyline(op);\r\n                        const polyline: GooglePolyline = new GooglePolyline(poly);\r\n                        if (o.title && o.title !== '') { polyline.Title = o.title; }\r\n                        if (o.metadata) { o.metadata.forEach((v, k) => polyline.Metadata.set(k, v)); }\r\n                        return polyline;\r\n                    }\r\n                    else {\r\n                        const paths: Array<Array<GoogleMapTypes.LatLng>> = GoogleConversions.TranslatePaths(o.path);\r\n                        const lines: Array<Polyline> = new Array<Polyline>();\r\n                        paths.forEach(x => {\r\n                            op.path = x;\r\n                            const poly = new google.maps.Polyline(op);\r\n                            const polyline: GooglePolyline = new GooglePolyline(poly);\r\n                            if (o.metadata) { o.metadata.forEach((v, k) => polyline.Metadata.set(k, v)); }\r\n                            if (o.title && o.title !== '') {polyline.Title = o.title; }\r\n                            lines.push(polyline);\r\n                        });\r\n                        return lines;\r\n                    }\r\n                });\r\n                resolve(polys);\r\n            });\r\n            return polylines;\r\n        });\r\n    }\r\n\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { MapAPILoader, WindowRef, DocumentRef } from '../mapapiloader';\r\n\r\n/**\r\n * Protocol enumeration\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nexport enum ScriptProtocol {\r\n    HTTP,\r\n    HTTPS,\r\n    AUTO\r\n}\r\n\r\n/**\r\n * Bing Maps V8 specific loader configuration to be used with the {@link GoogleMapAPILoader}\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class GoogleMapAPILoaderConfig {\r\n    /**\r\n       * The Google Maps API Key (see:\r\n       * https://developers.google.com/maps/documentation/javascript/get-api-key)\r\n       */\r\n    apiKey?: string;\r\n\r\n    /**\r\n     * The Google Maps client ID (for premium plans).\r\n     * When you have a Google Maps APIs Premium Plan license, you must authenticate\r\n     * your application with either an API key or a client ID.\r\n     * The Google Maps API will fail to load if both a client ID and an API key are included.\r\n     */\r\n    clientId?: string;\r\n\r\n    /**\r\n     * The Google Maps channel name (for premium plans).\r\n     * A channel parameter is an optional parameter that allows you to track usage under your client\r\n     * ID by assigning a distinct channel to each of your applications.\r\n     */\r\n    channel?: string;\r\n\r\n    /**\r\n     * Google Maps API version.\r\n     */\r\n    apiVersion?: string;\r\n\r\n    /**\r\n     * Host and Path used for the `<script>` tag.\r\n     */\r\n    hostAndPath?: string;\r\n\r\n    /**\r\n     * Protocol used for the `<script>` tag.\r\n     */\r\n    protocol?: ScriptProtocol;\r\n\r\n    /**\r\n     * Defines which Google Maps libraries should get loaded.\r\n     */\r\n    libraries?: string[];\r\n\r\n    /**\r\n     * The default bias for the map behavior is US.\r\n     * If you wish to alter your application to serve different map tiles or bias the\r\n     * application, you can overwrite the default behavior (US) by defining a `region`.\r\n     * See https://developers.google.com/maps/documentation/javascript/basics#Region\r\n     */\r\n    region?: string;\r\n\r\n    /**\r\n     * The Google Maps API uses the browser's preferred language when displaying\r\n     * textual information. If you wish to overwrite this behavior and force the API\r\n     * to use a given language, you can use this setting.\r\n     * See https://developers.google.com/maps/documentation/javascript/basics#Language\r\n     */\r\n    language?: string;\r\n\r\n    /**\r\n     * The Google Maps API requires a separate library for clustering. Set the property\r\n     * to true in order to load this library.\r\n     * See https://developers.google.com/maps/documentation/javascript/marker-clustering\r\n     */\r\n    enableClustering?: boolean;\r\n\r\n    /**\r\n     * Host and Path used for the cluster library `<script>` tag.\r\n     */\r\n    clusterHostAndPath?: string;\r\n}\r\n\r\n/**\r\n * Default loader configuration.\r\n */\r\nconst DEFAULT_CONFIGURATION = new GoogleMapAPILoaderConfig();\r\n\r\n/**\r\n * Bing Maps V8 implementation for the {@link MapAPILoader} service.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class GoogleMapAPILoader extends MapAPILoader {\r\n\r\n    ///\r\n    /// Field defintitions.\r\n    ///\r\n    private _scriptLoadingPromise: Promise<void>;\r\n\r\n    ///\r\n    /// Property declarations.\r\n    ///\r\n\r\n    /**\r\n     * Gets the loader configuration.\r\n     *\r\n     * @readonly\r\n     * @memberof GoogleMapAPILoader\r\n     */\r\n    public get Config(): GoogleMapAPILoaderConfig { return this._config; }\r\n\r\n    /**\r\n     * Creates an instance of GoogleMapAPILoader.\r\n     * @param _config - The loader configuration.\r\n     * @param _windowRef - An instance of {@link WindowRef}. Necessary because Bing Map V8 interacts with the window object.\r\n     * @param _documentRef - An instance of {@link DocumentRef}.\r\n     *                                     Necessary because Bing Map V8 interacts with the document object.\r\n     * @memberof GoogleMapAPILoader\r\n     */\r\n    constructor( @Optional() private _config: GoogleMapAPILoaderConfig, private _windowRef: WindowRef, private _documentRef: DocumentRef) {\r\n        super();\r\n        if (this._config === null || this._config === undefined) {\r\n            this._config = DEFAULT_CONFIGURATION;\r\n        }\r\n    }\r\n\r\n    ///\r\n    /// Public methods and MapAPILoader implementation.\r\n    ///\r\n\r\n    /**\r\n     * Loads the necessary resources for Bing Maps V8.\r\n     *\r\n     * @memberof GoogleMapAPILoader\r\n     */\r\n    public Load(): Promise<void> {\r\n        if (this._scriptLoadingPromise) {\r\n            return this._scriptLoadingPromise;\r\n        }\r\n\r\n        const script = this._documentRef.GetNativeDocument().createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.async = true;\r\n        script.defer = true;\r\n        const callbackName = `Create`;\r\n        script.src = this.GetMapsScriptSrc(callbackName);\r\n\r\n        this._scriptLoadingPromise = new Promise<void>((resolve: Function, reject: Function) => {\r\n            (<any>this._windowRef.GetNativeWindow())[callbackName] = () => {\r\n                if (this._config.enableClustering) {\r\n                    // if clustering is enabled then delay the loading until after the cluster library is loaded\r\n                    const clusterScript = this._documentRef.GetNativeDocument().createElement('script');\r\n                    clusterScript.type = 'text/javascript';\r\n                    clusterScript.src = this.GetClusterScriptSrc();\r\n                    clusterScript.onload = clusterScript.onreadystatechange = () => {\r\n                        resolve();\r\n                    };\r\n                    this._documentRef.GetNativeDocument().head.appendChild(clusterScript);\r\n                } else {\r\n                    resolve();\r\n                }\r\n            };\r\n            script.onerror = (error: Event) => { reject(error); };\r\n        });\r\n        this._documentRef.GetNativeDocument().head.appendChild(script);\r\n\r\n        return this._scriptLoadingPromise;\r\n    }\r\n\r\n    ///\r\n    /// Private methods\r\n    ///\r\n\r\n    /**\r\n     * Gets the Google Maps scripts url for injections into the header.\r\n     *\r\n     * @param callbackName - Name of the function to be called when the Google Maps scripts are loaded.\r\n     * @returns - The url to be used to load the Google Map scripts.\r\n     *\r\n     * @memberof GoogleMapAPILoader\r\n     */\r\n    private GetMapsScriptSrc(callbackName: string) {\r\n        const hostAndPath: string = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\r\n        const queryParams: { [key: string]: string | Array<string> } = {\r\n            v: this._config.apiVersion,\r\n            callback: callbackName,\r\n            key: this._config.apiKey,\r\n            client: this._config.clientId,\r\n            channel: this._config.channel,\r\n            libraries: this._config.libraries,\r\n            region: this._config.region,\r\n            language: this._config.language\r\n        };\r\n        return this.GetScriptSrc(hostAndPath, queryParams);\r\n    }\r\n\r\n    /**\r\n     * Gets the Google Maps Cluster library url for injections into the header.\r\n     *\r\n     * @returns - The url to be used to load the Google Map Cluster library.\r\n     *\r\n     * @memberof GoogleMapAPILoader\r\n     */\r\n    private GetClusterScriptSrc() {\r\n        const hostAndPath: string = this._config.clusterHostAndPath ||\r\n            'developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js';\r\n        return this.GetScriptSrc(hostAndPath, {});\r\n    }\r\n\r\n    /**\r\n     * Gets a scripts url for injections into the header.\r\n     *\r\n     * @param hostAndPath - Host and path name of the script to load.\r\n     * @param queryParams - Url query parameters.\r\n     * @returns - The url with correct protocol, path, and query parameters.\r\n     *\r\n     * @memberof GoogleMapAPILoader\r\n     */\r\n    private GetScriptSrc(hostAndPath: string, queryParams: { [key: string]: string | Array<string> }): string {\r\n        const protocolType: ScriptProtocol =\r\n            <ScriptProtocol>((this._config && this._config.protocol) || ScriptProtocol.HTTPS);\r\n        let protocol: string;\r\n\r\n        switch (protocolType) {\r\n            case ScriptProtocol.AUTO:\r\n                protocol = '';\r\n                break;\r\n            case ScriptProtocol.HTTP:\r\n                protocol = 'http:';\r\n                break;\r\n            case ScriptProtocol.HTTPS:\r\n                protocol = 'https:';\r\n                break;\r\n        }\r\n\r\n        const params: string =\r\n            Object.keys(queryParams)\r\n                .filter((k: string) => queryParams[k] != null)\r\n                .filter((k: string) => {\r\n                    // remove empty arrays\r\n                    return !Array.isArray(queryParams[k]) ||\r\n                        (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\r\n                })\r\n                .map((k: string) => {\r\n                    // join arrays as comma seperated strings\r\n                    const i = queryParams[k];\r\n                    if (Array.isArray(i)) {\r\n                        return { key: k, value: i.join(',') };\r\n                    }\r\n                    return { key: k, value: queryParams[k] };\r\n                })\r\n                .map((entry: { key: string, value: string }) => { return `${entry.key}=${entry.value}`; })\r\n                .join('&');\r\n        return `${protocol}//${hostAndPath}?${params}`;\r\n    }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { BehaviorSubject, Observable, Observer } from 'rxjs';\r\nimport { IPoint } from '../../interfaces/ipoint';\r\nimport { ILatLong } from '../../interfaces/ilatlong';\r\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\r\nimport { Marker } from '../../models/marker';\r\nimport { MapMarkerDirective } from '../../components/map-marker';\r\nimport { MarkerService } from '../marker.service';\r\nimport { MapService } from '../map.service';\r\nimport { LayerService } from '../layer.service';\r\nimport { ClusterService } from '../cluster.service';\r\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\r\nimport { GoogleConversions } from './google-conversions';\r\n\r\n/**\r\n * Concrete implementation of the MarkerService abstract class for Google.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class GoogleMarkerService implements MarkerService {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _markers: Map<MapMarkerDirective, Promise<Marker>> = new Map<MapMarkerDirective, Promise<Marker>>();\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of GoogleMarkerService.\r\n     * @param _mapService - {@link MapService} instance.\r\n     * The concrete {@link GoogleMapService} implementation is expected.\r\n     * @param _layerService - {@link LayerService} instance.\r\n     * The concrete {@link GoogleLayerService} implementation is expected.\r\n     * @param _clusterService - {@link ClusterService} instance.\r\n     * The concrete {@link GoogleClusterService} implementation is expected.\r\n     * @param _zone - NgZone instance to support zone aware promises.\r\n     *\r\n     * @memberof GoogleMarkerService\r\n     */\r\n    constructor(private _mapService: MapService,\r\n        private _layerService: LayerService,\r\n        private _clusterService: ClusterService,\r\n        private _zone: NgZone) {\r\n    }\r\n\r\n    /**\r\n     * Adds a marker. Depending on the marker context, the marker will either by added to the map or a correcsponding layer.\r\n     *\r\n     * @param marker - The {@link MapMarkerDirective} to be added.\r\n     * @memberof GoogleMarkerService\r\n     */\r\n    public AddMarker(marker: MapMarkerDirective): void {\r\n        const o: IMarkerOptions = {\r\n            anchor: marker.Anchor,\r\n            position: { latitude: marker.Latitude, longitude: marker.Longitude },\r\n            title: marker.Title,\r\n            label: marker.Label,\r\n            draggable: marker.Draggable,\r\n            icon: marker.IconUrl,\r\n            iconInfo: marker.IconInfo,\r\n            width: marker.Width,\r\n            height: marker.Height,\r\n            isFirst: marker.IsFirstInSet,\r\n            isLast: marker.IsLastInSet\r\n        };\r\n\r\n        // create marker via promise.\r\n        let markerPromise: Promise<Marker> = null;\r\n        if (marker.InClusterLayer) {\r\n            markerPromise = this._clusterService.CreateMarker(marker.LayerId, o);\r\n        }\r\n        else if (marker.InCustomLayer) {\r\n            markerPromise = this._layerService.CreateMarker(marker.LayerId, o);\r\n        }\r\n        else {\r\n            markerPromise = this._mapService.CreateMarker(o);\r\n        }\r\n\r\n        this._markers.set(marker, markerPromise);\r\n        if (marker.IconInfo) {\r\n            markerPromise.then((m: Marker) => {\r\n                // update iconInfo to provide hook to do post icon creation activities and\r\n                // also re-anchor the marker\r\n                marker.DynamicMarkerCreated.emit(o.iconInfo);\r\n                const p: IPoint = {\r\n                    x: (o.iconInfo.size && o.iconInfo.markerOffsetRatio) ? (o.iconInfo.size.width * o.iconInfo.markerOffsetRatio.x) : 0,\r\n                    y: (o.iconInfo.size && o.iconInfo.markerOffsetRatio) ? (o.iconInfo.size.height * o.iconInfo.markerOffsetRatio.y) : 0,\r\n                };\r\n                m.SetAnchor(p);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Registers an event delegate for a marker.\r\n     *\r\n     * @param eventName - The name of the event to register (e.g. 'click')\r\n     * @param marker - The {@link MapMarkerDirective} for which to register the event.\r\n     * @returns - Observable emiting an instance of T each time the event occurs.\r\n     * @memberof GoogleMarkerService\r\n     */\r\n    public CreateEventObservable<T>(eventName: string, marker: MapMarkerDirective): Observable<T> {\r\n        return Observable.create((observer: Observer<T>) => {\r\n            this._markers.get(marker).then((m: Marker) => {\r\n                m.AddListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes a marker.\r\n     *\r\n     * @param marker - {@link MapMarkerDirective} to be deleted.\r\n     * @returns - A promise fullfilled once the marker has been deleted.\r\n     * @memberof GoogleMarkerService\r\n     */\r\n    public DeleteMarker(marker: MapMarkerDirective): Promise<void> {\r\n        const m = this._markers.get(marker);\r\n        if (m == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return m.then((ma: Marker) => {\r\n            if (marker.InClusterLayer) {\r\n                this._clusterService.GetNativeLayer(marker.LayerId).then(l => { l.RemoveEntity(ma); });\r\n            }\r\n            if (marker.InCustomLayer) {\r\n                this._layerService.GetNativeLayer(marker.LayerId).then(l => { l.RemoveEntity(ma); });\r\n            }\r\n            return this._zone.run(() => {\r\n                ma.DeleteMarker();\r\n                this._markers.delete(marker);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Obtains geo coordinates for the marker on the click location\r\n     *\r\n     * @param e - The mouse event.\r\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\r\n     * @memberof GoogleMarkerService\r\n     */\r\n    public GetCoordinatesFromClick(e: MouseEvent | any): ILatLong {\r\n        if (!e) {\r\n            return null;\r\n        }\r\n        if (!e.latLng) {\r\n            return null;\r\n        }\r\n        if (!e.latLng.lat || !e.latLng.lng) {\r\n            return null;\r\n        }\r\n        return { latitude: e.latLng.lat(), longitude: e.latLng.lng() };\r\n    }\r\n\r\n    /**\r\n     * Obtains the marker model for the marker allowing access to native implementation functionatiliy.\r\n     *\r\n     * @param marker - The {@link MapMarkerDirective} for which to obtain the marker model.\r\n     * @returns - A promise that when fullfilled contains the {@link Marker} implementation of the underlying platform.\r\n     * @memberof GoogleMarkerService\r\n     */\r\n    public GetNativeMarker(marker: MapMarkerDirective): Promise<Marker> {\r\n        return this._markers.get(marker);\r\n    }\r\n\r\n    /**\r\n     * Obtains the marker pixel location for the marker on the click location\r\n     *\r\n     * @param e - The mouse event.\r\n     * @returns - {@link ILatLong} containing the pixels of the marker on the map canvas.\r\n     * @memberof GoogleMarkerService\r\n     */\r\n    public GetPixelsFromClick(e: MouseEvent | any): IPoint {\r\n        if (!e || !e.latLng || !e.latLng.lat || !e.latLng.lng) {\r\n            return null;\r\n        }\r\n        if (this._mapService.MapInstance == null) {\r\n            return null;\r\n        }\r\n\r\n        let crossesDateLine: boolean = false;\r\n        const m = this._mapService.MapInstance;\r\n        const p = m.getProjection();\r\n        const s: number = Math.pow(2, m.getZoom());\r\n        const b: GoogleMapTypes.LatLngBounds = m.getBounds();\r\n        if (b.getCenter().lng() < b.getSouthWest().lng()  ||\r\n            b.getCenter().lng() > b.getNorthEast().lng()) { crossesDateLine = true; }\r\n\r\n        const offsetY: number = p.fromLatLngToPoint(b.getNorthEast()).y;\r\n        const offsetX: number = p.fromLatLngToPoint(b.getSouthWest()).x;\r\n        const point: GoogleMapTypes.Point = p.fromLatLngToPoint(e.latLng);\r\n        return {\r\n            x: Math.floor((point.x - offsetX + ((crossesDateLine && point.x < offsetX) ? 256 : 0)) * s),\r\n            y: Math.floor((point.y - offsetY) * s)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Converts a geo location to a pixel location relative to the map canvas.\r\n     *\r\n     * @param target - Either a {@link MapMarkerDirective}\r\n     * or a {@link ILatLong} for the basis of translation.\r\n     * @returns - A promise that when fullfilled contains a {@link IPoint}\r\n     * with the pixel coordinates of the MapMarker or ILatLong relative to the map canvas.\r\n     * @memberof GoogleMarkerService\r\n     */\r\n    public LocationToPoint(target: MapMarkerDirective | ILatLong): Promise<IPoint> {\r\n        if (target == null) {\r\n            return Promise.resolve(null);\r\n        }\r\n        if (target instanceof MapMarkerDirective) {\r\n            return this._markers.get(target).then((m: Marker) => {\r\n                const l: ILatLong = m.Location;\r\n                const p: Promise<IPoint> = this._mapService.LocationToPoint(l);\r\n                return p;\r\n            });\r\n        }\r\n        return this._mapService.LocationToPoint(target);\r\n    }\r\n\r\n    /**\r\n     * Updates the anchor position for the marker.\r\n     *\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the anchor.\r\n     * Anchor information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the anchor position has been updated.\r\n     * @memberof GoogleMarkerService\r\n     */\r\n    public UpdateAnchor(marker: MapMarkerDirective): Promise<void> {\r\n        return this._markers.get(marker).then((m: Marker) => {\r\n            m.SetAnchor(marker.Anchor);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates whether the marker is draggable.\r\n     *\r\n     * @param - The {@link MapMarkerDirective} object for which to upate dragability.\r\n     * Dragability information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the marker has been updated.\r\n     * @memberof GoogleMarkerService\r\n     */\r\n    public UpdateDraggable(marker: MapMarkerDirective): Promise<void> {\r\n        return this._markers.get(marker).then((m: Marker) => m.SetDraggable(marker.Draggable));\r\n    }\r\n\r\n    /**\r\n     * Updates the Icon on the marker.\r\n     *\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the icon. Icon information is present\r\n     * in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the icon information has been updated.\r\n     * @memberof GoogleMarkerService\r\n     */\r\n    public UpdateIcon(marker: MapMarkerDirective): Promise<void> {\r\n        return this._markers.get(marker).then((m: Marker) => {\r\n            if (marker.IconInfo) {\r\n                const x: IMarkerOptions = {\r\n                    position: { latitude: marker.Latitude, longitude: marker.Longitude },\r\n                    iconInfo: marker.IconInfo\r\n                };\r\n                const o: GoogleMapTypes.MarkerOptions = GoogleConversions.TranslateMarkerOptions(x);\r\n                m.SetIcon(o.icon);\r\n                marker.DynamicMarkerCreated.emit(x.iconInfo);\r\n            } else {\r\n                m.SetIcon(marker.IconUrl);\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the label on the marker.\r\n     *\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the label.\r\n     * Label information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the label has been updated.\r\n     * @memberof GoogleMarkerService\r\n     */\r\n    public UpdateLabel(marker: MapMarkerDirective): Promise<void> {\r\n        return this._markers.get(marker).then((m: Marker) => { m.SetLabel(marker.Label); });\r\n    }\r\n\r\n    /**\r\n     * Updates the geo coordinates for the marker.\r\n     *\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the coordinates.\r\n     * Coordinate information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the position has been updated.\r\n     * @memberof GoogleMarkerService\r\n     */\r\n    public UpdateMarkerPosition(marker: MapMarkerDirective): Promise<void> {\r\n        return this._markers.get(marker).then(\r\n            (m: Marker) => m.SetPosition({\r\n                latitude: marker.Latitude,\r\n                longitude: marker.Longitude\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Updates the title on the marker.\r\n     *\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the title.\r\n     * Title information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the title has been updated.\r\n     * @memberof GoogleMarkerService\r\n     */\r\n    public UpdateTitle(marker: MapMarkerDirective): Promise<void> {\r\n        return this._markers.get(marker).then((m: Marker) => m.SetTitle(marker.Title));\r\n    }\r\n\r\n    /**\r\n     * Updates the visibility on the marker.\r\n     *\r\n     * @param - The {@link MapMarkerDirective} object for which to upate the title.\r\n     * Title information is present in the underlying {@link Marker} model object.\r\n     * @returns - A promise that is fullfilled when the title has been updated.\r\n     * @memberof GoogleMarkerService\r\n     */\r\n    public UpdateVisible(marker: MapMarkerDirective): Promise<void> {\r\n        return this._markers.get(marker).then((m: Marker) => m.SetVisible(marker.Visible));\r\n    }\r\n\r\n}\r\n","import { GoogleMarker } from './google-marker';\r\nimport { IClusterOptions } from '../../interfaces/icluster-options';\r\nimport { MapService } from '../../services/map.service';\r\nimport { Layer } from '../layer';\r\nimport { Marker } from '../marker';\r\nimport { InfoWindow } from '../info-window';\r\nimport { ClusterPlacementMode } from '../cluster-placement-mode';\r\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\r\nimport { timer } from 'rxjs';\r\n\r\n/**\r\n * Concrete implementation of a clustering layer for the Google Map Provider.\r\n *\r\n * @export\r\n */\r\nexport class GoogleMarkerClusterer implements Layer {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _isClustering = true;\r\n    private _markerLookup: Map<GoogleMapTypes.Marker, Marker> = new Map<GoogleMapTypes.Marker, Marker>();\r\n    private _markers: Array<Marker> = new Array<Marker>();\r\n    private _pendingMarkers: Array<Marker> = new Array<Marker>();\r\n    private _mapclicks: number = 0;\r\n    private _currentZoom: number = 0;\r\n    private _visible: boolean = true;\r\n\r\n    ///\r\n    /// Property definitions\r\n    ///\r\n\r\n    /**\r\n     * Get the native primitive underneath the abstraction layer.\r\n     *\r\n     * @returns GoogleMapTypes.MarkerClusterer.\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    public get NativePrimitve(): GoogleMapTypes.MarkerClusterer {\r\n        return this._layer;\r\n    }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates a new instance of the GoogleMarkerClusterer class.\r\n     *\r\n     * @param _layer GoogleMapTypes.MarkerClusterer. Native Google Maps Marker Clusterer supporting the cluster layer.\r\n     * @param _maps MapService. MapService implementation to leverage for the layer.\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    constructor(private _layer: GoogleMapTypes.MarkerClusterer) { }\r\n\r\n\r\n    ///\r\n    /// Public methods, Layer interface implementation\r\n    ///\r\n\r\n    /**\r\n     * Adds an event listener for the layer.\r\n     *\r\n     * @param eventType string. Type of event to add (click, mouseover, etc). You can use any event that the underlying native\r\n     * layer supports.\r\n     * @param fn function. Handler to call when the event occurs.\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    public AddListener(eventType: string, fn: Function): void {\r\n        throw (new Error('Events are not supported on Google Cluster Layers. You can still add events to individual markers.'));\r\n    }\r\n\r\n    /**\r\n     * Adds an entity to the layer. Use this method with caution as it will\r\n     * trigger a recaluation of the clusters (and associated markers if approprite) for\r\n     * each invocation. If you use this method to add many markers to the cluster, use\r\n     *\r\n     * @param entity Marker. Entity to add to the layer.\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    public AddEntity(entity: Marker): void {\r\n        let isMarker: boolean = entity instanceof Marker;\r\n        isMarker = entity instanceof GoogleMarker || isMarker;\r\n        if (isMarker) {\r\n            entity.NativePrimitve.setMap(null);\r\n                // remove the marker from the map as the clusterer will control marker visibility.\r\n            if (entity.IsFirst) {\r\n                this.StopClustering();\r\n            }\r\n        }\r\n        if (entity.NativePrimitve && entity.Location) {\r\n            if (this._isClustering && this._visible) {\r\n                this._layer.addMarker(entity.NativePrimitve);\r\n                this._markers.push(entity);\r\n            }\r\n            else {\r\n                this._pendingMarkers.push(entity);\r\n            }\r\n            this._markerLookup.set(entity.NativePrimitve, entity);\r\n        }\r\n        if (isMarker) {\r\n            if (entity.IsLast) {\r\n                this.StartClustering();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a number of markers to the layer.\r\n     *\r\n     * @param entities Array<Marker>. Entities to add to the layer.\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    public AddEntities(entities: Array<Marker>): void {\r\n        if (entities != null && Array.isArray(entities) && entities.length !== 0 ) {\r\n            const e: Array<GoogleMapTypes.Marker> = entities.map(p => {\r\n                this._markerLookup.set(p.NativePrimitve, p);\r\n                p.NativePrimitve.setMap(null);\r\n                    // remove the marker from the map as the clusterer will control marker visibility.\r\n                return p.NativePrimitve;\r\n            });\r\n            if (this._isClustering && this._visible) {\r\n                this._layer.addMarkers(e);\r\n                this._markers.push(...entities);\r\n            }\r\n            else {\r\n                // if layer is not visible, always add to pendingMarkers. Setting the layer to visible later\r\n                // will render the markers appropriately\r\n                this._pendingMarkers.push(...entities);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes the clustering layer.\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    public Delete(): void {\r\n        this._layer.getMarkers().forEach(m => {\r\n            m.setMap(null);\r\n                // remove the marker from the map as the clusterer will control marker visibility.\r\n        });\r\n        this._layer.clearMarkers();\r\n        this._markers.splice(0);\r\n        this._pendingMarkers.splice(0);\r\n    }\r\n\r\n    /**\r\n     * Returns the abstract marker used to wrap the Google Marker.\r\n     *\r\n     * @returns Marker. The abstract marker object representing the pushpin.\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    public GetMarkerFromGoogleMarker(pin: GoogleMapTypes.Marker): Marker {\r\n        const m: Marker = this._markerLookup.get(pin);\r\n        return m;\r\n    }\r\n\r\n    /**\r\n     * Returns the options governing the behavior of the layer.\r\n     *\r\n     * @returns IClusterOptions. The layer options.\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    public GetOptions(): IClusterOptions {\r\n        const options: IClusterOptions = {\r\n            id: 0,\r\n            gridSize: this._layer.getGridSize(),\r\n            clusteringEnabled: this._layer.getGridSize() === 0,\r\n            maxZoom: this._layer.getMaxZoom(),\r\n            minimumClusterSize: this._layer.getMinClusterSize(),\r\n            placementMode: this._layer.isAverageCenter() ? ClusterPlacementMode.MeanValue : ClusterPlacementMode.FirstPin,\r\n            visible: this._visible,\r\n            zoomOnClick: this._layer.isZoomOnClick(),\r\n            styles: this._layer.getStyles()\r\n        };\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * Returns the visibility state of the layer.\r\n     *\r\n     * @returns Boolean. True is the layer is visible, false otherwise.\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    public GetVisible(): boolean {\r\n        return this._visible;\r\n    }\r\n\r\n    /**\r\n     * Removes an entity from the cluster layer.\r\n     *\r\n     * @param entity Marker Entity to be removed from the layer.\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    public RemoveEntity(entity: Marker): void {\r\n        if (entity.NativePrimitve && entity.Location) {\r\n            const j: number = this._markers.indexOf(entity);\r\n            const k: number = this._pendingMarkers.indexOf(entity);\r\n            if (j > -1) { this._markers.splice(j, 1); }\r\n            if (k > -1) { this._pendingMarkers.splice(k, 1); }\r\n            if (this._isClustering) {\r\n                this._layer.removeMarker(entity.NativePrimitve);\r\n            }\r\n            this._markerLookup.delete(entity.NativePrimitve);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the entities for the cluster layer.\r\n     *\r\n     * @param entities Array<Marker> containing\r\n     * the entities to add to the cluster. This replaces any existing entities.\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    public SetEntities(entities: Array<Marker>): void {\r\n        this._layer.getMarkers().forEach(m => {\r\n            m.setMap(null);\r\n        });\r\n        this._layer.clearMarkers();\r\n        this._markers.splice(0);\r\n        this._pendingMarkers.splice(0);\r\n        this._markerLookup.clear();\r\n\r\n        const p: Array<GoogleMapTypes.Marker> = new Array<GoogleMapTypes.Marker>();\r\n        entities.forEach((e: any) => {\r\n            if (e.NativePrimitve && e.Location) {\r\n                e.NativePrimitve.setMap(null);\r\n                this._markerLookup.set(e.NativePrimitve, e);\r\n                if (this._visible) {\r\n                    this._markers.push(e);\r\n                    p.push(e.NativePrimitve);\r\n                }\r\n                else {\r\n                    this._pendingMarkers.push(e);\r\n                }\r\n            }\r\n        });\r\n        this._layer.addMarkers(p);\r\n    }\r\n\r\n    /**\r\n     * Sets the options for the cluster layer.\r\n     *\r\n     * @param options IClusterOptions containing the options enumeration controlling the layer behavior. The supplied options\r\n     * are merged with the default/existing options.\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    public SetOptions(options: IClusterOptions): void {\r\n        if (options.placementMode != null) {\r\n            throw(new Error('GoogleMarkerClusterer: PlacementMode option cannot be set after initial creation.'));\r\n        }\r\n        if (options.zoomOnClick != null) {\r\n            throw(new Error('GoogleMarkerClusterer: ZoomOnClick option cannot be set after initial creation.'));\r\n        }\r\n        if (options.callback != null) {}\r\n        if (options.clusteringEnabled != null) {\r\n            this._layer.setMinClusterSize(options.clusteringEnabled ? 1 : 10000000);\r\n            this._layer.resetViewport();\r\n            this._layer.redraw();\r\n        }\r\n        if (options.gridSize != null && (options.clusteringEnabled == null || options.clusteringEnabled)) {\r\n            this._layer.setGridSize(options.gridSize);\r\n            this._layer.resetViewport();\r\n            this._layer.redraw();\r\n        }\r\n        if (options.maxZoom != null) { this._layer.setMaxZoom(options.maxZoom); }\r\n        if (options.minimumClusterSize != null) { this._layer.setMinClusterSize(options.minimumClusterSize); }\r\n        if (options.styles != null) { this._layer.setStyles(options.styles); }\r\n        if (options.visible != null) { this.SetVisible(options.visible); }\r\n    }\r\n\r\n    /**\r\n     * Toggles the cluster layer visibility.\r\n     *\r\n     * @param visible Boolean true to make the layer visible, false to hide the layer.\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    public SetVisible(visible: boolean): void {\r\n        const map: GoogleMapTypes.GoogleMap = visible ? this._layer.getMap() : null;\r\n        if (!visible) {\r\n            this._layer.resetViewport(true);\r\n        }\r\n        else {\r\n            const p: Array<GoogleMapTypes.Marker> = new Array<GoogleMapTypes.Marker>();\r\n            if (this._pendingMarkers.length > 0) {\r\n                this._pendingMarkers.forEach(e => {\r\n                    if (e.NativePrimitve && e.Location) {\r\n                        p.push(<GoogleMapTypes.Marker>e.NativePrimitve);\r\n                    }\r\n                });\r\n                this._layer.addMarkers(p);\r\n                this._markers = this._markers.concat(this._pendingMarkers.splice(0));\r\n            }\r\n            else {\r\n                this._layer.redraw();\r\n            }\r\n        }\r\n        this._visible = visible;\r\n    }\r\n\r\n    /**\r\n     * Start to actually cluster the entities in a cluster layer. This method should be called after the initial set of entities\r\n     * have been added to the cluster. This method is used for performance reasons as adding an entitiy will recalculate all clusters.\r\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\r\n     * complete to recalculate the clusters.\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    public StartClustering(): void {\r\n        if (this._isClustering) { return; }\r\n\r\n        if (this._visible) {\r\n            const p: Array<GoogleMapTypes.Marker> = new Array<GoogleMapTypes.Marker>();\r\n            this._markers.forEach(e => {\r\n                if (e.NativePrimitve && e.Location) {\r\n                    p.push(<GoogleMapTypes.Marker>e.NativePrimitve);\r\n                }\r\n            });\r\n            this._pendingMarkers.forEach(e => {\r\n                if (e.NativePrimitve && e.Location) {\r\n                    p.push(<GoogleMapTypes.Marker>e.NativePrimitve);\r\n                }\r\n            });\r\n            this._layer.addMarkers(p);\r\n            this._markers = this._markers.concat(this._pendingMarkers.splice(0));\r\n        }\r\n\r\n        if (!this._visible) {\r\n            // only add the markers if the layer is visible. Otherwise, keep them pending. They would be added once the\r\n            // layer is set to visible.\r\n            timer(0).subscribe(() => {\r\n                this._layer.resetViewport(true);\r\n            });\r\n        }\r\n        this._isClustering = true;\r\n    }\r\n\r\n    /**\r\n     * Stop to actually cluster the entities in a cluster layer.\r\n     * This method is used for performance reasons as adding an entitiy will recalculate all clusters.\r\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\r\n     * complete to recalculate the clusters.\r\n     *\r\n     * @returns\r\n     *\r\n     * @memberof GoogleMarkerClusterer\r\n     */\r\n    public StopClustering() {\r\n        if (!this._isClustering) { return; }\r\n        this._isClustering = false;\r\n    }\r\n}\r\n","import { GoogleMarkerClusterer } from '../../models/google/google-marker-clusterer';\r\nimport { GoogleInfoWindow } from '../../models/google/google-info-window';\r\nimport { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { MapService } from '../map.service';\r\nimport { MapAPILoader } from '../mapapiloader';\r\nimport { GoogleMapAPILoader, GoogleMapAPILoaderConfig } from './google-map-api-loader.service';\r\nimport { GoogleClusterService } from './google-cluster.service';\r\nimport { ILayerOptions } from '../../interfaces/ilayer-options';\r\nimport { IClusterOptions } from '../../interfaces/icluster-options';\r\nimport { IMapOptions } from '../../interfaces/imap-options';\r\nimport { ILatLong } from '../../interfaces/ilatlong';\r\nimport { IPoint } from '../../interfaces/ipoint';\r\nimport { ISize } from '../../interfaces/isize';\r\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\r\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\r\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\r\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\r\nimport { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\r\nimport { MapTypeId } from '../../models/map-type-id';\r\nimport { Marker } from '../../models/marker';\r\nimport { Polygon } from '../../models/polygon';\r\nimport { Polyline } from '../../models/polyline';\r\nimport { MixinMapLabelWithOverlayView } from '../../models/google/google-label';\r\nimport { MixinCanvasOverlay } from '../../models/google/google-canvas-overlay';\r\nimport { GoogleCanvasOverlay } from '../../models/google/google-canvas-overlay';\r\nimport { CanvasOverlay } from '../../models/canvas-overlay';\r\nimport { Layer } from '../../models/layer';\r\nimport { InfoWindow } from '../../models/info-window';\r\nimport { GooglePolygon } from '../../models/google/google-polygon';\r\nimport { GooglePolyline } from '../../models/google/google-polyline';\r\nimport { GoogleConversions } from './google-conversions';\r\nimport { GoogleMarker } from '../../models/google/google-marker';\r\nimport { GoogleLayer } from '../../models/google/google-layer';\r\nimport { IBox } from '../../interfaces/ibox';\r\nimport { GoogleMapEventsLookup } from '../../models/google/google-events-lookup';\r\nimport * as GoogleMapTypes from './google-map-types';\r\n\r\ndeclare const google: any;\r\ndeclare const MarkerClusterer: any;\r\n\r\n/**\r\n * Concrete implementation of the MapService abstract implementing a Google Maps provider\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class GoogleMapService implements MapService {\r\n\r\n    ///\r\n    /// Field Declarations\r\n    ///\r\n\r\n    private _map: Promise<GoogleMapTypes.GoogleMap>;\r\n    private _mapInstance: GoogleMapTypes.GoogleMap;\r\n    private _mapResolver: (value?: GoogleMapTypes.GoogleMap) => void;\r\n    private _config: GoogleMapAPILoaderConfig;\r\n\r\n    ///\r\n    /// Property Definitions\r\n    ///\r\n\r\n\r\n    /**\r\n     * Gets the Google Map control instance underlying the implementation\r\n     *\r\n     * @readonly\r\n     * @memberof GoogleMapService\r\n     */\r\n    public get MapInstance(): GoogleMapTypes.GoogleMap { return this._mapInstance; }\r\n\r\n    /**\r\n     * Gets a Promise for a Google Map control instance underlying the implementation. Use this instead of {@link MapInstance} if you\r\n     * are not sure if and when the instance will be created.\r\n     * @readonly\r\n     * @memberof GoogleMapService\r\n     */\r\n    public get MapPromise(): Promise<GoogleMapTypes.GoogleMap> { return this._map; }\r\n\r\n    /**\r\n     * Gets the maps physical size.\r\n     *\r\n     * @readonly\r\n     * @abstract\r\n     * @memberof BingMapService\r\n     */\r\n    public get MapSize(): ISize {\r\n        if (this.MapInstance) {\r\n            const el: HTMLDivElement = this.MapInstance.getDiv();\r\n            const s: ISize = { width: el.offsetWidth, height: el.offsetHeight };\r\n            return s;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of GoogleMapService.\r\n     * @param _loader MapAPILoader instance implemented for Google Maps. This instance will generally be injected.\r\n     * @param _zone NgZone object to enable zone aware promises. This will generally be injected.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    constructor(private _loader: MapAPILoader, private _zone: NgZone) {\r\n        this._map = new Promise<GoogleMapTypes.GoogleMap>(\r\n            (resolve: (map: GoogleMapTypes.GoogleMap) => void) => { this._mapResolver = resolve; }\r\n        );\r\n        this._config = (<GoogleMapAPILoader>this._loader).Config;\r\n    }\r\n\r\n    ///\r\n    /// Public methods and MapService interface implementation\r\n    ///\r\n\r\n    /**\r\n     * Creates a canvas overlay layer to perform custom drawing over the map with out\r\n     * some of the overhead associated with going through the Map objects.\r\n     * @param drawCallback A callback function that is triggered when the canvas is ready to be\r\n     * rendered for the current map view.\r\n     * @returns - Promise of a {@link CanvasOverlay} object.\r\n     * @memberof GoogleMapService\r\n     */\r\n    public CreateCanvasOverlay(drawCallback: (canvas: HTMLCanvasElement) => void): Promise<CanvasOverlay> {\r\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\r\n            const overlay: GoogleCanvasOverlay = new GoogleCanvasOverlay(drawCallback);\r\n            overlay.SetMap(map);\r\n            return overlay;\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Creates a Google map cluster layer within the map context\r\n     *\r\n     * @param options - Options for the layer. See {@link IClusterOptions}.\r\n     * @returns - Promise of a {@link Layer} object, which models the underlying Microsoft.Maps.ClusterLayer object.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public CreateClusterLayer(options: IClusterOptions): Promise<Layer> {\r\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\r\n            let updateOptions: boolean = false;\r\n            const markerClusterer: GoogleMapTypes.MarkerClusterer = new MarkerClusterer(map, [], options);\r\n            const clusterLayer = new GoogleMarkerClusterer(markerClusterer);\r\n            const o: IClusterOptions = {\r\n                id: options.id\r\n            };\r\n            if (!options.visible) {\r\n                o.visible = false;\r\n                updateOptions = true;\r\n            }\r\n            if (!options.clusteringEnabled) {\r\n                o.clusteringEnabled = false;\r\n                updateOptions = true;\r\n            }\r\n            if (updateOptions) {\r\n                clusterLayer.SetOptions(o);\r\n            }\r\n            return clusterLayer;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an information window for a map position\r\n     *\r\n     * @param [options] - Infowindow options. See {@link IInfoWindowOptions}\r\n     * @returns - Promise of a {@link InfoWindow} object, which models the underlying Microsoft.Maps.Infobox object.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public CreateInfoWindow(options?: IInfoWindowOptions): Promise<GoogleInfoWindow> {\r\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\r\n            const o: GoogleMapTypes.InfoWindowOptions = GoogleConversions.TranslateInfoWindowOptions(options);\r\n            const infoWindow: GoogleMapTypes.InfoWindow = new google.maps.InfoWindow(o);\r\n            return new GoogleInfoWindow(infoWindow, this);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a map layer within the map context\r\n     *\r\n     * @param options - Options for the layer. See {@link ILayerOptions}\r\n     * @returns - Promise of a {@link Layer} object, which models the underlying Microsoft.Maps.Layer object.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public CreateLayer(options: ILayerOptions): Promise<Layer> {\r\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\r\n             return new GoogleLayer(map, this, options.id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a map instance\r\n     *\r\n     * @param el - HTML element to host the map.\r\n     * @param mapOptions - Map options\r\n     * @returns - Promise fullfilled once the map has been created.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public CreateMap(el: HTMLElement, mapOptions: IMapOptions): Promise<void> {\r\n        return this._loader.Load().then(() => {\r\n            // apply mixins\r\n            MixinMapLabelWithOverlayView();\r\n            MixinCanvasOverlay();\r\n\r\n            // execute map startup\r\n            if (!mapOptions.mapTypeId == null) { mapOptions.mapTypeId = MapTypeId.hybrid; }\r\n            if (this._mapInstance != null) {\r\n                this.DisposeMap();\r\n            }\r\n            const o: GoogleMapTypes.MapOptions = GoogleConversions.TranslateOptions(mapOptions);\r\n            const map: GoogleMapTypes.GoogleMap = new google.maps.Map(el, o);\r\n            if (mapOptions.bounds) {\r\n                map.fitBounds(GoogleConversions.TranslateBounds(mapOptions.bounds));\r\n            }\r\n            this._mapInstance = map;\r\n            this._mapResolver(map);\r\n            return;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a Google map marker within the map context\r\n     *\r\n     * @param [options=<IMarkerOptions>{}] - Options for the marker. See {@link IMarkerOptions}.\r\n     * @returns - Promise of a {@link Marker} object, which models the underlying Microsoft.Maps.PushPin object.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public CreateMarker(options: IMarkerOptions = <IMarkerOptions>{}): Promise<Marker> {\r\n        const payload = (x: GoogleMapTypes.MarkerOptions, map: GoogleMapTypes.GoogleMap): GoogleMarker => {\r\n            const marker = new google.maps.Marker(x);\r\n            const m = new GoogleMarker(marker);\r\n            m.IsFirst = options.isFirst;\r\n            m.IsLast = options.isLast;\r\n            if (options.metadata) { options.metadata.forEach((val: any, key: string) => m.Metadata.set(key, val)); }\r\n            marker.setMap(map);\r\n            return m;\r\n        };\r\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\r\n            const o: GoogleMapTypes.MarkerOptions = GoogleConversions.TranslateMarkerOptions(options);\r\n            if (options.iconInfo && options.iconInfo.markerType) {\r\n                const s = Marker.CreateMarker(options.iconInfo);\r\n                if (typeof(s) === 'string') {\r\n                    o.icon = s;\r\n                    return payload(o, map);\r\n                }\r\n                else {\r\n                    return s.then(x => {\r\n                        o.icon = x.icon;\r\n                        return payload(o, map);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                return payload(o, map);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a polygon within the Google Map map context\r\n     *\r\n     * @abstract\r\n     * @param options - Options for the polygon. See {@link IPolygonOptions}.\r\n     * @returns - Promise of a {@link Polygon} object, which models the underlying native polygon.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    public CreatePolygon(options: IPolygonOptions): Promise<Polygon> {\r\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\r\n            const o: GoogleMapTypes.PolygonOptions = GoogleConversions.TranslatePolygonOptions(options);\r\n            const polygon: GoogleMapTypes.Polygon = new google.maps.Polygon(o);\r\n            polygon.setMap(map);\r\n\r\n            const p: GooglePolygon = new GooglePolygon(polygon);\r\n            if (options.metadata) { options.metadata.forEach((val: any, key: string) => p.Metadata.set(key, val)); }\r\n            if (options.title && options.title !== '') { p.Title = options.title; }\r\n            if (options.showLabel != null) { p.ShowLabel = options.showLabel; }\r\n            if (options.showTooltip != null) { p.ShowTooltip = options.showTooltip; }\r\n            if (options.labelMaxZoom != null) { p.LabelMaxZoom = options.labelMaxZoom; }\r\n            if (options.labelMinZoom != null) { p.LabelMinZoom = options.labelMinZoom; }\r\n            return p;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a polyline within the Google Map map context\r\n     *\r\n     * @abstract\r\n     * @param options - Options for the polyline. See {@link IPolylineOptions}.\r\n     * @returns - Promise of a {@link Polyline} object (or an array therefore for complex paths)\r\n     * which models the underlying native polyline.\r\n     *\r\n     * @memberof MapService\r\n     */\r\n    public CreatePolyline(options: IPolylineOptions): Promise<Polyline|Array<Polyline>> {\r\n        let polyline: GoogleMapTypes.Polyline;\r\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\r\n            const o: GoogleMapTypes.PolylineOptions = GoogleConversions.TranslatePolylineOptions(options);\r\n            if (options.path && options.path.length > 0 && !Array.isArray(options.path[0])) {\r\n                o.path = GoogleConversions.TranslatePaths(options.path)[0];\r\n                polyline = new google.maps.Polyline(o);\r\n                polyline.setMap(map);\r\n\r\n                const pl = new GooglePolyline(polyline);\r\n                if (options.metadata) { options.metadata.forEach((val: any, key: string) => pl.Metadata.set(key, val)); }\r\n                if (options.title && options.title !== '') { pl.Title = options.title; }\r\n                if (options.showTooltip != null) { pl.ShowTooltip = options.showTooltip; }\r\n                return pl;\r\n            }\r\n            else {\r\n                const paths: Array<Array<GoogleMapTypes.LatLng>> = GoogleConversions.TranslatePaths(options.path);\r\n                const lines: Array<Polyline> = new Array<Polyline>();\r\n                paths.forEach(p => {\r\n                    o.path = p;\r\n                    polyline = new google.maps.Polyline(o);\r\n                    polyline.setMap(map);\r\n\r\n                    const pl = new GooglePolyline(polyline);\r\n                    if (options.metadata) { options.metadata.forEach((val: any, key: string) => pl.Metadata.set(key, val)); }\r\n                    if (options.title && options.title !== '') { pl.Title = options.title; }\r\n                    if (options.showTooltip != null) { pl.ShowTooltip = options.showTooltip; }\r\n                    lines.push(pl);\r\n                });\r\n                return lines;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes a layer from the map.\r\n     *\r\n     * @param layer - Layer to delete. See {@link Layer}. This method expects the Google specific Layer model implementation.\r\n     * @returns - Promise fullfilled when the layer has been removed.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public DeleteLayer(layer: Layer): Promise<void> {\r\n        // return resolved promise as there is no conept of a custom layer in Google.\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Dispaose the map and associated resoures.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public DisposeMap(): void {\r\n        if (this._map == null && this._mapInstance == null) { return; }\r\n        if (this._mapInstance != null) {\r\n            this._mapInstance = null;\r\n            this._map = new Promise<GoogleMapTypes.GoogleMap>((resolve: () => void) => { this._mapResolver = resolve; });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the geo coordinates of the map center\r\n     *\r\n     * @returns - A promise that when fullfilled contains the goe location of the center. See {@link ILatLong}.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public GetCenter(): Promise<ILatLong> {\r\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\r\n            const center: GoogleMapTypes.LatLng = map.getCenter();\r\n            return <ILatLong>{\r\n                latitude: center.lat(),\r\n                longitude: center.lng()\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the geo coordinates of the map bounding box\r\n     *\r\n     * @returns - A promise that when fullfilled contains the geo location of the bounding box. See {@link IBox}.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public GetBounds(): Promise<IBox> {\r\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\r\n            const box = map.getBounds();\r\n            return <IBox>{\r\n                maxLatitude: box.getNorthEast().lat(),\r\n                maxLongitude: Math.max(box.getNorthEast().lng(), box.getSouthWest().lng()),\r\n                minLatitude: box.getSouthWest().lat(),\r\n                minLongitude: Math.min(box.getNorthEast().lng(), box.getSouthWest().lng()),\r\n                center: { latitude: box.getCenter().lat(), longitude: box.getCenter().lng() },\r\n                padding: 0\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the current zoom level of the map.\r\n     *\r\n     * @returns - A promise that when fullfilled contains the zoom level.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public GetZoom(): Promise<number> {\r\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => map.getZoom());\r\n    }\r\n\r\n    /**\r\n     * Provides a conversion of geo coordinates to pixels on the map control.\r\n     *\r\n     * @param loc - The geo coordinates to translate.\r\n     * @returns - Promise of an {@link IPoint} interface representing the pixels. This promise resolves to null\r\n     * if the goe coordinates are not in the view port.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public LocationToPoint(loc: ILatLong): Promise<IPoint> {\r\n        return this._map.then((m: GoogleMapTypes.GoogleMap) => {\r\n            let crossesDateLine: boolean = false;\r\n            const l: GoogleMapTypes.LatLng = GoogleConversions.TranslateLocationObject(loc);\r\n            const p = m.getProjection();\r\n            const s: number = Math.pow(2, m.getZoom());\r\n            const b: GoogleMapTypes.LatLngBounds = m.getBounds();\r\n            if (b.getCenter().lng() < b.getSouthWest().lng()  ||\r\n                b.getCenter().lng() > b.getNorthEast().lng()) { crossesDateLine = true; }\r\n\r\n\r\n            const offsetY: number = p.fromLatLngToPoint(b.getNorthEast()).y;\r\n            const offsetX: number = p.fromLatLngToPoint(b.getSouthWest()).x;\r\n            const point: GoogleMapTypes.Point = p.fromLatLngToPoint(l);\r\n            return {\r\n                x: Math.floor((point.x - offsetX + ((crossesDateLine && point.x < offsetX) ? 256 : 0)) * s),\r\n                y: Math.floor((point.y - offsetY) * s)\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Provides a conversion of geo coordinates to pixels on the map control.\r\n     *\r\n     * @param loc - The geo coordinates to translate.\r\n     * @returns - Promise of an {@link IPoint} interface array representing the pixels.\r\n     *\r\n     * @memberof BingMapService\r\n     */\r\n    public LocationsToPoints(locs: Array<ILatLong>): Promise<Array<IPoint>> {\r\n        return this._map.then((m: GoogleMapTypes.GoogleMap) => {\r\n            let crossesDateLine: boolean = false;\r\n            const p = m.getProjection();\r\n            const s: number = Math.pow(2, m.getZoom());\r\n            const b: GoogleMapTypes.LatLngBounds = m.getBounds();\r\n            if (b.getCenter().lng() < b.getSouthWest().lng()  ||\r\n                b.getCenter().lng() > b.getNorthEast().lng()) { crossesDateLine = true; }\r\n\r\n            const offsetX: number = p.fromLatLngToPoint(b.getSouthWest()).x;\r\n            const offsetY: number = p.fromLatLngToPoint(b.getNorthEast()).y;\r\n            const l = locs.map(ll => {\r\n                const l1: GoogleMapTypes.LatLng = GoogleConversions.TranslateLocationObject(ll);\r\n                const point: GoogleMapTypes.Point = p.fromLatLngToPoint(l1);\r\n                return {\r\n                    x: Math.floor((point.x - offsetX + ((crossesDateLine && point.x < offsetX) ? 256 : 0)) * s),\r\n                    y: Math.floor((point.y - offsetY) * s)\r\n                };\r\n            });\r\n            return l;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Centers the map on a geo location.\r\n     *\r\n     * @param latLng - GeoCoordinates around which to center the map. See {@link ILatLong}\r\n     * @returns - Promise that is fullfilled when the center operations has been completed.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public SetCenter(latLng: ILatLong): Promise<void> {\r\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\r\n            const center: GoogleMapTypes.LatLng = GoogleConversions.TranslateLocationObject(latLng);\r\n            map.setCenter(center);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the generic map options.\r\n     *\r\n     * @param options - Options to set.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public SetMapOptions(options: IMapOptions) {\r\n        this._map.then((m: GoogleMapTypes.GoogleMap) => {\r\n            const o: GoogleMapTypes.MapOptions = GoogleConversions.TranslateOptions(options);\r\n            m.setOptions(o);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the view options of the map.\r\n     *\r\n     * @param options - Options to set.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public SetViewOptions(options: IMapOptions) {\r\n        this._map.then((m: GoogleMapTypes.GoogleMap) => {\r\n            if (options.bounds) {\r\n                m.fitBounds(GoogleConversions.TranslateBounds(options.bounds));\r\n            }\r\n            const o: GoogleMapTypes.MapOptions = GoogleConversions.TranslateOptions(options);\r\n            m.setOptions(o);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the zoom level of the map.\r\n     *\r\n     * @param zoom - Zoom level to set.\r\n     * @returns - A Promise that is fullfilled once the zoom operation is complete.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public SetZoom(zoom: number): Promise<void> {\r\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => map.setZoom(zoom));\r\n    }\r\n\r\n    /**\r\n     * Creates an event subscription\r\n     *\r\n     * @param eventName - The name of the event (e.g. 'click')\r\n     * @returns - An observable of type E that fires when the event occurs.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public SubscribeToMapEvent<E>(eventName: string): Observable<E> {\r\n        const googleEventName: string = GoogleMapEventsLookup[eventName];\r\n        return Observable.create((observer: Observer<E>) => {\r\n            this._map.then((m: GoogleMapTypes.GoogleMap) => {\r\n                m.addListener(googleEventName, (e: any) => {\r\n                    this._zone.run(() => observer.next(e));\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Triggers the given event name on the map instance.\r\n     *\r\n     * @param eventName - Event to trigger.\r\n     * @returns - A promise that is fullfilled once the event is triggered.\r\n     *\r\n     * @memberof GoogleMapService\r\n     */\r\n    public TriggerMapEvent(eventName: string): Promise<void> {\r\n        return this._map.then((m) => google.maps.event.trigger(m, eventName, null));\r\n    }\r\n\r\n}\r\n","import { ILatLong } from '../../interfaces/ilatlong';\r\nimport { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\r\nimport { Polygon } from '../../models/polygon';\r\nimport { MapPolygonDirective } from '../../components/map-polygon';\r\nimport { PolygonService } from '../polygon.service';\r\nimport { MapService } from '../map.service';\r\nimport { LayerService } from '../layer.service';\r\n/**\r\n * Concrete implementation of the Polygon Service abstract class for Google Maps.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class GooglePolygonService implements PolygonService {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _polygons: Map<MapPolygonDirective, Promise<Polygon>> = new Map<MapPolygonDirective, Promise<Polygon>>();\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of GooglePolygonService.\r\n     * @param _mapService - {@link MapService} instance. The concrete {@link GoogleMapService} implementation is expected.\r\n     * @param _layerService - {@link GoogleLayerService} instance.\r\n     * The concrete {@link GoogleLayerService} implementation is expected.\r\n     * @param _zone - NgZone instance to support zone aware promises.\r\n     *\r\n     * @memberof GooglePolygonService\r\n     */\r\n    constructor(private _mapService: MapService,\r\n        private _layerService: LayerService,\r\n        private _zone: NgZone) {\r\n    }\r\n\r\n    ///\r\n    /// Public members and MarkerService implementation\r\n    ///\r\n\r\n    /**\r\n     * Adds a polygon to a map. Depending on the polygon context, the polygon will either by added to the map or a\r\n     * correcsponding layer.\r\n     *\r\n     * @param polygon - The {@link MapPolygonDirective} to be added.\r\n     *\r\n     * @memberof GooglePolygonService\r\n     */\r\n    public AddPolygon(polygon: MapPolygonDirective): void {\r\n        const o: IPolygonOptions = {\r\n            id: polygon.Id,\r\n            clickable: polygon.Clickable,\r\n            draggable: polygon.Draggable,\r\n            editable: polygon.Editable,\r\n            fillColor: polygon.FillColor,\r\n            fillOpacity: polygon.FillOpacity,\r\n            geodesic: polygon.Geodesic,\r\n            labelMaxZoom: polygon.LabelMaxZoom,\r\n            labelMinZoom: polygon.LabelMinZoom,\r\n            paths: polygon.Paths,\r\n            showLabel: polygon.ShowLabel,\r\n            showTooltip: polygon.ShowTooltip,\r\n            strokeColor: polygon.StrokeColor,\r\n            strokeOpacity: polygon.StrokeOpacity,\r\n            strokeWeight: polygon.StrokeWeight,\r\n            title: polygon.Title,\r\n            visible: polygon.Visible,\r\n            zIndex: polygon.zIndex,\r\n        };\r\n        const polygonPromise: Promise<Polygon> = this._mapService.CreatePolygon(o);\r\n        this._polygons.set(polygon, polygonPromise);\r\n    }\r\n\r\n    /**\r\n      * Registers an event delegate for a polygon.\r\n      *\r\n      * @param eventName - The name of the event to register (e.g. 'click')\r\n      * @param polygon - The {@link MapPolygonDirective} for which to register the event.\r\n      * @returns - Observable emiting an instance of T each time the event occurs.\r\n      *\r\n      * @memberof GooglePolygonService\r\n      */\r\n    public CreateEventObservable<T>(eventName: string, polygon: MapPolygonDirective): Observable<T> {\r\n        return Observable.create((observer: Observer<T>) => {\r\n            this._polygons.get(polygon).then((p: Polygon) => {\r\n                p.AddListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n      * Deletes a polygon.\r\n      *\r\n      * @param polygon - {@link MapPolygonDirective} to be deleted.\r\n      * @returns - A promise fullfilled once the polygon has been deleted.\r\n      *\r\n      * @memberof GooglePolygonService\r\n      */\r\n    public DeletePolygon(polygon: MapPolygonDirective): Promise<void> {\r\n        const m = this._polygons.get(polygon);\r\n        if (m == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return m.then((l: Polygon) => {\r\n            return this._zone.run(() => {\r\n                l.Delete();\r\n                this._polygons.delete(polygon);\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Obtains geo coordinates for the polygon on the click location\r\n     *\r\n     * @abstract\r\n     * @param e - The mouse event.\r\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\r\n     *\r\n     * @memberof GooglePolygonService\r\n     */\r\n    public GetCoordinatesFromClick(e: MouseEvent | any): ILatLong {\r\n        return { latitude: e.latLng.lat(), longitude: e.latLng.lng() };\r\n    }\r\n\r\n    /**\r\n     * Obtains the polygon model for the polygon allowing access to native implementation functionatiliy.\r\n     *\r\n     * @param polygon - The {@link MapPolygonDirective} for which to obtain the polygon model.\r\n     * @returns - A promise that when fullfilled contains the {@link Polygon} implementation of the underlying platform.\r\n     *\r\n     * @memberof GooglePolygonService\r\n     */\r\n    public GetNativePolygon(polygon: MapPolygonDirective): Promise<Polygon> {\r\n        return this._polygons.get(polygon);\r\n    }\r\n\r\n    /**\r\n     * Set the polygon options.\r\n     *\r\n     * @param polygon - {@link MapPolygonDirective} to be updated.\r\n     * @param options - {@link IPolygonOptions} object containing the options. Options will be merged with the\r\n     * options already on the underlying object.\r\n     * @returns - A promise fullfilled once the polygon options have been set.\r\n     *\r\n     * @memberof GooglePolygonService\r\n     */\r\n    public SetOptions(polygon: MapPolygonDirective, options: IPolygonOptions): Promise<void> {\r\n        return this._polygons.get(polygon).then((l: Polygon) => { l.SetOptions(options); });\r\n    }\r\n\r\n    /**\r\n     * Updates the Polygon path\r\n     *\r\n     * @param polygon - {@link MapPolygonDirective} to be updated.\r\n     * @returns - A promise fullfilled once the polygon has been updated.\r\n     *\r\n     * @memberof GooglePolygonService\r\n     */\r\n    public UpdatePolygon(polygon: MapPolygonDirective): Promise<void> {\r\n        const m = this._polygons.get(polygon);\r\n        if (m == null || polygon.Paths == null || !Array.isArray(polygon.Paths) || polygon.Paths.length === 0) {\r\n            return Promise.resolve();\r\n        }\r\n        return m.then((l: Polygon) => {\r\n            if (Array.isArray(polygon.Paths[0])) {\r\n                l.SetPaths(polygon.Paths);\r\n            }\r\n            else {\r\n                l.SetPath(<Array<ILatLong>>polygon.Paths);\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import { ILatLong } from '../../interfaces/ilatlong';\r\nimport { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\r\nimport { Polyline } from '../../models/polyline';\r\nimport { MapPolylineDirective } from '../../components/map-polyline';\r\nimport { PolylineService } from '../polyline.service';\r\nimport { MapService } from '../map.service';\r\nimport { LayerService } from '../layer.service';\r\n\r\n/**\r\n * Concrete implementation of the Polyline Service abstract class for Google Maps.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class GooglePolylineService implements PolylineService {\r\n\r\n    ///\r\n    /// Field declarations\r\n    ///\r\n    private _polylines: Map<MapPolylineDirective, Promise<Polyline|Array<Polyline>>> =\r\n        new Map<MapPolylineDirective, Promise<Polyline|Array<Polyline>>>();\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of GooglePolylineService.\r\n     * @param _mapService - {@link MapService} instance. The concrete {@link GoogleMapService} implementation is expected.\r\n     * @param _layerService - {@link LayerService} instance.\r\n     * The concrete {@link GoogleLayerService} implementation is expected.\r\n     * @param _zone - NgZone instance to support zone aware promises.\r\n     *\r\n     * @memberof GooglePolylineService\r\n     */\r\n    constructor(private _mapService: MapService,\r\n        private _layerService: LayerService,\r\n        private _zone: NgZone) { }\r\n\r\n    ///\r\n    /// Public members and MarkerService implementation\r\n    ///\r\n\r\n    /**\r\n     * Adds a polyline to a map. Depending on the polyline context, the polyline will either by added to the map or a\r\n     * correcsponding layer.\r\n     *\r\n     * @param polyline - The {@link MapPolylineDirective} to be added.\r\n     *\r\n     * @memberof GooglePolylineService\r\n     */\r\n    public AddPolyline(polyline: MapPolylineDirective): void {\r\n        const o: IPolylineOptions = {\r\n            id: polyline.Id,\r\n            clickable: polyline.Clickable,\r\n            draggable: polyline.Draggable,\r\n            editable: polyline.Editable,\r\n            geodesic: polyline.Geodesic,\r\n            path: polyline.Path,\r\n            showTooltip: polyline.ShowTooltip,\r\n            strokeColor: polyline.StrokeColor,\r\n            strokeOpacity: polyline.StrokeOpacity,\r\n            strokeWeight: polyline.StrokeWeight,\r\n            title: polyline.Title,\r\n            visible: polyline.Visible,\r\n            zIndex: polyline.zIndex,\r\n        };\r\n        const polylinePromise: Promise<Polyline|Array<Polyline>> = this._mapService.CreatePolyline(o);\r\n        this._polylines.set(polyline, polylinePromise);\r\n    }\r\n\r\n    /**\r\n      * Registers an event delegate for a line.\r\n      *\r\n      * @param eventName - The name of the event to register (e.g. 'click')\r\n      * @param polyline - The {@link MapPolylineDirective} for which to register the event.\r\n      * @returns - Observable emiting an instance of T each time the event occurs.\r\n      *\r\n      * @memberof GooglePolylineService\r\n      */\r\n    public CreateEventObservable<T>(eventName: string, polyline: MapPolylineDirective): Observable<T> {\r\n        return Observable.create((observer: Observer<T>) => {\r\n            this._polylines.get(polyline).then(p => {\r\n                const x: Array<Polyline> = Array.isArray(p) ? p : [p];\r\n                x.forEach(line => line.AddListener(eventName, (e: T) => this._zone.run(() => observer.next(e))));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n      * Deletes a polyline.\r\n      *\r\n      * @param polyline - {@link MapPolylineDirective} to be deleted.\r\n      * @returns - A promise fullfilled once the polyline has been deleted.\r\n      *\r\n      * @memberof GooglePolylineService\r\n      */\r\n    public DeletePolyline(polyline: MapPolylineDirective): Promise<void> {\r\n        const m = this._polylines.get(polyline);\r\n        if (m == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return m.then(l => {\r\n            return this._zone.run(() => {\r\n                const x: Array<Polyline> = Array.isArray(l) ? l : [l];\r\n                x.forEach(line =>  line.Delete());\r\n                this._polylines.delete(polyline);\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Obtains geo coordinates for the line on the click location\r\n     *\r\n     * @abstract\r\n     * @param e - The mouse event.\r\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked line.\r\n     *\r\n     * @memberof GooglePolylineService\r\n     */\r\n    public GetCoordinatesFromClick(e: MouseEvent | any): ILatLong {\r\n        if (!e) {\r\n            return null;\r\n        }\r\n        if (!e.latLng) {\r\n            return null;\r\n        }\r\n        if (!e.latLng.lat || !e.latLng.lng) {\r\n            return null;\r\n        }\r\n        return { latitude: e.latLng.lat(), longitude: e.latLng.lng() };\r\n    }\r\n\r\n    /**\r\n     * Obtains the polyline model for the line allowing access to native implementation functionatiliy.\r\n     *\r\n     * @param polyline - The {@link MapPolylineDirective} for which to obtain the polyline model.\r\n     * @returns - A promise that when fullfilled contains the {@link Polyline}\r\n     * implementation of the underlying platform. For complex paths, returns an array of polylines.\r\n     *\r\n     * @memberof GooglePolylineService\r\n     */\r\n    public GetNativePolyline(polyline: MapPolylineDirective): Promise<Polyline|Array<Polyline>> {\r\n        return this._polylines.get(polyline);\r\n    }\r\n\r\n    /**\r\n     * Set the polyline options.\r\n     *\r\n     * @param polyline - {@link MapPolylineDirective} to be updated.\r\n     * @param options - {@link IPolylineOptions} object containing the options. Options will be merged with the\r\n     * options already on the underlying object.\r\n     * @returns - A promise fullfilled once the polyline options have been set.\r\n     *\r\n     * @memberof GooglePolylineService\r\n     */\r\n    public SetOptions(polyline: MapPolylineDirective, options: IPolylineOptions): Promise<void> {\r\n        return this._polylines.get(polyline).then(l => {\r\n            const x: Array<Polyline> = Array.isArray(l) ? l : [l];\r\n            x.forEach(line => line.SetOptions(options));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the Polyline path\r\n     *\r\n     * @param polyline - {@link MapPolylineDirective} to be updated.\r\n     * @returns - A promise fullfilled once the polyline has been updated.\r\n     *\r\n     * @memberof GooglePolylineService\r\n     */\r\n    public UpdatePolyline(polyline: MapPolylineDirective): Promise<void> {\r\n        const m = this._polylines.get(polyline);\r\n        if (m == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return m.then(l => this._zone.run(() => {\r\n            const x: Array<Polyline> = Array.isArray(l) ? l : [l];\r\n            const p: Array<Array<ILatLong>> =\r\n                polyline.Path.length > 0 && Array.isArray(polyline.Path[0]) ? <Array<Array<ILatLong>>>polyline.Path :\r\n                <Array<Array<ILatLong>>>[polyline.Path];\r\n            x.forEach((line, index) => {\r\n                if (p.length > index) { line.SetPath(p[index]); }\r\n            });\r\n            if (Array.isArray(l) && l.length > p.length) {\r\n                l.splice(p.length - 1).forEach(line => line.Delete());\r\n            }\r\n        }));\r\n    }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { MapServiceFactory } from '../mapservicefactory';\r\nimport { MapService } from '../map.service';\r\nimport { MapAPILoader, WindowRef, DocumentRef } from '../mapapiloader';\r\nimport { MarkerService } from '../marker.service';\r\nimport { InfoBoxService } from '../infobox.service';\r\nimport { LayerService } from '../layer.service';\r\nimport { ClusterService } from '../cluster.service';\r\nimport { PolygonService } from '../polygon.service';\r\nimport { PolylineService } from '../polyline.service';\r\n\r\nimport * as GoogleMapTypes from './google-map-types';\r\n\r\nimport { GoogleMapAPILoader, GoogleMapAPILoaderConfig } from './google-map-api-loader.service';\r\nimport { GoogleInfoBoxService } from './google-infobox.service';\r\nimport { GoogleMarkerService } from './google-marker.service';\r\nimport { GoogleMapService } from './google-map.service';\r\nimport { GoogleLayerService } from './google-layer.service';\r\nimport { GoogleClusterService } from './google-cluster.service';\r\nimport { GooglePolygonService } from './google-polygon.service';\r\nimport { GooglePolylineService } from './google-polyline.service';\r\n\r\n/**\r\n * Implements a factory to create three necessary Google Maps specific service instances.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class GoogleMapServiceFactory implements MapServiceFactory {\r\n    private _map: Promise<GoogleMapTypes.GoogleMap>;\r\n    private _mapResolver: (value?: GoogleMapTypes.GoogleMap) => void;\r\n\r\n    ///\r\n    /// Constructor\r\n    ///\r\n\r\n    /**\r\n     * Creates an instance of GoogleMapServiceFactory.\r\n     * @param _loader - {@link MapAPILoader} implementation for the Google Map provider.\r\n     * @param _zone - NgZone object to implement zone aware promises.\r\n     *\r\n     * @memberof GoogleMapServiceFactory\r\n     */\r\n    constructor(private _loader: MapAPILoader, private _zone: NgZone) {\r\n        this._map =\r\n            new Promise<GoogleMapTypes.GoogleMap>((resolve: () => void) => { this._mapResolver = resolve; });\r\n    }\r\n\r\n    ///\r\n    /// Public methods and MapServiceFactory implementation.\r\n    ///\r\n\r\n    /**\r\n     * Creates the map service for the Google Maps implementation.\r\n     *\r\n     * @returns - {@link MapService}. A concreted instance of the {@link GoogleMapService}.\r\n     *\r\n     * @memberof GoogleMapServiceFactory\r\n     */\r\n    public Create(): MapService {\r\n        return new GoogleMapService(this._loader, this._zone);\r\n    }\r\n\r\n    /**\r\n     * Creates the cluster service for the Google Maps implementation.\r\n     *\r\n     * @param map - {@link MapService}. A concreted instance of the {@link GoogleMapService}.\r\n     * @returns - {@link ClusterService}. A concreted instance of the {@link GoogleClusterService}.\r\n     *\r\n     * @memberof GoogleMapServiceFactory\r\n     */\r\n    public CreateClusterService(_mapService: MapService): ClusterService {\r\n        return new GoogleClusterService(_mapService, this._zone);\r\n    }\r\n\r\n    /**\r\n     * Creates thh info box service for the Google Maps implementation.\r\n     *\r\n     * @param map - {@link MapService}. A concreted instance of the {@link GoogleMapService}.\r\n     * @param map - {@link MarkerService}. A concreted instance of the {@link GoogleMarkerService}.\r\n     * @returns - {@link InfoBoxService}. A concreted instance of the {@link GoogleInfoBoxService}.\r\n     *\r\n     * @memberof GoogleMapServiceFactory\r\n     */\r\n    public CreateInfoBoxService(_mapService: MapService, _markerService: MarkerService) {\r\n        return new GoogleInfoBoxService(_mapService, _markerService, this._zone);\r\n    }\r\n\r\n    /**\r\n     * Creates the layer service for the Google Maps implementation.\r\n     *\r\n     * @param map - {@link MapService}. A concreted instance of the {@link GoogleMapService}.\r\n     * @returns - {@link LayerService}. A concreted instance of the {@link GoogleLayerService}.\r\n     *\r\n     * @memberof GoogleMapServiceFactory\r\n     */\r\n    public CreateLayerService(_mapService: MapService) {\r\n        return new GoogleLayerService(_mapService, this._zone);\r\n    }\r\n\r\n    /**\r\n     * Creates the marker service for the Google Maps implementation.\r\n     *\r\n     * @param map - {@link MapService}. A concreted instance of the {@link GoogleMapService}.\r\n     * @param layers - {@link LayerService}. A concreted instance of the {@link GoogleLayerService}.\r\n     * @param clusters  - {@link ClusterService}. A concreted instance of the {@link GoogleClusterService}.\r\n     * @returns - {@link MarkerService}. A concreted instance of the {@link GoogleMarkerService}.\r\n     *\r\n     * @memberof GoogleMapServiceFactory\r\n     */\r\n    public CreateMarkerService(_mapService: MapService, _layerService: GoogleLayerService, _clusterService: GoogleClusterService) {\r\n        return new GoogleMarkerService(_mapService, _layerService, _clusterService, this._zone);\r\n    }\r\n\r\n    /**\r\n     * Creates the polygon service for the Google Maps implementation.\r\n     *\r\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\r\n     * @param layers - {@link LayerService} implementation for the underlying map architecture.\r\n     * @returns - {@link PolygonService} implementation for the underlying map architecture.\r\n     *\r\n     * @memberof MapServiceFactory\r\n     */\r\n    public CreatePolygonService(map: MapService, layers: LayerService): PolygonService {\r\n        return new GooglePolygonService(map, layers, this._zone);\r\n    }\r\n\r\n    /**\r\n     * Creates the polyline service for the Google Maps implementation.\r\n     *\r\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\r\n     * @param layers - {@link LayerService} implementation for the underlying map architecture.\r\n     * @returns - {@link PolylineService} implementation for the underlying map architecture.\r\n     *\r\n     * @memberof MapServiceFactory\r\n     */\r\n    public CreatePolylineService(map: MapService, layers: LayerService): PolylineService {\r\n        return new GooglePolylineService(map, layers, this._zone);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n *  Creates a new instance of a plaform specific MapServiceFactory.\r\n *\r\n * @param apiLoader - An {@link MapAPILoader} instance. This is expected to the a {@link GoogleMapAPILoader}.\r\n * @param zone - An NgZone instance to provide zone aware promises.\r\n *\r\n * @returns - A {@link MapServiceFactory} instance.\r\n */\r\nexport function GoogleMapServiceFactoryFactory(apiLoader: MapAPILoader, zone: NgZone): MapServiceFactory {\r\n    return new GoogleMapServiceFactory(apiLoader, zone);\r\n}\r\n\r\n/**\r\n * Creates a new instance of a plaform specific MapLoaderFactory.\r\n *\r\n * @export\r\n * @returns - A {@link MapAPILoader} instance.\r\n */\r\nexport function GoogleMapLoaderFactory(): MapAPILoader {\r\n    return new GoogleMapAPILoader(new GoogleMapAPILoaderConfig(), new WindowRef(), new DocumentRef());\r\n}\r\n","import { NgModule, ModuleWithProviders, NgZone } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport 'bingmaps';\r\n\r\n///\r\n/// import module interfaces\r\n///\r\nimport { ILatLong } from './src/interfaces/ilatlong';\r\nimport { IInfoWindowOptions } from './src/interfaces/iinfo-window-options';\r\nimport { IInfoWindowAction } from './src/interfaces/iinfo-window-action';\r\nimport { IMarkerOptions } from './src/interfaces/imarker-options';\r\nimport { IMapOptions } from './src/interfaces/imap-options';\r\nimport { ISize } from './src/interfaces/isize';\r\nimport { IPoint } from './src/interfaces/ipoint';\r\nimport { IBox } from './src/interfaces/ibox';\r\nimport { IMarkerEvent } from './src/interfaces/imarker-event';\r\nimport { IMarkerIconInfo } from './src/interfaces/imarker-icon-info';\r\nimport { ILayerOptions } from './src/interfaces/ilayer-options';\r\nimport { IClusterOptions } from './src/interfaces/icluster-options';\r\nimport { ISpiderClusterOptions } from './src/interfaces/ispider-cluster-options';\r\nimport { ILineOptions } from './src/interfaces/iline-options';\r\nimport { IPolygonOptions } from './src/interfaces/ipolygon-options';\r\nimport { IPolylineOptions } from './src/interfaces/ipolyline-options';\r\nimport { IPolygonEvent } from './src/interfaces/ipolygon-event';\r\nimport { IPolylineEvent } from './src/interfaces/ipolyline-event';\r\nimport { IMapEventLookup } from './src/interfaces/imap-event-lookup';\r\nimport { ILabelOptions } from './src/interfaces/ilabel-options';\r\n\r\n///\r\n/// import module models\r\n///\r\nimport { InfoWindow } from './src/models/info-window';\r\nimport { Marker } from './src/models/marker';\r\nimport { MarkerTypeId } from './src/models/marker-type-id';\r\nimport { MapTypeId } from './src/models/map-type-id';\r\nimport { Layer } from './src/models/layer';\r\nimport { Polygon } from './src/models/polygon';\r\nimport { Polyline } from './src/models/polyline';\r\nimport { SpiderClusterMarker } from './src/models/spider-cluster-marker';\r\nimport { ClusterPlacementMode } from './src/models/cluster-placement-mode';\r\nimport { ClusterClickAction } from './src/models/cluster-click-action';\r\nimport { CanvasOverlay} from './src/models/canvas-overlay';\r\nimport { BingLayer } from './src/models/bing/bing-layer';\r\nimport { BingClusterLayer } from './src/models/bing/bing-cluster-layer';\r\nimport { BingSpiderClusterMarker } from './src/models/bing/bing-spider-cluster-marker';\r\nimport { BingInfoWindow } from './src/models/bing/bing-info-window';\r\nimport { BingMarker } from './src/models/bing/bing-marker';\r\nimport { BingPolygon } from './src/models/bing/bing-polygon';\r\nimport { BingPolyline } from './src/models/bing/bing-polyline';\r\nimport { BingMapEventsLookup } from './src/models/bing/bing-events-lookup';\r\nimport { BingCanvasOverlay } from './src/models/bing/bing-canvas-overlay';\r\nimport { GoogleInfoWindow } from './src/models/google/google-info-window';\r\nimport { GoogleMarker } from './src/models/google/google-marker';\r\nimport { GooglePolygon } from './src/models/google/google-polygon';\r\nimport { GooglePolyline } from './src/models/google/google-polyline';\r\nimport { GoogleMapEventsLookup } from './src/models/google/google-events-lookup';\r\nimport { GoogleCanvasOverlay } from './src/models/google/google-canvas-overlay';\r\n\r\n///\r\n/// import module components\r\n///\r\nimport { MapComponent } from './src/components/map';\r\nimport { MapMarkerDirective } from './src/components/map-marker';\r\nimport { InfoBoxComponent } from './src/components/infobox';\r\nimport { InfoBoxActionDirective } from './src/components/infobox-action';\r\nimport { MapLayerDirective } from './src/components/map-layer';\r\nimport { ClusterLayerDirective } from './src/components/cluster-layer';\r\nimport { MapPolygonDirective } from './src/components/map-polygon';\r\nimport { MapPolylineDirective } from './src/components/map-polyline';\r\nimport { MapMarkerLayerDirective } from './src/components/map-marker-layer';\r\nimport { MapPolygonLayerDirective } from './src/components/map-polygon-layer';\r\nimport { MapPolylineLayerDirective } from './src/components/map-polyline-layer';\r\n\r\n///\r\n/// import module services\r\n///\r\nimport { MapServiceFactory } from './src/services/mapservicefactory';\r\nimport { MapService } from './src/services/map.service';\r\nimport { MapAPILoader, WindowRef, DocumentRef } from './src/services/mapapiloader';\r\nimport { InfoBoxService } from './src/services/infobox.service';\r\nimport { LayerService } from './src/services/layer.service';\r\nimport { MarkerService } from './src/services/marker.service';\r\nimport { ClusterService } from './src/services/cluster.service';\r\nimport { PolygonService } from './src/services/polygon.service';\r\nimport { PolylineService } from './src/services/polyline.service';\r\nimport { BingMapServiceFactory,\r\n    BingMapServiceFactoryFactory, BingMapLoaderFactory } from './src/services/bing/bing-map.service.factory';\r\nimport { BingMapService } from './src/services/bing/bing-map.service';\r\nimport { BingMapAPILoader, BingMapAPILoaderConfig } from './src/services/bing/bing-map.api-loader.service';\r\nimport { BingInfoBoxService } from './src/services/bing/bing-infobox.service';\r\nimport { BingMarkerService } from './src/services/bing/bing-marker.service';\r\nimport { BingLayerService } from './src/services/bing/bing-layer.service';\r\nimport { BingClusterService } from './src/services/bing/bing-cluster.service';\r\nimport { BingPolygonService } from './src/services/bing/bing-polygon.service';\r\nimport { BingPolylineService } from './src/services/bing/bing-polyline.service';\r\nimport { GoogleClusterService } from './src/services/google/google-cluster.service';\r\nimport { GoogleInfoBoxService } from './src/services/google/google-infobox.service';\r\nimport { GoogleLayerService } from './src/services/google/google-layer.service';\r\nimport { GoogleMapAPILoader, GoogleMapAPILoaderConfig } from './src/services/google/google-map-api-loader.service';\r\nimport {\r\n    GoogleMapServiceFactory, GoogleMapServiceFactoryFactory,\r\n    GoogleMapLoaderFactory\r\n} from './src/services/google/google-map.service.factory';\r\nimport { GoogleMapService } from './src/services/google/google-map.service';\r\nimport { GoogleMarkerService } from './src/services/google/google-marker.service';\r\nimport { GooglePolygonService } from './src/services/google/google-polygon.service';\r\nimport { GooglePolylineService } from './src/services/google/google-polyline.service';\r\n\r\n///\r\n/// export publics components, models, interfaces etc for external reuse.\r\n///\r\nexport {\r\n    ILatLong, IInfoWindowOptions, IInfoWindowAction, ISize, IMarkerOptions, IBox, IMapOptions, IPoint, IMarkerEvent, IPolygonEvent,\r\n    IPolylineEvent, IMapEventLookup, IMarkerIconInfo, ILayerOptions, IClusterOptions, ISpiderClusterOptions, ILineOptions,\r\n    IPolygonOptions, IPolylineOptions, ILabelOptions, MapComponent, InfoBoxComponent, MapMarkerDirective, MapPolygonDirective,\r\n    MapPolylineDirective, InfoBoxActionDirective, MapMarkerLayerDirective, MapPolygonLayerDirective, MapLayerDirective,\r\n    ClusterLayerDirective, MapPolylineLayerDirective, MapTypeId, Marker, MarkerTypeId, InfoWindow, Layer, ClusterPlacementMode,\r\n    ClusterClickAction, SpiderClusterMarker, Polygon, Polyline, CanvasOverlay, MapService, MapServiceFactory, MarkerService,\r\n    InfoBoxService, MapAPILoader, WindowRef, DocumentRef, LayerService, PolygonService, PolylineService, ClusterService\r\n};\r\nexport {\r\n    BingMapServiceFactory, BingMapAPILoaderConfig, BingMapService, BingInfoBoxService,\r\n    BingMarkerService, BingPolygonService, BingPolylineService, BingMapAPILoader,\r\n    BingLayerService, BingClusterService, BingLayer, BingMarker, BingPolyline, BingMapEventsLookup, BingPolygon,\r\n    BingInfoWindow, BingClusterLayer, BingSpiderClusterMarker, BingCanvasOverlay\r\n};\r\nexport {\r\n    GoogleClusterService, GoogleInfoBoxService, GoogleLayerService, GoogleMapAPILoader, GoogleMapAPILoaderConfig,\r\n    GoogleMapServiceFactory, GoogleMapService, GoogleMarkerService, GooglePolygonService, GooglePolylineService,\r\n    GoogleMarker, GoogleInfoWindow, GooglePolygon, GooglePolyline, GoogleMapEventsLookup, GoogleCanvasOverlay\r\n};\r\n\r\n///\r\n/// define module\r\n///\r\n@NgModule({\r\n    declarations: [\r\n        MapLayerDirective,\r\n        MapComponent,\r\n        MapMarkerDirective,\r\n        InfoBoxComponent,\r\n        InfoBoxActionDirective,\r\n        MapPolygonDirective,\r\n        MapPolylineDirective,\r\n        ClusterLayerDirective,\r\n        MapMarkerLayerDirective,\r\n        MapPolygonLayerDirective,\r\n        MapPolylineLayerDirective\r\n    ],\r\n    imports: [CommonModule],\r\n    exports: [\r\n        CommonModule,\r\n        MapComponent,\r\n        MapMarkerDirective,\r\n        MapPolygonDirective,\r\n        MapPolylineDirective,\r\n        InfoBoxComponent,\r\n        InfoBoxActionDirective,\r\n        MapLayerDirective,\r\n        ClusterLayerDirective,\r\n        MapMarkerLayerDirective,\r\n        MapPolygonLayerDirective,\r\n        MapPolylineLayerDirective\r\n    ]\r\n})\r\nexport class MapModule {\r\n\r\n    static forRoot(mapServiceFactory?: MapServiceFactory, loader?: MapAPILoader): ModuleWithProviders {\r\n        return {\r\n            ngModule: MapModule,\r\n            providers: [\r\n                mapServiceFactory ? { provide: MapServiceFactory, useValue: mapServiceFactory } :\r\n                    { provide: MapServiceFactory, deps: [MapAPILoader, NgZone], useFactory: BingMapServiceFactoryFactory },\r\n                loader ? { provide: MapAPILoader, useValue: loader } : { provide: MapAPILoader, useFactory: BingMapLoaderFactory },\r\n                DocumentRef,\r\n                WindowRef\r\n            ]\r\n        };\r\n    }\r\n\r\n    static forRootBing(): ModuleWithProviders {\r\n        return {\r\n            ngModule: MapModule,\r\n            providers: [\r\n                { provide: MapServiceFactory, deps: [MapAPILoader, NgZone], useFactory: BingMapServiceFactoryFactory },\r\n                { provide: MapAPILoader, useFactory: BingMapLoaderFactory },\r\n                DocumentRef,\r\n                WindowRef\r\n            ]\r\n        };\r\n    }\r\n\r\n    static forRootGoogle(): ModuleWithProviders {\r\n        return {\r\n            ngModule: MapModule,\r\n            providers: [\r\n                { provide: MapServiceFactory, deps: [MapAPILoader, NgZone], useFactory: GoogleMapServiceFactoryFactory },\r\n                { provide: MapAPILoader, useFactory: GoogleMapLoaderFactory },\r\n                DocumentRef,\r\n                WindowRef\r\n            ]\r\n        };\r\n    }\r\n}\r\n"],"names":["tslib_1.__extends","eachSeries","nextTick","id","GoogleMapTypes.MapTypeId","Injectable","EventEmitter","Directive","Input","Output","Component","ViewEncapsulation","ViewChild","ContentChildren","timer","ViewContainerRef","ContentChild","ChangeDetectionStrategy","NgZone","HostBinding","layerId","Optional","Observable","Subject","tslib_1.__values","DEFAULT_CONFIGURATION","ScriptProtocol","MixinMapLabelWithOverlayView","MixinCanvasOverlay","NgModule","CommonModule"],"mappings":";;;;;;;;;;;;;AAGA;;QAAA;;;yBAHA;QAiFC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5ED;;;;;;;;;;;;;;;;;;;;;QA6DkB,mBAAY;;;;;;;;;;;sBAAC,QAAyB;gBAChD,QAAQ,QAAQ,CAAC,UAAU;oBACvB,KAAK,YAAY,CAAC,YAAY,EAAE,OAAO,MAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;oBAC3E,KAAK,YAAY,CAAC,mBAAmB,EAAE,OAAO,MAAM,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;oBACzF,KAAK,YAAY,CAAC,UAAU,EAAE,OAAO,MAAM,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;oBAC5E,KAAK,YAAY,CAAC,kBAAkB,EAAE,OAAO,MAAM,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;oBACvF,KAAK,YAAY,CAAC,kBAAkB,EAAE,OAAO,MAAM,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;oBACvF,KAAK,YAAY,CAAC,iBAAiB,EAAE,OAAO,MAAM,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;oBACrF,KAAK,YAAY,CAAC,MAAM,EAAE,MAAM,KAAK,CAAC,qDAAqD,CAAC,CAAC;iBAChG;gBACD,MAAM,KAAK,CAAC,2BAA2B,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC;;;;;;;;;QAUrD,wBAAiB;;;;;;;sBAAC,IAAY;gBACxC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,EAAG,EAAE;oBAAE,OAAQ,IAAI,CAAC;iBAAE;gBAEnD,qBAAI,GAAG,GAAqB,IAAI,CAAC;gBACjC,GAAG,GAAG,MAAM,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACzC,IAAI,GAAG,IAAI,IAAI,EAAE;oBAAE,OAAO,GAAG,CAAC;iBAAE;gBAEhC,IAAI,QAAO,QAAQ,CAAC,KAAK,WAAW,IAAI,QAAQ,IAAI,IAAI,EAAE;oBACtD,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBACpC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC;oBACf,MAAM,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;iBAC3C;gBACD,OAAO,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;QAYE,yBAAkB;;;;;;;;;YAAnC,UAAoC,QAAyB;gBACzD,IAAI,QAAQ,IAAI,IAAI,EAAE;oBAAE,MAAM,KAAK,CAAC,oEAAoE,CAAC,CAAC;iBAAE;gBAC5G,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,IAAI,IAAI,IAAI,IAAI,QAAQ,CAAC,MAAM,IAAI,IAAI,EAAE;oBACtE,MAAM,KAAK,CAAC,mFAAmF,CAAC,CAAC;iBACpG;gBACD,IAAI,QAAQ,CAAC,EAAE,IAAI,IAAI,IAAI,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;oBAC5D,qBAAM,EAAE,GAA0B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBACtE,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC;oBAC9B,OAAO,EAAE,CAAC,gBAAgB,CAAC;iBAC9B;gBAED,qBAAM,CAAC,GAAsB,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAC9D,qBAAM,GAAG,GAA6B,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBACzD,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;gBAC9B,CAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;gBAChC,IAAI,QAAQ,CAAC,QAAQ,EAAE;;oBAEnB,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,EAAE,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;;oBAE7C,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;;oBAE9C,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;iBAClD;gBAED,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,IAAI,KAAK,CAAC;;gBAGxC,GAAG,CAAC,SAAS,EAAE,CAAC;gBAChB,IAAI,QAAQ,CAAC,aAAa,EAAE;oBAAE,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;iBAAE;gBAC/F,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,CAAS,IAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBAClE,GAAG,CAAC,SAAS,EAAE,CAAC;gBAChB,GAAG,CAAC,IAAI,EAAE,CAAC;gBACX,GAAG,CAAC,MAAM,EAAE,CAAC;gBAEb,qBAAM,CAAC,GAAW,CAAC,CAAC,SAAS,EAAE,CAAC;gBAChC,IAAI,QAAQ,CAAC,EAAE,IAAI,IAAI,EAAE;oBAAE,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,CAAC,EAAE,UAAU,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;iBAAE;gBACrH,OAAO,CAAC,CAAC;aACZ;;;;;;;;;;;;;;;;;;;QAWgB,gCAAyB;;;;;;;;;YAA1C,UAA2C,QAAyB;gBAChE,IAAI,QAAQ,IAAI,IAAI,EAAE;oBAAE,MAAM,KAAK,CAAC,4EAA4E,CAAC,CAAC;iBAAE;gBACpH,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,IAAI,IAAI,IAAI,EAAE;oBAAE,MAAM,KAAK,CAAC,8DAA8D,CAAC,CAAC;iBAAE;gBAC/H,IAAI,QAAQ,CAAC,EAAE,IAAI,IAAI,IAAI,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;oBAC5D,qBAAM,EAAE,GAA0B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBACtE,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC;oBAC9B,OAAO,EAAE,CAAC,gBAAgB,CAAC;iBAC9B;gBAED,qBAAM,WAAW,GAAW,QAAQ,CAAC,WAAW,IAAI,CAAC,CAAC;;gBAEtD,qBAAM,GAAG,GAAkB;oBACvB,iDAAiD;oBACjD,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;oBAC9B,YAAY;oBACZ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;oBAC9B,gBAAgB;oBAChB,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,QAAQ,EAAE;oBACpC,QAAQ;oBACR,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,QAAQ,EAAE;oBACpC,OAAO;oBACP,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,WAAW,EAAE,QAAQ,EAAE;oBACpD,YAAY;oBACZ,QAAQ,CAAC,KAAK,IAAI,KAAK;oBACvB,kBAAkB;oBAClB,WAAW,CAAC,QAAQ,EAAE;oBACtB,UAAU;oBACV,QAAQ,CAAC,KAAK,IAAI,KAAK;oBACvB,WAAW;iBACd,CAAC;gBAEF,qBAAM,CAAC,GAAW,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC/B,IAAI,QAAQ,CAAC,EAAE,IAAI,IAAI,EAAE;oBAAE,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,CAAC,EAAE,UAAU,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;iBAAE;gBACrH,OAAO,CAAC,CAAC;aACZ;;;;;;;;;;;;;;;;;;;QAWgB,4BAAqB;;;;;;;;;YAAtC,UAAuC,QAAyB;gBAC5D,IAAI,QAAQ,IAAI,IAAI,EAAE;oBAAE,MAAM,KAAK,CAAC,uEAAuE,CAAC,CAAC;iBAAE;gBAC/G,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,QAAQ,IAAI,IAAI,EAAE;oBAC5E,MAAM,KAAK,CAAC,kHAAkH,CAAC,CAAC;iBACnI;gBACD,IAAI,QAAQ,CAAC,EAAE,IAAI,IAAI,IAAI,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;oBAC5D,qBAAM,EAAE,GAA0B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBACtE,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC;oBAC9B,OAAO,EAAE,CAAC,gBAAgB,CAAC;iBAC9B;gBAED,qBAAM,CAAC,GAAsB,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAC9D,qBAAM,GAAG,GAA6B,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBACzD,qBAAM,IAAI,GAAW,QAAQ,CAAC,QAAQ,GAAG,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC;gBACnE,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;;gBAGhB,qBAAM,IAAI,GAAgB,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACzD,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACrB,CAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC;gBAE7B,IAAI,QAAQ,CAAC,QAAQ,EAAE;;oBAEnB,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,EAAE,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;;oBAE7C,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;;oBAE9C,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;iBAClD;;gBAGD,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;gBAChB,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC;gBACzB,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,IAAI,KAAK,CAAC;gBAExC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAClC,QAAQ,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;gBACrD,qBAAM,CAAC,GAAW,CAAC,CAAC,SAAS,EAAE,CAAC;gBAChC,IAAI,QAAQ,CAAC,EAAE,IAAI,IAAI,EAAE;oBAAE,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,CAAC,EAAE,UAAU,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;iBAAE;gBACrH,OAAO,CAAC,CAAC;aACZ;;;;;;;;;;;;;;;;;;;;;QAYgB,+BAAwB;;;;;;;;;;YAAzC,UAA0C,QAAyB;gBAC/D,IAAI,QAAQ,IAAI,IAAI,EAAE;oBAAE,MAAM,KAAK,CAAC,0EAA0E,CAAC,CAAC;iBAAE;gBAClH,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,GAAG,IAAI,IAAI,EAAE;oBACvE,MAAM,KAAK,CAAC,uFAAuF,CAAC,CAAC;iBACxG;gBACD,IAAI,QAAQ,CAAC,EAAE,IAAI,IAAI,IAAI,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;oBAC5D,qBAAM,EAAE,GAA0B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBACtE,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC;oBAC9B,OAAO,EAAE,CAAC,gBAAgB,CAAC;iBAC9B;gBAED,qBAAM,KAAK,GAAqB,IAAI,KAAK,EAAE,CAAC;gBAC5C,qBAAM,OAAO,GACT,IAAI,OAAO,CAA4C,UAAC,OAAO,EAAE,MAAM;;oBAEvE,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;oBAChC,KAAK,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;oBACzB,IAAI,QAAQ,CAAC,IAAI,EAAE;wBACf,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;wBAClC,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;qBACvC;oBACD,KAAK,CAAC,MAAM,GAAG;wBACX,qBAAM,CAAC,GAAsB,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;wBAC9D,qBAAM,GAAG,GAA6B,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;wBACzD,qBAAM,IAAI,GAAW,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;;wBAGvD,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACtG,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;wBAGvG,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;;wBAEzC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;wBAEjB,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;wBACrF,QAAQ,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;wBAErD,qBAAM,CAAC,GAAW,CAAC,CAAC,SAAS,EAAE,CAAC;wBAChC,IAAI,QAAQ,CAAC,EAAE,IAAI,IAAI,EAAE;4BAAE,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,CAAC,EAAE,UAAU,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;yBAAE;wBACrH,OAAO,CAAC,EAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC;qBAC1C,CAAC;iBACL,CAAC,CAAC;gBACH,OAAO,OAAO,CAAC;aAClB;;;;;;;;;;;;;;;;;;;;;;;QAcgB,+BAAwB;;;;;;;;;;YAAzC,UAA0C,QAAyB;gBAC/D,IAAI,QAAQ,IAAI,IAAI,EAAE;oBAAE,MAAM,KAAK,CAAC,0EAA0E,CAAC,CAAC;iBAAE;gBAClH,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,IAAI,IAAI,IAAI,IAAI,QAAQ,CAAC,GAAG,IAAI,IAAI,EAAE;oBACnE,MAAM,KAAK,CAAC,mFAAmF,CAAC,CAAC;iBACpG;gBACD,IAAI,QAAQ,CAAC,EAAE,IAAI,IAAI,IAAI,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;oBAC5D,qBAAM,EAAE,GAA0B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBACtE,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC;oBAC9B,OAAO,EAAE,CAAC,gBAAgB,CAAC;iBAC9B;gBAED,qBAAM,OAAO,GACT,IAAI,OAAO,CAA4C,UAAC,OAAO,EAAE,MAAM;oBACvE,qBAAM,MAAM,GAAW,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;oBAC/C,qBAAM,KAAK,GAAqB,IAAI,KAAK,EAAE,CAAC;oBAC5C,qBAAM,MAAM,GAAW,QAAQ,CAAC,aAAa,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;;oBAGhE,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;oBAChC,KAAK,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;oBACzB,KAAK,CAAC,MAAM,GAAG;wBACX,qBAAM,CAAC,GAAsB,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;wBAC9D,qBAAM,GAAG,GAA6B,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;wBACzD,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;wBAC9B,CAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;;wBAG/B,GAAG,CAAC,SAAS,EAAE,CAAC;wBAChB,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;wBACvD,GAAG,CAAC,IAAI,EAAE,CAAC;wBACX,GAAG,CAAC,IAAI,EAAE,CAAC;wBACX,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBACnF,QAAQ,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;wBAErD,qBAAM,CAAC,GAAW,CAAC,CAAC,SAAS,EAAE,CAAC;wBAChC,IAAI,QAAQ,CAAC,EAAE,IAAI,IAAI,EAAE;4BAAE,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,CAAC,EAAE,UAAU,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;yBAAE;wBACrH,OAAO,CAAC,EAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC;qBAC1C,CAAC;iBACL,CAAC,CAAC;gBACH,OAAO,OAAO,CAAC;aAClB;;;;;;;;;;;;;;;;;;;;;;;QAcgB,8BAAuB;;;;;;;;;;YAAxC,UAAyC,QAAyB;gBAC9D,IAAI,QAAQ,IAAI,IAAI,EAAE;oBAAE,MAAM,KAAK,CAAC,yEAAyE,CAAC,CAAC;iBAAE;gBACjH,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,KAAK,IAAI,IAAI,IAAI,QAAQ,CAAC,GAAG,IAAI,IAAI,EAAE;oBACpE,MAAM,KAAK,CAAC,mFAAmF,CAAC,CAAC;iBACpG;gBACD,IAAI,QAAQ,CAAC,EAAE,IAAI,IAAI,IAAI,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;oBAC5D,qBAAM,EAAE,GAA0B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBACtE,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC;oBAC9B,OAAO,EAAE,CAAC,gBAAgB,CAAC;iBAC9B;gBACD,qBAAM,OAAO,GACT,IAAI,OAAO,CAA4C,UAAC,OAAO,EAAE,MAAM;oBACvE,qBAAM,KAAK,GAAqB,IAAI,KAAK,EAAE,CAAC;;oBAG5C,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;oBAChC,KAAK,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;oBACzB,KAAK,CAAC,MAAM,GAAG;wBACX,qBAAM,CAAC,GAAsB,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;wBAC9D,qBAAM,GAAG,GAA6B,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;wBACzD,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC;;wBAGzC,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;wBAC9C,QAAQ,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;wBAErD,qBAAM,CAAC,GAAW,CAAC,CAAC,SAAS,EAAE,CAAC;wBAChC,IAAI,QAAQ,CAAC,EAAE,IAAI,IAAI,EAAE;4BAAE,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,CAAC,EAAE,UAAU,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;yBAAE;wBACrH,OAAO,CAAC,EAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC;qBAC1C,CAAC;iBACL,CAAC,CAAC;gBACH,OAAO,OAAO,CAAC;aAClB;;;;;;mCArWiE,IAAI,GAAG,EAA4B;;;;;;6BAQpC,IAAI,GAAG,EAAiC;qBAnD7G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACaA;;;;;;;QAAA;;;oBAbA;QAgJC;;;;;;;;;;;;;ACvID;;;;;;QAAA;;;8BAgBe,2BAAM;;;;;;;gBACb,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;oBACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC3C;gBACD,OAAO,IAAI,CAAC,OAAO,CAAC;;;;;8BAQb,6BAAQ;;;;;;;gBACf,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;oBACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;iBAC9C;gBACD,OAAO,IAAI,CAAC,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;QAyNhB,mCAAiB;;;;;;;;YAA3B;gBACI,qBAAI,CAAC,GAAa,EAAC,QAAQ,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAC,CAAC;gBAC9C,qBAAI,EAAE,GAAW,EAAE,mBAAE,EAAE,GAAW,CAAC,EAAE,mBAAE,EAAE,GAAW,GAAG,mBAAE,EAAE,GAAW,CAAC,GAAG,CAAC;gBAC3E,qBAAM,IAAI,GAA2B,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACrD,IAAI,IAAI,EAAE;oBACN,IAAI,CAAC,OAAO,CAAC,UAAA,KAAK;wBAAI,OAAA,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC;4BACjC,IAAI,CAAC,CAAC,QAAQ,GAAG,EAAE,EAAE;gCAAE,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC;6BAAE;4BACzC,IAAI,CAAC,CAAC,QAAQ,GAAG,EAAE,EAAE;gCAAE,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC;6BAAE;4BACzC,IAAI,CAAC,CAAC,SAAS,GAAG,EAAE,EAAE;gCAAE,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC;6BAAE;4BAC3C,IAAI,CAAC,CAAC,SAAS,GAAG,EAAE,EAAE;gCAAE,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC;6BAAE;yBAC9C,CAAC;qBAAA,CAAC,CAAC;oBACJ,CAAC,CAAC,QAAQ,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;oBAChC,CAAC,CAAC,SAAS,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;iBACpC;qBACI;oBACD,CAAC,GAAG,IAAI,CAAC;iBACZ;gBACD,OAAO,CAAC,CAAC;aACZ;;;;;;;;;;;;;;;;;QAUS,oCAAkB;;;;;;;;YAA5B;gBACI,qBAAI,CAAC,GAAa,EAAC,QAAQ,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAC,CAAC;gBAC9C,qBAAM,IAAI,GAA2B,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACrD,qBAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvB,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,qBAAI,SAAS,GAAW,CAAC,CAAC;oBAC1B,qBAAI,CAAC,GAAW,CAAC,CAAC;oBAClB,qBAAI,CAAC,GAAW,CAAC,CAAC;oBAClB,qBAAI,EAAE,SAAU,mBAAE,EAAE,SAAU,CAAC;oBAC/B,qBAAI,CAAC,SAAQ,CAAC;oBACd,KAAK,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAClC,KAAK,qBAAI,CAAC,GAAG,CAAC,mBAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE;4BACjE,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAChB,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAChB,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,KAAK,EAAE,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC;gCAC7D,CAAC,EAAE,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,KAAK,EAAE,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC;4BAClE,SAAS,IAAI,CAAC,CAAC;4BACf,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,GAAG,EAAE,CAAC,QAAQ,GAAG,CAAC,GAAG,GAAG,CAAC,QAAQ,IAAI,CAAC,CAAC;4BACxD,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,EAAE,CAAC,SAAS,GAAG,CAAC,GAAG,GAAG,CAAC,SAAS,IAAI,CAAC,CAAC;yBAC9D;qBACJ;oBACD,IAAI,SAAS,KAAK,CAAC,EAAE;wBACjB,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC;wBAClB,CAAC,CAAC,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC;wBAClC,CAAC,CAAC,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC;qBACvC;yBACI;wBACD,CAAC,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;wBAC1B,CAAC,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC;qBAC/B;iBACJ;qBACI;oBACD,CAAC,GAAG,IAAI,CAAC;iBACZ;gBACD,OAAO,CAAC,CAAC;aACZ;sBAjUL;QAkUC;;;;;;;;;;;;;ACzTD;;;;;;QAAA;;;8BAgBe,4BAAM;;;;;;;gBACb,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;oBACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC3C;gBACD,OAAO,IAAI,CAAC,OAAO,CAAC;;;;;8BAQb,8BAAQ;;;;;;;gBACf,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;oBACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;iBAC/C;gBACD,OAAO,IAAI,CAAC,SAAS,CAAC;;;;;;;;;;;;;QAoDZ,4BAAmB;;;;;;;;sBAAC,IAAqB;gBACnD,qBAAI,CAAC,GAAa,EAAC,QAAQ,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAC,CAAC;gBAC9C,qBAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,qBAAI,SAAS,GAAW,CAAC,CAAC;oBAC1B,qBAAI,CAAC,GAAW,CAAC,CAAC;oBAClB,qBAAI,CAAC,GAAW,CAAC,CAAC;oBAClB,qBAAI,EAAE,SAAU,mBAAE,EAAE,SAAU,CAAC;oBAC/B,qBAAI,CAAC,SAAQ,CAAC;oBAEd,KAAK,qBAAI,CAAC,GAAG,CAAC,mBAAE,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE;wBAC3D,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;wBACb,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;wBACb,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,KAAK,EAAE,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC;4BAC7D,CAAC,EAAE,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,KAAK,EAAE,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC;wBAClE,SAAS,IAAI,CAAC,CAAC;wBACf,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,GAAG,EAAE,CAAC,QAAQ,GAAG,CAAC,GAAG,GAAG,CAAC,QAAQ,IAAI,CAAC,CAAC;wBACxD,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,EAAE,CAAC,SAAS,GAAG,CAAC,GAAG,GAAG,CAAC,SAAS,IAAI,CAAC,CAAC;qBAC9D;oBACD,IAAI,SAAS,KAAK,CAAC,EAAE;wBACjB,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC;wBAClB,CAAC,CAAC,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC;wBAClC,CAAC,CAAC,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC;qBACvC;yBACI;wBACD,CAAC,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;wBAC1B,CAAC,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC;qBAC/B;iBACJ;qBACI;oBACD,CAAC,GAAG,IAAI,CAAC;iBACZ;gBACD,OAAO,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;QA8HH,oCAAiB;;;;;;;;YAA3B;gBACI,qBAAI,CAAC,GAAa,EAAC,QAAQ,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAC,CAAC;gBAC9C,qBAAI,EAAE,GAAW,EAAE,mBAAE,EAAE,GAAW,CAAC,EAAE,mBAAE,EAAE,GAAW,GAAG,mBAAE,EAAE,GAAW,CAAC,GAAG,CAAC;gBAC3E,qBAAM,IAAI,GAAoB,IAAI,CAAC,OAAO,EAAE,CAAC;gBAC7C,IAAI,IAAI,EAAE;oBACN,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC;wBACV,IAAI,CAAC,CAAC,QAAQ,GAAG,EAAE,EAAE;4BAAE,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC;yBAAE;wBACzC,IAAI,CAAC,CAAC,QAAQ,GAAG,EAAE,EAAE;4BAAE,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC;yBAAE;wBACzC,IAAI,CAAC,CAAC,SAAS,GAAG,EAAE,EAAE;4BAAE,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC;yBAAE;wBAC3C,IAAI,CAAC,CAAC,SAAS,GAAG,EAAE,EAAE;4BAAE,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC;yBAAE;qBAC9C,CAAC,CAAC;oBACH,CAAC,CAAC,QAAQ,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;oBAChC,CAAC,CAAC,SAAS,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;iBACpC;qBACI;oBACD,CAAC,GAAG,IAAI,CAAC;iBACZ;gBACD,OAAO,CAAC,CAAC;aACZ;;;;;;;;;;;;;;;;;QAUS,sCAAmB;;;;;;;;YAA7B;gBACI,qBAAM,IAAI,GAAoB,IAAI,CAAC,OAAO,EAAE,CAAC;gBAC7C,qBAAM,CAAC,GAAc,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;gBACxD,OAAO,CAAC,CAAC;aACZ;uBA3RL;QA6RC;;IC7RD;;;;;;;;;;;;;;IAcA;IAEA,IAAI,aAAa,GAAG,MAAM,CAAC,cAAc;SACpC,EAAE,SAAS,EAAE,EAAE,EAAE,YAAY,KAAK,IAAI,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC;QAC5E,UAAU,CAAC,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC;YAAE,IAAI,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AAE/E,uBAA0B,CAAC,EAAE,CAAC;QAC1B,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACpB,gBAAgB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE;QACvC,CAAC,CAAC,SAAS,GAAG,CAAC,KAAK,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IACzF,CAAC;AAED,sBA0EyB,CAAC;QACtB,IAAI,CAAC,GAAG,OAAO,MAAM,KAAK,UAAU,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QAClE,IAAI,CAAC;YAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,OAAO;YACH,IAAI,EAAE;gBACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM;oBAAE,CAAC,GAAG,KAAK,CAAC,CAAC;gBACnC,OAAO,EAAE,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;aAC3C;SACJ,CAAC;IACN,CAAC;AAED,oBAAuB,CAAC,EAAE,CAAC;QACvB,IAAI,CAAC,GAAG,OAAO,MAAM,KAAK,UAAU,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC3D,IAAI,CAAC,CAAC;YAAE,OAAO,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;QACjC,IAAI;YACA,OAAO,CAAC,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;gBAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;SAC9E;QACD,OAAO,KAAK,EAAE;YAAE,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;SAAE;gBAC/B;YACJ,IAAI;gBACA,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;oBAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACpD;oBACO;gBAAE,IAAI,CAAC;oBAAE,MAAM,CAAC,CAAC,KAAK,CAAC;aAAE;SACpC;QACD,OAAO,EAAE,CAAC;IACd,CAAC;AAED;QACI,KAAK,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE;YAC9C,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,OAAO,EAAE,CAAC;IACd,CAAC;;;;;;;;;AClID;;QAAA;QAAkDA,uCAAM;;;;kCAFxD;MAEkD,MAAM,EAQvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICPD,qBAAI,EAAE,GAAW,CAAC,CAAC;;;;;;;;AAQnB;;;;;;QAAA;;;;QAyBI,uBAAY,YAAiD;YAA7D,iBAGC;gCAnBuC,IAAI,OAAO,CAAU,UAAC,OAAO,EAAE,MAAM,IAAO,KAAI,CAAC,cAAc,GAAG,OAAO,CAAC,EAAE,CAAC;YAiBjH,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;YAClC,EAAE,EAAE,CAAC;SACR;8BAdU,sCAAW;;;;8BAAuB,OAAO,IAAI,CAAC,YAAY,CAAC;;;;;;;;QAuB/D,8BAAM;;;;;gBACT,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;;;;;QAwBf,6BAAK;;;;;gBACR,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAChD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;gBACzC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;gBAChC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC;gBAC/B,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,gBAAc,EAAI,CAAC;;gBAGrC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;;;;;;;QAgBjC,gCAAQ;;;;;;;gBACX,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBAC5B,IAAI,CAAC,mBAAmB,EAAE,CAAC;gBAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;;;;;;;;;QASjB,8BAAM;;;;;;;sBAAC,KAAc;gBACxB,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;oBAAE,OAAO;iBAAE;;gBAGrC,IAAI,KAAK,EAAE;oBAAE,IAAI,CAAC,MAAM,EAAE,CAAC;iBAAE;;gBAG7B,IAAI,IAAI,CAAC,aAAa,EAAE;oBACpB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACpC;;;;;;;;;;;;;;;;;;;;;;;QA4DK,sCAAc;;;;;;;;;;;YAAxB,UAAyB,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;;gBAE/D,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC;gBACnC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;;gBAGlC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC;gBACpC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC;aACxC;4BA1LL;QA4LC;;;;;;;;;;;AC7KD;;;;QAAA;;;;;;;;;;;;QA+BI,mBAAoB,MAA4B,EAAU,KAAiB;YAAvD,WAAM,GAAN,MAAM,CAAsB;YAAU,UAAK,GAAL,KAAK,CAAY;oCA7BL,IAAI,KAAK,EAAsC;SA6BrC;8BAhBrE,qCAAc;;;;;;;;gBACrB,OAAO,IAAI,CAAC,MAAM,CAAC;;;;;;;;;;;;;;;QA+BhB,+BAAW;;;;;;;;;;sBAAC,SAAiB,EAAE,EAAY;gBAC9C,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,UAAC,CAAC;oBACvD,EAAE,CAAC,CAAC,CAAC,CAAC;iBACT,CAAC,CAAC;;;;;;;;;;QAUA,6BAAS;;;;;;;;sBAAC,MAA0C;gBACvD,IAAI,MAAM,IAAI,MAAM,CAAC,cAAc,EAAE;oBACjC,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;wBACnB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;qBAC1C;yBACI;wBACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;qBACtC;iBACJ;;;;;;;;;;;QAWE,+BAAW;;;;;;;;;sBAAC,QAAmD;;;;;gBAIlE,IAAI,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAE,EAAE;oBACvEC,gBAAU,UAAK,QAAQ,GAAG,UAAC,CAAC,EAAE,IAAI;wBAC9B,IAAI,KAAI,CAAC,UAAU,EAAE,EAAE;4BACnB,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;yBACrC;6BACI;4BACD,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;yBACjC;wBACDC,cAAQ,CAAC,cAAM,OAAA,IAAI,EAAE,GAAA,CAAC,CAAC;qBAC1B,CAAC,CAAC;iBACN;;;;;;;;QAQE,0BAAM;;;;;;;gBACT,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;;;;;;;;;QAU1B,8BAAU;;;;;;;;gBACb,qBAAM,CAAC,GAAkB;oBACrB,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;iBAClC,CAAC;gBACF,OAAO,CAAC,CAAC;;;;;;;;;QAUN,8BAAU;;;;;;;;gBACb,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;;;;;;;;;;QAU7B,gCAAY;;;;;;;;sBAAC,MAA0C;gBAC1D,IAAI,MAAM,CAAC,cAAc,EAAE;oBACvB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;iBAC7C;;;;;;;;;;;QAWE,+BAAW;;;;;;;;;sBAAC,QAAwE;;;;gBAIvF,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;gBAC9B,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;;;;;;;;;;;QAYxB,8BAAU;;;;;;;;;sBAAC,OAAsB;gBACpC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;;;;;;;;;;QAU7C,8BAAU;;;;;;;;sBAAC,OAAgB;gBAC9B,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBAChC,IAAI,OAAO,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC7C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;iBACrD;;wBAtMT;QAyMC;;;;;;AC9LD;;;;;;;;;;;;;;;;;QA2KkB,+BAAe;;;;;;;;sBAAC,MAAyB;gBACnD,qBAAM,CAAC,GAAmC;oBACtC,YAAY,EAAE,MAAM,CAAC,YAAY;oBACjC,KAAK,EAAE,MAAM,CAAC,KAAK;iBACtB,CAAC;gBACF,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,gCAAgB;;;;;;;;sBAAC,OAAiC;gBAC5D,qBAAM,CAAC,GAA0C,IAAI,KAAK,EAAkC,CAAC;gBAC7F,OAAO,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;gBACjE,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,+BAAe;;;;;;;;sBAAC,GAAS;gBACnC,qBAAM,CAAC,GACH,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC,YAAY,EAAE,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC;gBAChH,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,uCAAuB;;;;;;;;sBAAC,OAAwB;gBAC1D,qBAAM,CAAC,GAA8C,EAAE,CAAC;gBACxD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;qBACf,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,eAAe,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAA,CAAC;qBACxE,OAAO,CAAC,UAAC,CAAC;oBACP,IAAI,CAAC,KAAK,aAAa,EAAE;wBACrB,CAAC,CAAC,WAAW,GAAG,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;qBACvE;oBACD,IAAI,CAAC,KAAK,eAAe,EAAE;wBACvB,IAAI,OAAO,CAAC,aAAa,KAAK,oBAAoB,CAAC,QAAQ,EAAE;4BACzD,CAAC,CAAC,aAAa,GAAG,SAAS,CAAC,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC;yBACvE;6BACI;4BACD,CAAC,CAAC,aAAa,GAAG,SAAS,CAAC,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC;yBACrE;qBACJ;yBACI;wBACD,CAAC,CAAC,CAAC,CAAC,GAAG,EAAM,OAAO,GAAE,CAAC,CAAC,CAAC;qBAC5B;iBACJ,CAAC,CAAC;gBACP,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,uCAAuB;;;;;;;;sBAAC,OAA2B;gBAC7D,qBAAM,CAAC,GAAyC,EAAE,CAAC;gBACnD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;qBACf,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,eAAe,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAA,CAAC;qBAC3E,OAAO,CAAC,UAAC,CAAC;oBACP,IAAI,CAAC,KAAK,aAAa,EAAE;wBACrB,CAAC,CAAC,MAAM,GAAG,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;qBAClE;yBACI,IAAI,CAAC,KAAK,UAAU,EAAE;wBACvB,CAAC,CAAC,QAAQ,GAAG,eAAe,CAAC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;qBACpE;yBACI,IAAI,CAAC,KAAK,SAAS,EAAE;wBACtB,CAAC,CAAC,OAAO,GAAG,eAAe,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;qBACjE;yBACI;wBACD,CAAC,CAAC,CAAC,CAAC,GAAG,EAAM,OAAO,GAAE,CAAC,CAAC,CAAC;qBAC5B;iBACJ,CAAC,CAAC;gBACP,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,oCAAoB;;;;;;;;sBAAC,OAAoB;gBACnD,qBAAM,CAAC,GAAyC,EAAE,CAAC;gBACnD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;qBACf,MAAM,CAAC,UAAA,CAAC;oBACL,OAAO,eAAe,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,eAAe,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;iBAC9H,CAAC;qBACD,OAAO,CAAC,UAAC,CAAC;oBACP,IAAI,CAAC,KAAK,QAAQ,EAAE;wBAChB,CAAC,CAAC,MAAM,GAAG,eAAe,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;qBAChE;yBACI,IAAI,CAAC,KAAK,WAAW,EAAE;wBACxB,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,CAAC,MAAM,EAAE;4BACxC,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;4BAC9C,CAAC,CAAC,YAAY,GAAG,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;yBACxD;6BACI,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,CAAC,MAAM,EAAE;4BAC7C,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;4BAC9C,CAAC,CAAC,YAAY,GAAG,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;yBACvD;6BACI;4BACD,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,EAAM,SAAS,GAAE,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;yBAC/E;qBACJ;yBACI,IAAI,CAAC,KAAK,QAAQ,EAAE;wBACrB,CAAC,CAAC,MAAM,GAAG,eAAe,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;qBAC9D;yBACI;wBACD,CAAC,CAAC,CAAC,CAAC,GAAG,EAAM,OAAO,GAAE,CAAC,CAAC,CAAC;qBAC5B;iBACJ,CAAC,CAAC;gBACP,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,iCAAiB;;;;;;;;sBAAC,OAAiB;gBAC7C,qBAAM,CAAC,GAA4B,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;gBACpG,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,sCAAsB;;;;;;;;sBAAC,OAAuB;gBACxD,qBAAM,CAAC,GAAmC,EAAE,CAAC;gBAC7C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;qBACf,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,eAAe,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAA,CAAC;qBACvE,OAAO,CAAC,UAAC,CAAC;oBACP,IAAI,CAAC,KAAK,QAAQ,EAAE;wBAChB,CAAC,CAAC,MAAM,GAAG,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;qBAC7D;yBACI;wBACD,EAAM,CAAC,GAAE,CAAC,CAAC,GAAG,EAAM,OAAO,GAAE,CAAC,CAAC,CAAC;qBACnC;iBACJ,CAAC,CAAC;gBACP,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,gCAAgB;;;;;;;;sBAAC,OAAoB;gBAC/C,qBAAM,CAAC,GAAqC,EAAE,CAAC;gBAC/C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;qBACf,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,eAAe,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAA,CAAC;qBACpE,OAAO,CAAC,UAAC,CAAC;oBACP,IAAI,CAAC,KAAK,QAAQ,EAAE;wBAChB,CAAC,CAAC,MAAM,GAAG,eAAe,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;qBAChE;yBACI,IAAI,CAAC,KAAK,WAAW,EAAE;wBACxB,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,EAAM,SAAS,GAAE,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;qBAC/E;yBACI;wBACD,CAAC,CAAC,CAAC,CAAC,GAAG,EAAM,OAAO,GAAE,CAAC,CAAC,CAAC;qBAC5B;iBACJ,CAAC,CAAC;gBACP,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,8BAAc;;;;;;;;sBAAC,KAA+C;gBACxE,qBAAM,CAAC,GAA0C,IAAI,KAAK,EAAkC,CAAC;gBAC7F,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC9D,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,EAA2B,CAAC,CAAC;iBAChD;qBACI,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;;;oBAG9B,qBAAM,EAAE,IAA2B,KAAK,CAAA,CAAC;oBACzC,KAAK,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAChC,qBAAM,EAAE,GAAmC,IAAI,KAAK,EAA2B,CAAC;wBAChF,KAAK,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BACnC,EAAE,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;yBAC/E;wBACD,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;qBACd;iBACJ;qBACI;;oBAED,qBAAM,CAAC,GAAmC,IAAI,KAAK,EAA2B,CAAC;oBAC/E,qBAAM,EAAE,IAAoB,KAAK,CAAA,CAAC;oBAClC,KAAK,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAChC,CAAC,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;qBACxE;oBACD,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACb;gBACD,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,8BAAc;;;;;;;;sBAAC,KAAa;gBACtC,qBAAM,CAAC,GAAyB,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC3E,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,uCAAuB;;;;;;;;sBAAC,OAAwB;gBAC1D,qBAAM,CAAC,GAAmC,EAAE,CAAC;gBAC7C,qBAAM,CAAC,GAAqC,UAAC,CAAC,EAAE,CAAC;oBAC7C,qBAAM,CAAC,GAAG,8DAA8D,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACjF,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;wBACnB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;wBAC1B,OAAO,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;qBAC1D;yBACI,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;wBAEnB,qBAAM,CAAC,GAAW,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAC9B,qBAAM,CAAC,GAAW,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;wBAC/C,qBAAM,CAAC,GAAW,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;wBAC/C,qBAAM,CAAC,GAAW,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;wBAC/C,OAAO,OAAO,GAAG,CAAC,CAAC,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;qBAClD;yBACI;wBACD,OAAO,CAAC,CAAC;qBACZ;iBACJ,CAAC;gBAEF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;qBACf,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,eAAe,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAA,CAAC;qBACxE,OAAO,CAAC,UAAC,CAAC;oBACP,IAAI,CAAC,KAAK,cAAc,EAAE;wBACtB,CAAC,CAAC,eAAe,GAAG,OAAO,CAAC,YAAY,CAAC;qBAC5C;yBACI,IAAI,CAAC,KAAK,aAAa,EAAE;wBAC1B,IAAI,OAAO,CAAC,aAAa,EAAE;4BACvB,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;yBACjE;6BACI;4BACD,CAAC,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;yBACvC;qBACJ;yBACI,IAAI,CAAC,KAAK,eAAe,EAAE,CAAE;yBAC7B,IAAI,CAAC,KAAK,WAAW,EAAE;wBACxB,IAAI,OAAO,CAAC,WAAW,EAAE;4BACrB,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;yBAC3D;6BACI;4BACD,CAAC,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;yBACnC;qBACJ;yBACI,IAAI,CAAC,KAAK,aAAa,EAAE,CAAE;yBAC3B;wBACD,EAAM,CAAC,GAAE,CAAC,CAAC,GAAG,EAAM,OAAO,GAAE,CAAC,CAAC,CAAC;qBACnC;iBACJ,CAAC,CAAC;gBACP,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,wCAAwB;;;;;;;;sBAAC,OAAyB;gBAC5D,qBAAM,CAAC,GAA0C,EAAE,CAAC;gBACpD,qBAAM,CAAC,GAAqC,UAAC,CAAC,EAAE,CAAC;oBAC7C,qBAAM,CAAC,GAAG,8DAA8D,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACjF,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;wBACnB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;wBAC1B,OAAO,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;qBAC1D;yBACI,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;wBAEnB,qBAAM,CAAC,GAAW,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAC9B,qBAAM,CAAC,GAAW,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;wBAC/C,qBAAM,CAAC,GAAW,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;wBAC/C,qBAAM,CAAC,GAAW,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;wBAC/C,OAAO,OAAO,GAAG,CAAC,CAAC,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;qBAClD;yBACI;wBACD,OAAO,CAAC,CAAC;qBACZ;iBACJ,CAAC;gBACF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;qBACf,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,eAAe,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAA,CAAC;qBACzE,OAAO,CAAC,UAAC,CAAC;oBACP,IAAI,CAAC,KAAK,cAAc,EAAE;wBACtB,CAAC,CAAC,eAAe,GAAG,OAAO,CAAC,YAAY,CAAC;qBAC5C;yBAAM,IAAI,CAAC,KAAK,aAAa,EAAE;wBAC5B,IAAI,OAAO,CAAC,aAAa,EAAE;4BACvB,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;yBACjE;6BACI;4BACD,CAAC,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;yBACvC;qBACJ;yBACI,IAAI,CAAC,KAAK,eAAe,EAAE,CAC/B;yBACI;wBACD,CAAC,CAAC,CAAC,CAAC,GAAG,EAAM,OAAO,GAAE,CAAC,CAAC,CAAC;qBAC5B;iBACJ,CAAC,CAAC;gBACP,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,oCAAoB;;;;;;;;sBAAC,OAAoB;gBACnD,qBAAM,CAAC,GAAsC,EAAE,CAAC;gBAChD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;qBACf,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,eAAe,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAA,CAAC;qBACrE,OAAO,CAAC,UAAC,CAAC;oBACP,IAAI,CAAC,KAAK,QAAQ,EAAE;wBAChB,CAAC,CAAC,MAAM,GAAG,eAAe,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;qBAChE;yBAAM,IAAI,CAAC,KAAK,QAAQ,EAAE;wBACvB,CAAC,CAAC,MAAM,GAAG,eAAe,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;qBAC9D;yBAAM,IAAI,CAAC,KAAK,cAAc,EAAE;wBAC7B,CAAC,CAAC,YAAY,GAAG,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;qBACzE;yBAAM,IAAI,CAAC,KAAK,WAAW,EAAE;wBAC1B,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,EAAM,SAAS,GAAE,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;qBAC/E;yBAAM;wBACH,CAAC,CAAC,CAAC,CAAC,GAAG,EAAM,OAAO,GAAE,CAAC,CAAC,CAAC;qBAC5B;iBACJ,CAAC,CAAC;gBACP,OAAO,CAAC,CAAC;;;;;;;gDArhBoC;YAC7C,iBAAiB;YACjB,aAAa;YACb,mBAAmB;YACnB,iBAAiB;YACjB,sBAAsB;YACtB,mBAAmB;YACnB,gBAAgB;YAChB,mBAAmB;YACnB,kBAAkB;YAClB,gBAAgB;YAChB,mBAAmB;YACnB,qBAAqB;YACrB,kBAAkB;YAClB,kBAAkB;YAClB,QAAQ;YACR,kBAAkB;YAClB,mBAAmB;YACnB,gBAAgB;YAChB,eAAe;YACf,eAAe;YACf,qBAAqB;YACrB,cAAc;YACd,OAAO;YACP,YAAY;YACZ,YAAY;YACZ,OAAO;YACP,QAAQ;YACR,MAAM;YACN,WAAW;SACd;;;;;;iDAOiD;YAC9C,SAAS;YACT,QAAQ;YACR,QAAQ;YACR,cAAc;YACd,SAAS;YACT,cAAc;YACd,WAAW;YACX,SAAS;YACT,MAAM;SACT;;;;;;uDAOuD;YACpD,SAAS;YACT,aAAa;YACb,aAAa;YACb,IAAI;YACJ,UAAU;YACV,aAAa;YACb,iBAAiB;YACjB,aAAa;YACb,SAAS;YACT,OAAO;YACP,mBAAmB;YACnB,UAAU;YACV,SAAS;YACT,OAAO;YACP,QAAQ;SACX;;;;;;mDAOmD;YAChD,QAAQ;YACR,WAAW;YACX,QAAQ;YACR,aAAa;YACb,MAAM;YACN,SAAS;YACT,OAAO;YACP,OAAO;YACP,YAAY;YACZ,UAAU;YACV,SAAS;YACT,OAAO;YACP,QAAQ;SACX;;;;;;oDAOoD;YACjD,QAAQ;YACR,WAAW;YACX,aAAa;YACb,aAAa;YACb,eAAe;YACf,cAAc;YACd,SAAS;SACZ;;;;;;qDAOqD;YAClD,QAAQ;YACR,aAAa;YACb,eAAe;YACf,cAAc;YACd,SAAS;SACZ;;;;;;oDAOoD;YACjD,UAAU;YACV,sBAAsB;YACtB,mBAAmB;YACnB,UAAU;YACV,aAAa;YACb,eAAe;YACf,SAAS;YACT,QAAQ;SACX;8BAxKL;;;;;;;ACKA;;;;;AAOA;;;;QAAA;;;;;;;;;;;;QAuEI,oBAAoB,QAAgC,EAAY,IAAwB,EAAY,MAA4B;YAA5G,aAAQ,GAAR,QAAQ,CAAwB;YAAY,SAAI,GAAJ,IAAI,CAAoB;YAAY,WAAM,GAAN,MAAM,CAAsB;6BAlE1F,IAAI,GAAG,EAAe;4BACzC,KAAK;2BACN,IAAI;SAgE+G;8BArD1H,+BAAO;;;;;;8BAAc,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;0BAClC,GAAY,IAAI,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;;;;8BAO5C,8BAAM;;;;;;8BAAc,OAAO,IAAI,CAAC,OAAO,CAAC;;;;0BACjC,GAAY,IAAI,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;;;;8BAQ1C,gCAAQ;;;;;;;;gBACf,qBAAM,CAAC,GAA4B,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;gBAC/D,OAAO;oBACH,QAAQ,EAAE,CAAC,CAAC,QAAQ;oBACpB,SAAS,EAAE,CAAC,CAAC,SAAS;iBACzB,CAAC;;;;;8BASK,gCAAQ;;;;;;;8BAAuB,OAAO,IAAI,CAAC,SAAS,CAAC;;;;8BAQrD,sCAAc;;;;;;;8BAAU,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;;;;;;;;;;QA6BjD,gCAAW;;;;;;;;;;sBAAC,SAAiB,EAAE,EAAY;gBAC9C,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,UAAC,CAAC;oBACzD,EAAE,CAAC,CAAC,CAAC,CAAC;iBACT,CAAC,CAAC;;;;;;;;;;QAUA,iCAAY;;;;;;;;;gBACf,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;oBAAE,OAAO;iBAAE;gBAC3C,IAAI,IAAI,CAAC,MAAM,EAAE;oBAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBAAE;qBACxD;oBACD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBAClD;;;;;;;;;;QAUE,6BAAQ;;;;;;;;;gBACX,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;;;;;;;;;QAU5B,+BAAU;;;;;;;;gBACb,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;;;;;;;;;;;QAW/B,8BAAS;;;;;;;;;sBAAC,MAAc;gBAC3B,qBAAM,CAAC,GAAmC,EAAE,CAAC;gBAC7C,CAAC,CAAC,MAAM,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxD,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;QAWzB,iCAAY;;;;;;;;;sBAAC,SAAkB;gBAClC,qBAAM,CAAC,GAAmC,EAAE,CAAC;gBAC7C,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC;gBACxB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;QAWzB,4BAAO;;;;;;;;;sBAAC,IAAY;gBACvB,qBAAM,CAAC,GAAmC,EAAE,CAAC;gBAC7C,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;gBACd,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;QAWzB,6BAAQ;;;;;;;;;sBAAC,KAAa;gBACzB,qBAAM,CAAC,GAAmC,EAAE,CAAC;gBAC7C,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC;gBACf,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;QAWzB,gCAAW;;;;;;;;;sBAAC,MAAgB;gBAC/B,qBAAM,CAAC,GAA4B,eAAe,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;gBAC7E,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;QAW1B,6BAAQ;;;;;;;;;sBAAC,KAAa;gBACzB,qBAAM,CAAC,GAAyC,EAAE,CAAC;gBACnD,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;gBAChB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;QAWzB,+BAAU;;;;;;;;;sBAAC,OAAuB;gBACrC,qBAAM,CAAC,GAAoC,eAAe,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;gBAC3F,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;QAUzB,+BAAU;;;;;;;;sBAAC,OAAgB;gBAC9B,qBAAM,CAAC,GAAyC,EAAE,CAAC;gBACnD,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC;gBACpB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;yBAvPpC;QA0PC;;;;;;QCvPD;QAA6CF,2CAAU;;;;sCAHvD;MAG6C,UAAU,EAQtD;;;;;;;;;;;ACKD;;;;QAAA;;;;;;;;;;;;QA8DI,0BAAoB,MAAmC,EAAU,KAAiB;YAA9D,WAAM,GAAN,MAAM,CAA6B;YAAU,UAAK,GAAL,KAAK,CAAY;iCAzD1D,IAAI;4BACM,IAAI,KAAK,EAAU;iCACQ,IAAI,GAAG,EAAkC;mCAC7D,IAAI,KAAK,EAAU;kCACH,IAAI,KAAK,EAA2B;uCAE5E,IAAI,GAAG,EAAmD;qCAC/C,KAAK;8BACZ,CAAC;2BAE8B,IAAI,KAAK,EAA6B;gCACnE,CAAC;kCACwB;gBAC5C,sBAAsB,EAAE,CAAC;gBACzB,0BAA0B,EAAE,KAAK;gBACjC,yBAAyB,EAAE,CAAC;gBAC5B,kBAAkB,EAAE,IAAI;gBACxB,eAAe,EAAE,EAAE;gBACnB,wBAAwB,EAAE,EAAE;gBAC5B,oBAAoB,EAAE,CAAC;gBACvB,UAAU,EAAE;oBACR,WAAW,EAAE,OAAO;oBACpB,eAAe,EAAE,CAAC;iBACrB;gBACD,eAAe,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE;gBACvC,cAAc,EAAE,IAAI;gBACpB,gBAAgB,EAAE,IAAI;aACzB;mCACwD,IAAI;SA6B0B;8BAhB5E,4CAAc;;;;;;;;gBACrB,OAAO,IAAI,CAAC,MAAM,CAAC;;;;;;;;;;;;;;;QA+BhB,sCAAW;;;;;;;;;;sBAAC,SAAiB,EAAE,EAAY;gBAC9C,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,UAAC,CAAC;oBACvD,EAAE,CAAC,CAAC,CAAC,CAAC;iBACT,CAAC,CAAC;;;;;;;;;;;;QAYA,oCAAS;;;;;;;;;;sBAAC,MAAc;gBAC3B,qBAAI,QAAQ,GAAY,MAAM,YAAY,MAAM,CAAC;gBACjD,QAAQ,GAAG,MAAM,YAAY,UAAU,IAAI,QAAQ,CAAC;gBACpD,IAAI,QAAQ,EAAE;oBACV,IAAI,MAAM,CAAC,OAAO,EAAE;wBAChB,IAAI,CAAC,cAAc,EAAE,CAAC;qBACzB;iBACJ;gBACD,IAAI,MAAM,CAAC,cAAc,IAAI,MAAM,CAAC,QAAQ,EAAE;oBAC1C,IAAI,IAAI,CAAC,aAAa,EAAE;wBACpB,qBAAM,CAAC,GAAkC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;wBACnE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;wBAC9B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;wBAC3B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;qBAC9B;yBACI;wBACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;qBACrC;oBACD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;iBACzD;gBACD,IAAI,QAAQ,EAAE;oBACV,IAAI,MAAM,CAAC,MAAM,EAAE;wBACf,IAAI,CAAC,eAAe,EAAE,CAAC;qBAC1B;iBACJ;;;;;;;;;;QAUE,sCAAW;;;;;;;;sBAAC,QAAuB;;gBACtC,IAAI,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAE,EAAE;oBACvE,qBAAM,CAAC,GAAkC,QAAQ,CAAC,GAAG,CAAC,UAAA,CAAC;wBACnD,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;wBAC5C,OAAO,CAAC,CAAC,cAAc,CAAC;qBAC3B,CAAC,CAAC;oBACH,IAAI,IAAI,CAAC,aAAa,EAAE;wBACpB,qBAAM,CAAC,GAAkC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;wBACnE,CAAC,CAAC,IAAI,OAAN,CAAC,WAAS,CAAC,GAAE;wBACb,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;wBAC3B,CAAA,KAAA,IAAI,CAAC,QAAQ,EAAC,IAAI,oBAAI,QAAQ,GAAE;qBACnC;yBACI;wBACD,CAAA,KAAA,IAAI,CAAC,eAAe,EAAC,IAAI,oBAAI,QAAQ,GAAE;qBAC1C;iBACJ;;;;;;;;;;;;QAWE,yDAA8B;;;;;;;;;sBAAC,OAA+B;;gBACjE,IAAI,IAAI,CAAC,iBAAiB,EAAE;oBAAE,OAAO;iBAAE;gBACvC,qBAAM,CAAC,GAAuB,EAAiB,IAAI,CAAC,KAAK,GAAE,WAAW,CAAC;gBACvE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,IAAI,CAAC,YAAY,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;gBAC/C,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;gBAChC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;gBAC/B,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAKnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,OAAO,EAAE,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC,CAAC;gBACzF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,iBAAiB,EAAE,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC,CAAC;gBAC7G,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,eAAe,EAAE,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC,CAAC;gBACzG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC,CAAC;gBACrG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,EAAE,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC,CAAC;gBAC3G,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,WAAW,EAAE,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC,CAAC;gBACpH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,UAAU,EAAE,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC,CAAC;;;;;;;;QAQ/G,iCAAM;;;;;;;;gBACT,IAAI,IAAI,CAAC,iBAAiB,EAAE;oBACxB,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;oBAC1B,EAAiB,IAAI,CAAC,KAAK,GAAE,UAAU,CAAC,IAAI,CAAC,UAAA,CAAC;wBAC1C,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;wBACnC,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;qBAC5B,CAAC,CAAC;oBACH,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;oBAClE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACvB,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;iBAClC;gBACD,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC9B,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC/B,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;gBAC3B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;;;;;;;;;;QAU1B,kDAAuB;;;;;;;;sBAAC,GAA2B;gBACtD,qBAAM,CAAC,GAAW,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC9C,OAAO,CAAC,CAAC;;;;;;;;;QAUN,qCAAU;;;;;;;;gBACb,qBAAM,CAAC,GAAwC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;gBACxE,qBAAM,OAAO,GAAoB;oBAC7B,EAAE,EAAE,CAAC;oBACL,QAAQ,EAAE,CAAC,CAAC,QAAQ;oBACpB,WAAW,EAAE,CAAC,CAAC,WAAW;oBAC1B,iBAAiB,EAAE,CAAC,CAAC,iBAAiB;oBACtC,QAAQ,EAAE,CAAC,CAAC,QAAQ;oBACpB,oBAAoB,EAAE,CAAC,CAAC,oBAAoB;oBAC5C,OAAO,EAAE,CAAC,CAAC,OAAO;oBAClB,MAAM,EAAE,CAAC,CAAC,MAAM;iBACnB,CAAC;gBACF,OAAO,OAAO,CAAC;;;;;;;;;QAUZ,qCAAU;;;;;;;;gBACb,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC;;;;;;;;;;QAUrC,wDAA6B;;;;;;;;sBAAC,GAA2B;gBAC5D,qBAAM,CAAC,GAA4B,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACrE,OAAO,CAAC,CAAC;;;;;;;;;;QAUN,uCAAY;;;;;;;;sBAAC,MAAc;gBAC9B,IAAI,MAAM,CAAC,cAAc,IAAI,MAAM,CAAC,QAAQ,EAAE;oBAC1C,qBAAM,CAAC,GAAW,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBAChD,qBAAM,CAAC,GAAW,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBACvD,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;wBAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;qBAAE;oBAC3C,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;wBAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;qBAAE;oBAClD,IAAI,IAAI,CAAC,aAAa,EAAE;wBACpB,qBAAM,CAAC,GAAkC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;wBACnE,qBAAM,CAAC,GAAW,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;wBACnD,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;4BACR,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BACf,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;yBAC9B;qBACJ;oBACD,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;iBACpD;;;;;;;;;;;QAWE,sCAAW;;;;;;;;;sBAAC,QAAuB;;gBACtC,qBAAM,CAAC,GAAkC,IAAI,KAAK,EAA0B,CAAC;gBAC7E,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;gBAC3B,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAM;oBACpB,IAAI,CAAC,CAAC,cAAc,IAAI,CAAC,CAAC,QAAQ,EAAE;wBAChC,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACtB,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;wBAC5C,CAAC,CAAC,IAAI,mBAAyB,CAAC,CAAC,cAAc,EAAC,CAAC;qBACpD;iBACJ,CAAC,CAAC;gBACH,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;QAWxB,qCAAU;;;;;;;;;sBAAC,OAAwB;gBACtC,qBAAM,CAAC,GAAwC,eAAe,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;gBAChG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC1B,IAAI,OAAO,CAAC,oBAAoB,EAAE;oBAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;iBAAE;;;;;;;;;;QAUvF,qCAAU;;;;;;;;sBAAC,OAAgB;gBAC9B,qBAAM,CAAC,GAAwC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;gBACxE,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC;gBACpB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;QAWvB,0CAAe;;;;;;;;;;gBAClB,IAAI,IAAI,CAAC,aAAa,EAAE;oBAAE,OAAO;iBAAE;gBAEnC,qBAAM,CAAC,GAAkC,IAAI,KAAK,EAA0B,CAAC;gBAC7E,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;oBACnB,IAAI,CAAC,CAAC,cAAc,IAAI,CAAC,CAAC,QAAQ,EAAE;wBAChC,CAAC,CAAC,IAAI,mBAAyB,CAAC,CAAC,cAAc,EAAC,CAAC;qBACpD;iBACJ,CAAC,CAAC;gBACH,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,CAAC;oBAC1B,IAAI,CAAC,CAAC,cAAc,IAAI,CAAC,CAAC,QAAQ,EAAE;wBAChC,CAAC,CAAC,IAAI,mBAAyB,CAAC,CAAC,cAAc,EAAC,CAAC;qBACpD;iBACJ,CAAC,CAAC;gBACH,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;;;;;;;;;;;QAWvB,yCAAc;;;;;;;;;;gBACjB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;oBAAE,OAAO;iBAAE;gBACpC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;;;;;;;;;;QAgBvB,iDAAsB;;;;;;;;sBAAC,GAA2B;gBACtD,yBAAuC;oBACnC,MAAM,EAAE,GAAG,CAAC,SAAS,EAAE;oBACvB,KAAK,EAAE,GAAG,CAAC,QAAQ,EAAE;oBACrB,MAAM,EAAE,GAAG,CAAC,SAAS,EAAE;oBACvB,IAAI,EAAE,GAAG,CAAC,OAAO,EAAE;oBACnB,kBAAkB,EAAE,GAAG,CAAC,qBAAqB,EAAE;oBAC/C,QAAQ,EAAE,GAAG,CAAC,WAAW,EAAE;oBAC3B,IAAI,EAAE,GAAG,CAAC,OAAO,EAAE;oBACnB,UAAU,EAAE,GAAG,CAAC,aAAa,EAAE;oBAC/B,KAAK,EAAE,GAAG,CAAC,QAAQ,EAAE;iBACxB,EAAC;;;;;;;;QAQE,4CAAiB;;;;;;;gBACrB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;gBACpB,IAAI,IAAI,CAAC,eAAe,EAAE;oBACtB,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;oBAC1B,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAC9B,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC;oBACjC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;oBAC5B,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;oBACrB,IAAI,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE;wBAAE,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC;qBAAE;iBACxF;;;;;;;;;;QAUG,uCAAY;;;;;;;;sBAAC,CAAiC;gBAClD,IAAI,CAAC,CAAC,SAAS,YAAY,SAAS,CAAC,IAAI,CAAC,cAAc,EAAE;oBACtD,qBAAM,EAAE,IAAiE,CAAC,CAAC,SAAS,CAAA,CAAC;oBACrF,qBAAM,cAAc,GAAY,EAAE,KAAK,IAAI,CAAC,eAAe,CAAC;oBAC5D,IAAI,CAAC,iBAAiB,EAAE,CAAC;oBACzB,IAAI,cAAc,EAAE;wBAChB,IAAI,CAAC,iBAAiB,mBAAgC,CAAC,CAAC,SAAS,EAAC,CAAC;qBACtE;iBACJ;qBAAM;oBACH,qBAAM,GAAG,IAAmD,CAAC,CAAC,SAAS,CAAA,CAAC;oBACxE,IAAI,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE;wBAC9C,qBAAM,CAAC,GAA4B,IAAI,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC;wBAC3E,qBAAM,CAAC,GAAe,CAAC,CAAC,YAAY,CAAC;wBACrC,qBAAM,IAAI,GAA2B,CAAC,CAAC,cAAc,CAAC;wBACtD,IAAI,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE;4BACpC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,EAAE,IAAI,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;yBAC3F;wBACD,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE;4BAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;yBAAE;wBACxG,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;qBACvB;yBAAM;wBACH,IAAI,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE;4BAAE,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;yBAAE;wBACxH,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE;4BAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;yBAAE;qBACzG;iBACJ;;;;;;;;;;;QAWG,qCAAU;;;;;;;;;sBAAC,CAA0E;gBACzF,IAAI,IAAI,CAAC,UAAU,KAAK,CAAC,CAAC,EAAE;oBACxB,OAAO;iBACV;qBAAM,IAAI,EAAE,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,cAAc,CAAC,yBAAyB,EAAE;oBAC3E,IAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC5B,AAEA;;;;;;;;;;QAUG,6CAAkB;;;;;;;;sBAAC,CAA0E;gBACjG,qBAAM,CAAC,GAAW,EAAqB,CAAC,CAAC,MAAM,GAAE,OAAO,EAAE,CAAC;gBAC3D,qBAAM,cAAc,IAAa,CAAC,KAAK,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC1D,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;gBACtB,IAAI,cAAc,EAAE;oBAChB,IAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC5B;;;;;;;;;;;QAWG,+CAAoB;;;;;;;;;sBAAC,CAA0E;gBACnG,IAAI,IAAI,CAAC,cAAc,CAAC,0BAA0B,EAAE;oBAChD,IAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC5B;;;;;;;;QAQG,2CAAgB;;;;;;sBAAC,CAAiC;gBACtD,qBAAM,GAAG,IAAmD,CAAC,CAAC,SAAS,CAAA,CAAC;gBACxE,IAAI,GAAG,YAAY,SAAS,CAAC,IAAI,CAAC,OAAO,IAAI,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE;oBACvF,qBAAM,CAAC,GAA4B,IAAI,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC;oBAC3E,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;iBACtD;;;;;;;;;QASG,4CAAiB;;;;;;;sBAAC,CAAiC;gBACvD,qBAAM,GAAG,IAAmD,CAAC,CAAC,SAAS,CAAA,CAAC;gBACxE,IAAI,GAAG,YAAY,SAAS,CAAC,IAAI,CAAC,OAAO,IAAI,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE;oBACvF,qBAAM,CAAC,GAA4B,IAAI,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC;oBAC3E,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;oBACxD,IAAI,IAAI,CAAC,cAAc,CAAC,kBAAkB,EAAE;wBACxC,qBAAM,CAAC,GAAe,CAAC,CAAC,YAAY,CAAC;wBACrC,qBAAM,IAAI,GAA2B,CAAC,CAAC,cAAc,CAAC;wBACtD,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE;4BAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;yBAAE;qBAC3G;iBACJ;;;;;;;;;;;QAWG,2CAAgB;;;;;;;;;sBAAC,OAA8B;gBACnD,IAAI,OAAO,EAAE;oBACT,IAAI,OAAO,OAAO,CAAC,sBAAsB,KAAK,QAAQ,EAAE;wBACpD,IAAI,CAAC,cAAc,CAAC,sBAAsB,GAAG,OAAO,CAAC,sBAAsB,CAAC;qBAC/E;oBACD,IAAI,OAAO,OAAO,CAAC,0BAA0B,KAAK,SAAS,EAAE;wBACzD,IAAI,CAAC,cAAc,CAAC,0BAA0B,GAAG,OAAO,CAAC,0BAA0B,CAAC;qBACvF;oBACD,IAAI,OAAO,OAAO,CAAC,yBAAyB,KAAK,QAAQ,EAAE;wBACvD,IAAI,CAAC,cAAc,CAAC,yBAAyB,GAAG,OAAO,CAAC,yBAAyB,CAAC;qBACrF;oBACD,IAAI,OAAO,OAAO,CAAC,kBAAkB,KAAK,SAAS,EAAE;wBACjD,IAAI,CAAC,cAAc,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;qBACvE;oBACD,IAAI,OAAO,OAAO,CAAC,wBAAwB,KAAK,QAAQ,EAAE;wBACtD,IAAI,CAAC,cAAc,CAAC,wBAAwB,GAAG,OAAO,CAAC,wBAAwB,CAAC;qBACnF;oBACD,IAAI,OAAO,OAAO,CAAC,oBAAoB,KAAK,QAAQ,EAAE;wBAClD,IAAI,CAAC,cAAc,CAAC,oBAAoB,GAAG,OAAO,CAAC,oBAAoB,CAAC;qBAC3E;oBACD,IAAI,OAAO,OAAO,CAAC,eAAe,KAAK,QAAQ,EAAE;wBAC7C,IAAI,CAAC,cAAc,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;qBACjE;oBACD,IAAI,OAAO,CAAC,eAAe,EAAE;wBACzB,IAAI,CAAC,cAAc,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;qBACjE;oBACD,IAAI,OAAO,CAAC,UAAU,EAAE;wBACpB,IAAI,CAAC,cAAc,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;qBACvD;oBACD,IAAI,OAAO,CAAC,cAAc,EAAE;wBACxB,IAAI,CAAC,cAAc,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;qBAC/D;oBACD,IAAI,OAAO,CAAC,gBAAgB,EAAE;wBAC1B,IAAI,CAAC,cAAc,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;qBACnE;oBACD,IAAI,OAAO,OAAO,CAAC,OAAO,KAAK,SAAS,EAAE;wBACtC,IAAI,CAAC,cAAc,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;qBACjD;oBACD,IAAI,CAAC,UAAU,mBAAkB,OAAO,EAAC,CAAC;iBAC7C;;;;;;;;;;QAUG,4CAAiB;;;;;;;;sBAAC,OAAsC;gBAC5D,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACzB,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;gBAE/B,IAAI,OAAO,IAAI,OAAO,CAAC,iBAAiB,EAAE;;oBAEtC,qBAAM,CAAC,GAAuB,EAAiB,IAAI,CAAC,KAAK,GAAE,WAAW,CAAC;oBACvE,qBAAM,IAAI,GAAkC,OAAO,CAAC,iBAAiB,CAAC;oBACtE,qBAAM,MAAM,GAA4B,OAAO,CAAC,WAAW,EAAE,CAAC;oBAC9D,qBAAM,WAAW,IACS,CAAC,CAAC,kBAAkB,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAA,CAAC;oBAC9F,qBAAI,KAAK,SAAyB,CAAC;oBACnC,qBAAI,KAAK,GAAG,CAAC,CAAC;oBACd,qBAAM,UAAU,GAAY,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC;oBACrF,qBAAI,cAAc,SAAQ,CAAC;oBAC3B,qBAAI,SAAS,SAAQ,CAAC;oBACtB,qBAAI,UAAU,SAAQ,CAAC;oBAEvB,IAAI,UAAU,EAAE;wBACZ,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,GAAG,IAAI,CAAC,EAAE,CAAC;wBAC/D,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC;qBACvE;yBACI;wBACD,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;wBACtC,cAAc,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,oBAAoB,GAAG,SAAS,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC;wBACpG,IAAI,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE;4BAAE,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC;yBAAE;qBACtH;oBAED,KAAK,qBAAI,CAAC,GAAG,CAAC,mBAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;;wBAE7C,IAAI,CAAC,UAAU,EAAE;4BACb,KAAK,GAAG,SAAS,GAAG,CAAC,CAAC;yBACzB;6BACI;4BACD,KAAK,IAAI,IAAI,CAAC,cAAc,CAAC,wBAAwB,GAAG,cAAc,GAAG,CAAC,GAAG,MAAM,CAAC;4BACpF,cAAc,IAAI,UAAU,GAAG,KAAK,CAAC;yBACxC;wBACD,qBAAM,KAAK,GACP,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,GAAG,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EACrE,WAAW,CAAC,CAAC,GAAG,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC1D,qBAAM,GAAG,IACoB,CAAC,CAAC,kBAAkB,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAA,CAAC;;wBAGhG,KAAK,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;wBACnF,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;;wBAG7B,qBAAM,GAAG,GAA2B,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;wBACpE,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,EAAE,CAAC;wBACtC,GAAG,CAAC,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC;wBACpC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACrD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBAE3B,qBAAM,YAAY,GAA4B,IAAI,uBAAuB,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;wBACxG,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC;wBAC3B,YAAY,CAAC,YAAY,qBAAe,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC;wBAC9E,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;wBACvC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;qBAEnD;oBACD,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;iBACvB;;+BAppBT;QAupBC;;;;;;ACnpBD;;;;;AAOA;;;;QAAA;;;;;;QA+BI,wBAAoB,QAAgC;YAAhC,aAAQ,GAAR,QAAQ,CAAwB;YAChD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACxB;8BAvBU,kCAAM;;;;;;;;gBACb,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,OAAO,KAAK,IAAI,EAAE;oBAAE,OAAO,IAAI,CAAC;iBAAE;gBAClF,OAAO,KAAK,CAAC;;;;;8BAUN,0CAAc;;;;;;;;;gBACrB,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;;;;;;;;;;;QAqBlB,oCAAW;;;;;;;;;;sBAAC,SAAiB,EAAE,EAAY;;gBAC9C,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,UAAC,CAAC;oBACzD,IAAI,CAAC,CAAC,SAAS,KAAK,gBAAgB,EAAE;wBAClC,IAAI,KAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,OAAO,KAAK,IAAI,EAAE;4BAAE,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;yBAAE;6BACpE;4BACD,IAAI,KAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,OAAO,KAAK,KAAK,IAAI,KAAI,CAAC,OAAO,KAAK,IAAI,EAAE;gCACvE,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gCACrB,EAAE,CAAC,CAAC,CAAC,CAAC;6BACT;yBACJ;qBACJ;yBACI;wBACD,EAAE,CAAC,CAAC,CAAC,CAAC;qBACT;iBACJ,CAAC,CAAC;;;;;;;;;QASA,8BAAK;;;;;;;;gBACR,qBAAM,CAAC,GAAmC,EAAE,CAAC;gBAC7C,CAAC,CAAC,OAAO,GAAG,KAAK,CAAC;gBAClB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;;;;;;;;QAUzB,oCAAW;;;;;;;;gBACd,qBAAM,CAAC,GAAa;oBAChB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,QAAQ;oBAC9C,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,SAAS;iBACnD,CAAC;gBACF,OAAO,CAAC,CAAC;;;;;;;;;QASN,6BAAI;;;;;;;;gBACP,qBAAM,CAAC,GAAmC,EAAE,CAAC;gBAC7C,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;QAWzB,mCAAU;;;;;;;;;sBAAC,OAA2B;gBACzC,qBAAM,CAAC,GAAmC,eAAe,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;gBAC3F,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;QAWzB,oCAAW;;;;;;;;;sBAAC,QAAkB;gBACjC,qBAAM,CAAC,GAA4B,eAAe,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;gBAC/E,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;;6BAtIrC;QAwIC;;;;;;;;;;;;;IChID;;;;;;QAAA;;;;;;;;QAwBI,kBAAY,OAA+B;YACvC,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YACrC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;YACzB,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YACjC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;YACnC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YAC5B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SAC3B;;;;;;;;QAYM,yBAAM;;;;;;;;gBACT,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;;;;;;;;;QAUf,0BAAO;;;;;;;;sBAAC,IAA4B;gBACvC,qBAAI,mBAAmB,GAAG,KAAK,CAAC;gBAChC,qBAAI,aAAa,GAAG,KAAK,CAAC;gBAC1B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBAAE,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;iBAAE;gBAC5C,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC;oBACV,QAAQ,CAAC;wBACL,KAAK,YAAY,CAAC;wBAClB,KAAK,UAAU,CAAC;wBAChB,KAAK,WAAW,CAAC;wBACjB,KAAK,cAAc,CAAC;wBACpB,KAAK,aAAa,CAAC;wBACnB,KAAK,OAAO,CAAC;wBACb,KAAK,MAAM;4BACP,mBAAmB,GAAG,IAAI,CAAC;4BAC3B,MAAM;wBACV,KAAK,SAAS,CAAC;wBACf,KAAK,SAAS,CAAC;wBACf,KAAK,QAAQ,CAAC;wBACd,KAAK,QAAQ,CAAC;wBACd,KAAK,UAAU;4BACX,aAAa,GAAG,IAAI,CAAC;4BACrB,MAAM;qBACb;iBACJ,CAAC,CAAC;gBACH,IAAI,mBAAmB,EAAE;oBAAE,IAAI,CAAC,UAAU,EAAE,CAAC;iBAAE;gBAC/C,IAAI,aAAa,EAAE;oBAAE,IAAI,CAAC,IAAI,EAAE,CAAC;iBAAE;;;;;;;;;;;;;;;QAiE7B,6BAAU;;;;;YAApB;gBACI,qBAAM,OAAO,GAAW,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAC5C,qBAAM,OAAO,GAAW,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAC5C,qBAAM,MAAM,GAAY,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAE3C,IAAI,MAAM,EAAE;oBAAC,OAAO,QAAQ,CAAC;iBAAE;gBAC/B,IAAI,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,SAAS,EAAE;oBAAE,OAAO,EAAE,CAAC;iBAAE;gBAClE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE;oBAAE,OAAO,EAAE,CAAC;iBAAE;gBAElC,qBAAM,OAAO,GAAW,IAAI,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC;gBAChD,IAAI,OAAO,GAAG,OAAO,IAAI,OAAO,GAAG,OAAO,EAAE;oBAAE,OAAO,QAAQ,CAAC;iBAAE;gBAChE,OAAO,EAAE,CAAC;aACb;;;;;;;;;;;;;;QAgBS,6BAAU;;;;;;;YAApB;gBACI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBAAE,OAAO;iBAAE;gBAE9B,qBAAM,KAAK,GAAwB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;gBACtD,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAElC,qBAAM,GAAG,GAA6B,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBACpE,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAC7D,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;gBAC1C,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBAEjE,qBAAM,eAAe,GAAW,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;gBAC5D,qBAAM,YAAY,GAAW,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;gBAC9D,qBAAM,IAAI,GAAW,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACtC,qBAAM,WAAW,GAAgB,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACvD,qBAAM,SAAS,GAAW,WAAW,CAAC,KAAK,CAAC;gBAC5C,IAAI,IAAI,IAAI,YAAY,IAAI,YAAY,GAAG,CAAC,EAAE;oBACtC,GAAG,CAAC,SAAS,GAAG,YAAY,CAAC;oBAC7B,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;iBAClC;gBACD,IAAI,eAAe,IAAI,eAAe,KAAK,EAAE,EAAE;oBAC3C,GAAG,CAAC,SAAS,GAAG,eAAe,CAAC;oBAChC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;iBACvE;gBACD,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;gBACtC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAEzB,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;gBACxD,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC;gBAC3B,KAAK,CAAC,aAAa,GAAG,MAAM,CAAC;;;aAGhC;;;;;;;;;;;;;;;;;QAUS,gCAAa;;;;;;;;YAAvB,UAAwB,SAAiB;gBACrC,QAAQ,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;oBACrB,KAAK,MAAM,EAAK,OAAO,CAAC,CAAC;oBACzB,KAAK,OAAO,EAAI,OAAO,CAAC,SAAS,CAAC;iBACrC;gBACD,OAAO,SAAS,GAAG,CAAC,CAAC,CAAC;aACzB;;;;;;;;;;;;;;QAmBS,2BAAQ;;;;;;;YAAlB;gBACI,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;oBACzC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACrD;aACJ;uBA5PL;QA6PC,CAAA;;;;;;ICxPD,qBAAIG,IAAE,GAAW,CAAC,CAAC;;;;;;IAOnB;;;;QAAA;QAAkCH,gCAAQ;;;;;;;;QA2BtC,sBAAY,OAA+B;YAA3C,iBAOC;YANG,OAAO,eAAY,OAAO,gBAAa,EAAE,CAAC;YAC1C,OAAO,gBAAa,OAAO,iBAAc,SAAS,CAAC;YACnD,OAAO,mBAAgB,OAAO,oBAAiB,CAAC,CAAC;YACjD,OAAO,kBAAe,OAAO,mBAAgB,SAAS,CAAC;YACvD,QAAA,kBAAM,OAAO,CAAC,SAAC;YACf,EAAM,KAAI,GAAE,QAAQ,CAAC,aAAa,GAAG,KAAK,CAAC;;SAC9C;8BAzBU,2CAAiB;;;;;;;;;gBACxB,OAAO;oBACH,QAAQ,EAAE,EAAE;oBACZ,UAAU,EAAE,YAAY;oBACxB,SAAS,EAAE,SAAS;oBACpB,YAAY,EAAE,CAAC;oBACf,WAAW,EAAE,SAAS;iBACzB,CAAC;;;;;;;;;;;;;QAgCC,0BAAG;;;;;;;;sBAAC,GAAW;gBAClB,OAAO,EAAM,IAAI,GAAE,GAAG,CAAC,CAAC;;;;;;;;;QASrB,6BAAM;;;;;;;;gBACT,OAAO,EAAM,IAAI,GAAE,MAAM,EAAE,CAAC;;;;;;;;;;;QAWzB,0BAAG;;;;;;;;;sBAAC,GAAW,EAAE,GAAQ;gBAC5B,IAAI,GAAG,KAAK,UAAU,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;oBAC5H,GAAG,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC;iBAClE;gBACD,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,EAAE;oBACvB,EAAM,IAAI,GAAE,GAAG,CAAC,GAAG,GAAG,CAAC;oBACvB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;iBACrB;;;;;;;;;;QAUE,6BAAM;;;;;;;;sBAAC,GAAuB;gBACjC,qBAAM,CAAC,GAAuB,IAAI,CAAC,MAAM,EAAE,CAAC;gBAC5C,IAAI,GAAG,KAAK,CAAC,EAAE;oBAAE,OAAO;iBAAE;gBAC1B,IAAI,CAAC,EAAE;oBACH,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBACzB;gBACD,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBAC3B;;;;;;;;;;QAUE,gCAAS;;;;;;;;sBAAC,OAA+B;gBAC5C,qBAAM,CAAC,GAAkB,IAAI,KAAK,EAAU,CAAC;gBAC7C,KAAK,qBAAM,GAAG,IAAI,OAAO,EAAE;oBACvB,IAAI,GAAG,KAAK,EAAE,EAAE;wBACZ,IAAI,GAAG,KAAK,UAAU,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC;4BAC9D,OAAO,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;4BACrF,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC;yBAC7F;wBACD,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,OAAO,CAAC,GAAG,CAAC,EAAE;4BAChC,EAAM,IAAI,GAAE,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;4BAChC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;yBACf;qBACJ;iBACJ;gBACD,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;oBAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBAAE;;;;;;;;;;;;;;;;;;QAahC,2BAAI;;;;;;;YAAd;gBACI,qBAAM,UAAU,GAAW,IAAI,CAAC,UAAU,EAAE,CAAC;gBAC7C,qBAAM,CAAC,GAAuB,IAAI,CAAC,MAAM,EAAE,CAAC;gBAC5C,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBAAE,OAAO;iBAAE;gBAC9B,IAAI,CAAC,CAAC,EAAE;oBAAE,OAAO;iBAAE;gBACnB,qBAAM,KAAK,GAAwB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;gBACtD,IAAI,UAAU,KAAK,EAAE,EAAE;;oBAEnB,KAAK,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC;oBACjC,OAAO;iBACV;gBAED,qBAAI,MAAM,GAAyB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACtD,qBAAM,MAAM,GAA4B,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBAC7D,IAAI,CAAC,MAAM,EAAE;oBAAE,OAAO;iBAAE;gBACxB,IAAI,CAAC,MAAM,EAAE;oBAAE,MAAM,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBAAE;gBAEzD,qBAAM,GAAG,IAA+C,CAAC,CAAC,kBAAkB,CACxE,MAAM,EACN,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAA,CAAC;gBAC3C,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC;gBACzC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC;gBAC1C,KAAK,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC;aACpC;;;;;;;;;;;;;;;;;;QAUS,4BAAK;;;;;;;;;YAAf;gBACI,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAChD,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,cAAYG,IAAE,EAAI,CAAC;gBACrC,qBAAM,KAAK,GAAwB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;gBACtD,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;gBAE5B,qBAAM,GAAG,GAA6B,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBACpE,GAAG,CAAC,QAAQ,GAAG,OAAO,CAAC;gBACvB,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC;gBAEzB,EAAM,IAAI,GAAE,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC5C;;;;;;;QAWO,6BAAM;;;;;;;;gBACV,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,YAAY,EAAE;oBAC1D,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;iBAC5B,CAAC,CAAC;gBACH,IAAI,CAAC,UAAU,EAAE,CAAC;gBAClB,IAAI,CAAC,IAAI,EAAE,CAAC;;2BA5MpB;MAYkC,QAAQ,EAkMzC,CAAA;;;;;;;;AAQD;QACI,qBAAM,CAAC,GAAG,YAAY,CAAC,SAAS,CAAC;QACjC,YAAY,CAAC,SAAS,qBAAS,IAAI,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,CAAA,CAAC;QAClE,KAAK,qBAAM,CAAC,IAAI,CAAC,EAAE;YAAE,IAAI,EAAM,CAAC,GAAE,CAAC,CAAC,IAAI,IAAI,EAAE;gBAAE,EAAM,YAAY,CAAC,SAAS,GAAE,CAAC,CAAC,GAAG,EAAM,CAAC,GAAE,CAAC,CAAC,CAAC;aAAE;SAAC;QAClG,EAAM,YAAY,CAAC,SAAS,GAAE,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;QACpD,EAAM,YAAY,CAAC,SAAS,GAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;QACtD,EAAM,YAAY,CAAC,SAAS,GAAE,UAAU,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC;KAC7D;;;;;;;;;;;AChND;;;;QAAA;QAAiCH,+BAAO;;;;;;;;;;;QAsHpC,qBACY,UACE,WAA2B,EAC3B,MAA4B;YAH1C,YAKI,iBAAO,SAGV;YAPW,cAAQ,GAAR,QAAQ;YACN,iBAAW,GAAX,WAAW,CAAgB;YAC3B,YAAM,GAAN,MAAM,CAAsB;yBApHP,IAAI;gCACR,KAAK;2BACX,EAAE;6BACA,CAAC,CAAC;6BACF,CAAC,CAAC;+BACC,KAAK;iCACH,KAAK;2BACN,IAAI;6BACF,IAAI;wCACE,KAAK;oCACT,KAAK;8BAIF,IAAI,GAAG,EAAe;YAyGxD,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC;YACzC,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,QAAQ,EAAE,CAAC;;SACxC;8BA7FU,qCAAY;;;;;;;8BAAa,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;0BACjC,GAAW;gBAC/B,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;gBACpB,IAAI,CAAC,WAAW,EAAE,CAAC;;;;;8BASZ,qCAAY;;;;;;;8BAAa,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;0BACjC,GAAW;gBAC/B,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;gBACpB,IAAI,CAAC,WAAW,EAAE,CAAC;;;;;8BASZ,iCAAQ;;;;;;;8BAAuB,OAAO,IAAI,CAAC,SAAS,CAAC;;;;8BAQrD,uCAAc;;;;;;;8BAA6B,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;8BAShE,kCAAS;;;;;;;;8BAAc,OAAO,IAAI,CAAC,UAAU,CAAC;;;;0BACpC,GAAY;gBAC7B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;gBACtB,IAAI,CAAC,WAAW,EAAE,CAAC;;;;;8BAUZ,oCAAW;;;;;;;;8BAAc,OAAO,IAAI,CAAC,YAAY,CAAC;;;;0BACtC,GAAY;gBAC/B,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;gBACxB,IAAI,CAAC,aAAa,EAAE,CAAC;;;;;8BAUd,8BAAK;;;;;;;;8BAAa,OAAO,IAAI,CAAC,MAAM,CAAC;;;;0BAC/B,GAAW;gBACxB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;gBAClB,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,IAAI,CAAC,aAAa,EAAE,CAAC;;;;;;;;;;;;;QAgClB,iCAAW;;;;;;;;sBAAC,SAAiB,EAAE,EAAY;;gBAC9C,qBAAM,eAAe,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;gBAC/H,IAAI,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;oBAC3C,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,UAAC,CAAC;wBACzD,EAAE,CAAC,CAAC,CAAC,CAAC;qBACT,CAAC,CAAC;iBACN;gBACD,IAAI,SAAS,KAAK,WAAW,EAAE;oBAC3B,qBAAI,WAAoC,CAAC;oBACzC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,EAAE,UAAA,CAAC;wBAC1D,WAAS,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAI,CAAC,IAAI,EAAE,WAAW,EAAE,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;qBACpF,CAAC,CAAC;oBACH,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAA,CAAC;wBACzD,IAAI,WAAS,EAAE;4BAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,WAAS,CAAC,CAAC;yBAAE;qBACrE,CAAC,CAAC;iBACN;gBAAC,IAAI,SAAS,KAAK,aAAa,EAAE;oBAC/B,IAAI,CAAC,uBAAuB,qBAAmC,EAAE,CAAA,CAAC;iBACrE;;;;;;;;QAQE,4BAAM;;;;;;;gBACT,IAAI,IAAI,CAAC,MAAM,EAAE;oBAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBAAE;qBACxD;oBACD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBAClD;gBACD,IAAI,IAAI,CAAC,MAAM,EAAE;oBAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;iBAAE;gBAC1C,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;iBAAE;;;;;;;;;QAU3C,kCAAY;;;;;;;;gBAQf,OAAO,KAAK,CAAC;;;;;;;;;QAUV,iCAAW;;;;;;;;gBACd,OAAO,IAAI,CAAC,WAAW,CAAC;;;;;;;;;QAUrB,6BAAO;;;;;;;;gBACV,qBAAM,CAAC,GAAmC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;gBACvE,qBAAM,IAAI,GAAoB,IAAI,KAAK,EAAY,CAAC;gBACpD,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,GAAA,CAAC,CAAC;gBAC5E,OAAO,IAAI,CAAC;;;;;;;;;QAUT,8BAAQ;;;;;;;;gBACX,qBAAM,CAAC,GAA0C,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBAC1E,qBAAM,KAAK,GAA2B,IAAI,KAAK,EAAmB,CAAC;gBACnE,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC;oBACP,qBAAM,IAAI,GAAoB,IAAI,KAAK,EAAY,CAAC;oBACpD,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,GAAA,CAAC,CAAC;oBAC5E,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACpB,CAAC,CAAC;gBACH,OAAO,KAAK,CAAC;;;;;;;;;QAUV,gCAAU;;;;;;;;gBACb,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;;;;;;;;;;QAU/B,kCAAY;;;;;;;;sBAAC,SAAkB;;gBAQlC,OAAO,IAAI,KAAK,CAAC,6EAA6E,CAAC,EAAE;;;;;;;;;;QAU9F,iCAAW;;;;;;;;sBAAC,QAAiB;;gBAChC,qBAAM,SAAS,GAAG,IAAI,CAAC,WAAW,KAAK,QAAQ,CAAC;gBAChD,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;gBAC5B,IAAI,CAAC,SAAS,EAAE;oBACZ,OAAO;iBACV;gBAED,IAAI,IAAI,CAAC,WAAW,EAAE;oBAClB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACrC,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,UAAA,CAAC;wBACrC,CAAC,CAAC,IAAI,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;qBACzB,CAAC,CAAC;iBACN;qBACI;oBACD,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,UAAA,CAAC;wBACrC,CAAC,CAAC,MAAM,CAAC,UAAC,aAAqC;4BAC3C,IAAI,aAAa,KAAK,KAAI,CAAC,QAAQ,IAAI,CAAC,KAAI,CAAC,uBAAuB,EAAE;gCAClE,OAAO;6BACV;4BACD,qBAAM,OAAO,GAA2B,KAAI,CAAC,QAAQ,EAAE,CAAC;4BACxD,qBAAM,YAAY,GAA2B,KAAI,CAAC,aAAa,CAAC;4BAChE,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;;;4BAEvB,KAAI,CAAC,uBAAuB,CAAC;gCACzB,KAAK,EAAE,IAAI;gCACX,OAAO,EAAE,KAAI;gCACb,YAAY,EAAE,YAAY;gCAC1B,OAAO,EAAE,OAAO;6BACnB,CAAC,CAAC;yBACN,CAAC,CAAC;qBACN,CAAC,CAAC;iBACN;;;;;;;;;;;QAWE,gCAAU;;;;;;;;;sBAAC,OAAwB;gBACtC,qBAAM,CAAC,GAAmC,eAAe,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;gBAC3F,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC5B,IAAI,OAAO,CAAC,OAAO,IAAI,IAAI,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,EAAE;oBAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;iBAAE;gBAE/G,IAAI,OAAO,OAAO,CAAC,QAAQ,KAAK,WAAW,EAAE;oBACzC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;iBACtC;;;;;;;;;;QAUE,6BAAO;;;;;;;;sBAAC,IAAqB;gBAChC,qBAAM,CAAC,GAAmC,IAAI,KAAK,EAA2B,CAAC;gBAC/E,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,GAAA,CAAC,CAAC;gBAChF,IAAI,CAAC,aAAa,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC5B,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBAC9B,IAAI,IAAI,CAAC,MAAM,EAAE;oBACb,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;oBACtB,IAAI,CAAC,WAAW,EAAE,CAAC;iBACtB;;;;;;;;;;;QAWE,8BAAQ;;;;;;;;;sBAAC,KAA+C;gBAC3D,IAAI,KAAK,IAAI,IAAI,EAAE;oBAAE,OAAO;iBAAE;gBAC9B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAAE,OAAO;iBAAE;gBACtC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBACpB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,KAAK,EAA2B,CAAC,CAAC;oBAC7D,IAAI,IAAI,CAAC,MAAM,EAAE;wBACb,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;wBACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;qBACtB;oBACD,OAAO;iBACV;gBACD,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;;oBAEzB,qBAAM,GAAC,GAA0C,IAAI,KAAK,EAAkC,CAAC;oBAC7F,EAAyB,KAAK,GAAE,OAAO,CAAC,UAAA,IAAI;wBACxC,qBAAM,EAAE,GAAmC,IAAI,KAAK,EAA2B,CAAC;wBAChF,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,GAAA,CAAC,CAAC;wBACjF,GAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;qBACd,CAAC,CAAC;oBACH,IAAI,CAAC,aAAa,qBAA2B,KAAK,CAAA,CAAC;oBACnD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAC,CAAC,CAAC;oBAC1B,IAAI,IAAI,CAAC,MAAM,EAAE;wBACb,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;wBACtB,IAAI,CAAC,WAAW,EAAE,CAAC;qBACtB;iBACJ;qBACI;;oBAED,IAAI,CAAC,OAAO,mBAAkB,KAAK,EAAC,CAAC;iBACxC;;;;;;;;;;QAUE,gCAAU;;;;;;;;sBAAC,OAAgB;gBAC9B,IAAI,CAAC,QAAQ,CAAC,UAAU,mBAAiC,EAAE,OAAO,EAAE,OAAO,EAAE,EAAC,CAAC;gBAC/E,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,EAAE;oBAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC;iBAAE;;;;;;;QAWxE,iCAAW;;;;;;gBACf,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;oBAAE,OAAO;iBAAE;gBACpE,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,EAAE,EAAE;oBAC9D,qBAAM,CAAC,GAA2B;wBAC9B,IAAI,EAAE,IAAI,CAAC,MAAM;wBACjB,QAAQ,EAAE,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC;qBAC7D,CAAC;oBACF,IAAI,CAAC,gBAAa,IAAI,EAAE;wBAAE,OAAO;qBAAE;oBACnC,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,CAAC,EAAE;wBAAE,CAAC,cAAW,IAAI,CAAC,QAAQ,CAAC;qBAAE;oBACxD,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,CAAC,EAAE;wBAAE,CAAC,cAAW,IAAI,CAAC,QAAQ,CAAC;qBAAE;oBACxD,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;wBACrB,IAAI,CAAC,MAAM,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;wBAClC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACjC;yBACI;wBACD,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;qBAC5B;oBACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;iBACjD;qBACI;oBACD,IAAI,IAAI,CAAC,MAAM,EAAE;wBACb,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;qBACtB;iBACJ;;;;;;;QAOG,mCAAa;;;;;;;gBACjB,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,EAAE,EAAE;oBAChE,qBAAM,CAAC,GAA2B;wBAC9B,IAAI,EAAE,IAAI,CAAC,MAAM;wBACjB,KAAK,EAAE,MAAM;wBACb,MAAM,EAAE,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;wBACvC,eAAe,EAAE,QAAQ;wBACzB,MAAM,EAAE,IAAI;wBACZ,QAAQ,EAAE,EAAE;wBACZ,SAAS,EAAE,SAAS;wBACpB,YAAY,EAAE,CAAC;qBAClB,CAAC;oBACF,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;wBACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;wBACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACnC;yBACI;wBACD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;qBAC9B;oBACD,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;wBAC3B,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CACtD,IAAI,CAAC,QAAQ,EAAE,WAAW,EAAE,UAAC,CAAiC;4BAC1D,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;4BAC1C,IAAI,CAAC,KAAI,CAAC,eAAe,EAAE;gCACvB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;gCACnC,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;6BAC/B;4BACD,KAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CACtD,KAAI,CAAC,IAAI,EAAE,WAAW,EAAE,UAAC,CAAiC;gCACtD,IAAI,KAAI,CAAC,eAAe,IAAI,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,SAAS,KAAK,KAAI,CAAC,QAAQ,EAAE;oCACrE,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;iCAC7C;6BACJ,CAAC,CAAC;yBACV,CAAC,CAAC;wBACP,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CACrD,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAC,CAAiC;4BACzD,IAAI,KAAI,CAAC,eAAe,EAAE;gCACtB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gCAClC,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;6BAChC;4BACD,IAAI,KAAI,CAAC,kBAAkB,EAAE;gCAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAI,CAAC,kBAAkB,CAAC,CAAC;6BAAE;yBACjG,CAAC,CAAC;wBACP,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;qBACnC;iBACJ;gBACD,KAAK,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,MAAM,KAAK,EAAE,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,GAAG;oBACnE,IAAI,IAAI,CAAC,mBAAmB,EAAE;wBAC1B,IAAI,IAAI,CAAC,iBAAiB,EAAE;4BAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;yBAAE;wBAC5F,IAAI,IAAI,CAAC,kBAAkB,EAAE;4BAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;yBAAE;wBAC9F,IAAI,IAAI,CAAC,kBAAkB,EAAE;4BAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;yBAAE;wBAC9F,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;qBACpC;oBACD,IAAI,IAAI,CAAC,QAAQ,EAAE;wBACf,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;qBACxB;iBACJ;;0BAjfT;MAaiC,OAAO,EAuevC;;;;;;;;;;;ACzeD;;;;QAAA;QAAkCA,gCAAQ;;;;;;;;;;;QAyEtC,sBAAoB,SAAkC,EAAY,IAAwB,EAAY,MAA4B;YAAlI,YACI,iBAAO,SACV;YAFmB,eAAS,GAAT,SAAS,CAAyB;YAAY,UAAI,GAAJ,IAAI,CAAoB;YAAY,YAAM,GAAN,MAAM,CAAsB;gCApEnG,IAAI;2BAKV,EAAE;iCACK,KAAK;6BACJ,IAAI;wCACE,KAAK;oCACT,KAAK;8BAIF,IAAI,GAAG,EAAe;;SAyD3D;8BAjDU,kCAAQ;;;;;;;8BAAuB,OAAO,IAAI,CAAC,SAAS,CAAC;;;;8BAQrD,wCAAc;;;;;;;8BAA8B,OAAO,IAAI,CAAC,SAAS,CAAC;;;;8BASlE,qCAAW;;;;;;;;8BAAc,OAAO,IAAI,CAAC,YAAY,CAAC;;;;0BACtC,GAAY;gBAC/B,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;gBACxB,IAAI,CAAC,aAAa,EAAE,CAAC;;;;;8BAUd,+BAAK;;;;;;;;8BAAa,OAAO,IAAI,CAAC,MAAM,CAAC;;;;0BAC/B,GAAW;gBACxB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;gBAClB,IAAI,CAAC,aAAa,EAAE,CAAC;;;;;;;;;;;;;QAyBlB,kCAAW;;;;;;;;sBAAC,SAAiB,EAAE,EAAY;;gBAC9C,qBAAM,eAAe,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,CAAE,CAAC;gBAChI,IAAI,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;oBAC3C,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,EAAE,UAAC,CAAC;wBAC1D,EAAE,CAAC,CAAC,CAAC,CAAC;qBACT,CAAC,CAAC;iBACN;gBACD,IAAI,SAAS,KAAK,WAAW,EAAE;oBAC3B,qBAAI,WAAoC,CAAC;oBACzC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,UAAA,CAAC;wBAC3D,WAAS,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAI,CAAC,IAAI,EAAE,WAAW,EAAE,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;qBACpF,CAAC,CAAC;oBACH,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,EAAE,UAAA,CAAC;wBAC1D,IAAI,WAAS,EAAE;4BAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,WAAS,CAAC,CAAC;yBAAE;qBACrE,CAAC,CAAC;iBACN;;;;;;;;QAQE,6BAAM;;;;;;;gBACT,IAAI,IAAI,CAAC,MAAM,EAAE;oBAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBAAE;qBACxD;oBACD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBAClD;gBACD,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;iBAAE;;;;;;;;;QAU3C,mCAAY;;;;;;;;gBAQf,OAAO,KAAK,CAAC;;;;;;;;;QAUV,kCAAW;;;;;;;;gBACd,OAAO,IAAI,CAAC,WAAW,CAAC;;;;;;;;;QAUrB,8BAAO;;;;;;;;gBACV,qBAAM,CAAC,GAAmC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;gBACxE,qBAAM,IAAI,GAAoB,IAAI,KAAK,EAAY,CAAC;gBACpD,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,GAAA,CAAC,CAAC;gBAC5E,OAAO,IAAI,CAAC;;;;;;;;;QAUT,iCAAU;;;;;;;;gBACb,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;;;;;;;;;;QAUhC,mCAAY;;;;;;;;sBAAC,SAAkB;gBAQlC,OAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,EAAE;;;;;;;;;;QAU9F,kCAAW;;;;;;;;sBAAC,QAAiB;gBAChC,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;;;;;;;;;;;QAWzB,iCAAU;;;;;;;;;sBAAC,OAAyB;gBACvC,qBAAM,CAAC,GAAoC,eAAe,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;gBAC7F,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAI,OAAO,CAAC,IAAI,EAAE;oBACd,IAAI,CAAC,OAAO,mBAAkB,OAAO,CAAC,IAAI,EAAC,CAAC;iBAC/C;;;;;;;;;;QAUE,8BAAO;;;;;;;;sBAAC,IAAqB;gBAChC,qBAAM,CAAC,GAAmC,IAAI,KAAK,EAA2B,CAAC;gBAC/E,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,GAAA,CAAC,CAAC;gBAChF,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;QAU5B,iCAAU;;;;;;;;sBAAC,OAAgB;gBAC9B,IAAI,CAAC,SAAS,CAAC,UAAU,mBAAkC,EAAE,OAAO,EAAE,OAAO,EAAE,EAAC,CAAC;;;;;;;QAW7E,oCAAa;;;;;;;gBACjB,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,EAAE,EAAE;oBAChE,qBAAM,CAAC,GAA2B;wBAC9B,IAAI,EAAE,IAAI,CAAC,MAAM;wBACjB,KAAK,EAAE,MAAM;wBACb,MAAM,EAAE,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;wBACvC,eAAe,EAAE,QAAQ;wBACzB,MAAM,EAAE,IAAI;wBACZ,QAAQ,EAAE,EAAE;wBACZ,SAAS,EAAE,SAAS;wBACpB,YAAY,EAAE,CAAC;qBAClB,CAAC;oBACF,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;wBACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;wBACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACnC;yBACI;wBACD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;qBAC9B;oBACD,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;wBAC3B,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAClD,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,UAAC,CAAiC;4BACnE,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;4BAC1C,IAAI,CAAC,KAAI,CAAC,eAAe,EAAE;gCACvB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;gCACnC,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;6BAC/B;yBACJ,CAAC,CAAC;wBACH,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAC9C,IAAI,CAAC,IAAI,EAAE,WAAW,EAAE,UAAC,CAAiC;4BAClE,IAAI,KAAI,CAAC,eAAe,IAAI,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,SAAS,KAAK,KAAI,CAAC,SAAS,EAAE;gCACtE,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;6BAC7C;yBACJ,CAAC,CAAC;wBACH,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAC7C,IAAI,CAAC,SAAS,EAAE,UAAU,EAAE,UAAC,CAAiC;4BACtE,IAAI,KAAI,CAAC,eAAe,EAAE;gCACtB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gCAClC,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;6BAChC;yBACJ,CAAC,CAAC;wBACH,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;qBACnC;iBACJ;gBACD,KAAK,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,MAAM,KAAK,EAAE,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,GAAG;oBACnE,IAAI,IAAI,CAAC,mBAAmB,EAAE;wBAC1B,IAAI,IAAI,CAAC,iBAAiB,EAAE;4BAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAE;yBAAE;wBAC7F,IAAI,IAAI,CAAC,kBAAkB,EAAE;4BAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;yBAAE;wBAC9F,IAAI,IAAI,CAAC,kBAAkB,EAAE;4BAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;yBAAE;wBAC9F,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;qBACpC;oBACD,IAAI,IAAI,CAAC,QAAQ,EAAE;wBACf,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;qBACxB;iBACJ;;2BAxTT;MAWkC,QAAQ,EA+SzC;;;;;;;;;;ACpTD,yBAAa,mBAAmB,GAAoB;QAChD,KAAK,EAAe,OAAO;QAC3B,QAAQ,EAAY,UAAU;QAC9B,UAAU,EAAU,YAAY;QAChC,MAAM,EAAc,QAAQ;QAC5B,aAAa,EAAO,eAAe;QACnC,aAAa,EAAO,eAAe;QACnC,WAAW,EAAS,eAAe;QACnC,SAAS,EAAW,WAAW;QAC/B,QAAQ,EAAY,UAAU;QAC9B,SAAS,EAAW,WAAW;QAC/B,eAAe,EAAK,gBAAgB;KACvC;;;;;;;;;;;ACPD;;;;QAAA;QAAuCA,qCAAa;;;;;;;QAgBhD,2BAAY,YAAiD;mBACzD,kBAAM,YAAY,CAAC;SACtB;;;;;;;;;QAcM,mDAAuB;;;;;;;;sBAAC,CAAiC;gBAC5D,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;;;;;;;;;QASvE,kCAAM;;;;;;;;gBACT,OAAO,EAAM,IAAI,GAAE,MAAM,EAAE,CAAC;;;;;;;;;;;QAYzB,6CAAiB;;;;;;;;;;gBACpB,qBAAM,CAAC,GAA2B;oBAC9B,KAAK,EAAE,MAAM;oBACb,MAAM,EAAE,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;oBACvC,eAAe,EAAE,QAAQ;oBACzB,MAAM,EAAE,IAAI;oBACZ,QAAQ,EAAE,EAAE;oBACZ,SAAS,EAAE,SAAS;oBACpB,YAAY,EAAE,CAAC;iBAClB,CAAC;gBACF,qBAAM,KAAK,GAAa,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;gBAC5C,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;gBAC5B,OAAO,KAAK,CAAC;;;;;;;;;QASV,kCAAM;;;;;;;;;gBACT,qBAAM,GAAG,GAAuB,EAAM,IAAI,GAAE,MAAM,EAAE,CAAC;;gBAGrD,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC;gBAChC,IAAI,CAAC,YAAY,qBAAa,GAAG,CAAC,SAAS,EAAE,CAAA,CAAC;;gBAG9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;gBAGlB,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,YAAY,EAAE,UAAC,CAAC;oBAC1E,IAAI,GAAG,CAAC,YAAY,EAAE,KAAK,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE;;;wBAE5D,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;qBACvC;yBACI;;wBAED,qBAAM,WAAW,GAAW,GAAG,CAAC,OAAO,EAAE,CAAC;wBAC1C,qBAAM,aAAa,GAA4B,GAAG,CAAC,SAAS,EAAE,CAAC;;wBAG/D,qBAAM,KAAK,GAAW,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,GAAG,KAAI,CAAC,UAAU,CAAC,CAAC;;wBAGjE,qBAAM,QAAQ,GAAW,GAAG,CAAC,QAAQ,EAAE,GAAG,KAAK,CAAC;wBAChD,qBAAM,SAAS,GAAW,GAAG,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC;;wBAGlD,qBAAM,WAAW,IAA6D,GAAG,CAAC,kBAAkB,CAAC;4BAC7F,eAAe,CAAC,iBAAiB,CAAC,KAAI,CAAC,YAAY,CAAC;4BACpD,aAAa;yBAChB,EAAE,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAA,CAAC;wBAC9C,qBAAM,aAAa,GAAW,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAClE,qBAAM,aAAa,GAAW,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAClE,qBAAM,CAAC,GAAW,CAAC,EAAE,QAAQ,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,aAAa,CAAC;wBACrE,qBAAM,CAAC,GAAW,CAAC,EAAE,SAAS,GAAG,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,IAAI,aAAa,CAAC;;;wBAGvE,KAAI,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;qBAClD;iBACJ,CAAC,CAAC;;gBAGH,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,eAAe,EAAE,UAAC,CAAC;oBAChF,KAAI,CAAC,YAAY,EAAE,CAAC;iBACvB,CAAC,CAAC;;gBAGH,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,WAAW,EAAE,UAAC,CAAC;oBACxE,KAAI,CAAC,YAAY,EAAE,CAAC;iBACvB,CAAC,CAAC;;gBAGH,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;;;;;;;;;;QAUvB,kCAAM;;;;;;;;sBAAC,GAAuB;gBACjC,qBAAM,CAAC,GAAuB,IAAI,CAAC,MAAM,EAAE,CAAC;gBAC5C,IAAI,GAAG,KAAK,CAAC,EAAE;oBAAE,OAAO;iBAAE;gBAC1B,IAAI,CAAC,EAAE;oBACH,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBACzB;gBACD,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBAC3B;;;;;;;;;;;;;;;;;QAYK,4CAAgB;;;;;;;YAA1B,UAA2B,EAAqB;gBAC5C,EAAM,IAAI,GAAE,cAAc,CAAC,EAAE,CAAC,CAAC;aAClC;;;;;;;;;;;;;;QAQS,+CAAmB;;;;;;;YAA7B;;gBAEI,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAC3D,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBAC9D,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aAC7D;;;;;;;;;;;;;;QAQS,kCAAM;;;;;;;YAAhB;gBACI,qBAAM,GAAG,GAAuB,EAAM,IAAI,GAAE,MAAM,EAAE,CAAC;;gBAGrD,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;gBACpC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG,CAAC,SAAS,EAAE,CAAC;aACzC;;;;;;;;;;;;;;QAQS,wCAAY;;;;;;;YAAtB;gBACI,qBAAM,GAAG,GAAuB,EAAM,IAAI,GAAE,MAAM,EAAE,CAAC;;gBAGrD,IAAI,GAAG,CAAC,YAAY,EAAE,KAAK,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE;oBAC5D,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;;oBAGhC,IAAI,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC;;oBAG3D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;oBAGlB,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC;oBAChC,IAAI,CAAC,YAAY,qBAAa,GAAG,CAAC,SAAS,EAAE,CAAA,CAAC;iBACjD;aACJ;gCAjOL;MAWuC,aAAa,EAuNnD,CAAA;;;;;;;;AAQD;QACI,qBAAM,CAAC,GAAG,iBAAiB,CAAC,SAAS,CAAC;QACtC,iBAAiB,CAAC,SAAS,qBAAS,IAAI,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,CAAA,CAAC;QACvE,KAAK,qBAAM,CAAC,IAAI,CAAC,EAAE;YAAE,IAAI,EAAM,CAAC,GAAE,CAAC,CAAC,IAAI,IAAI,EAAE;gBAAE,EAAM,iBAAiB,CAAC,SAAS,GAAE,CAAC,CAAC,GAAG,EAAM,CAAC,GAAE,CAAC,CAAC,CAAC;aAAE;SAAC;QACvG,EAAM,iBAAiB,CAAC,SAAS,GAAE,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;QACzD,EAAM,iBAAiB,CAAC,SAAS,GAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC3D,EAAM,iBAAiB,CAAC,SAAS,GAAE,UAAU,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC;KAClE;;;;;;ACjPD;;;;;;;;;;;;;;;;;;;;ACOA;;;;;;;;;;;;;;;;;QAsKkB,iCAAe;;;;;;;;sBAAC,MAAY;gBACtC,qBAAM,CAAC,GAAuC;oBAC1C,IAAI,EAAE,MAAM,CAAC,YAAY;oBACzB,KAAK,EAAE,MAAM,CAAC,WAAW;oBACzB,KAAK,EAAE,MAAM,CAAC,WAAW;oBACzB,IAAI,EAAE,MAAM,CAAC,YAAY;iBAC5B,CAAC;gBACF,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,4CAA0B;;;;;;;;sBAAC,OAA2B;gBAChE,qBAAM,CAAC,GAA2C,EAAE,CAAC;gBACrD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;qBACf,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,iBAAiB,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAA,CAAC;qBAC7E,OAAO,CAAC,UAAC,CAAC;oBACP,IAAI,CAAC,KAAK,aAAa,EAAE;wBACrB,CAAC,CAAC,OAAO,GAAG,EAAM,OAAO,GAAE,CAAC,CAAC,CAAC;qBACjC;yBAAM;wBACH,CAAC,CAAC,CAAC,CAAC,GAAG,EAAM,OAAO,GAAE,CAAC,CAAC,CAAC;qBAC5B;iBACJ,CAAC,CAAC;gBACP,IAAI,CAAC,CAAC,OAAO,IAAI,IAAI,IAAI,CAAC,CAAC,OAAO,KAAK,EAAE,EAAE;oBACvC,IAAI,OAAO,CAAC,KAAK,KAAK,EAAE,IAAI,OAAO,CAAC,WAAW,KAAK,EAAE,EAAE;wBACpD,CAAC,CAAC,OAAO,GAAM,OAAO,CAAC,KAAK,UAAK,OAAO,CAAC,WAAa,CAAC;qBAC1D;yBACI,IAAI,OAAO,CAAC,WAAW,KAAK,EAAE,EAAE;wBAAE,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC;qBAAE;yBACpE;wBAAE,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;qBAAE;iBACtC;gBACD,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,mCAAiB;;;;;;;;sBAAC,OAAiB;gBAC7C,qBAAM,CAAC,GAAiC,EAAE,GAAG,EAAE,OAAO,CAAC,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC;gBAC1F,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,iCAAe;;;;;;;;sBAAC,MAAoC;gBAC9D,qBAAM,CAAC,GAAa,EAAE,QAAQ,EAAE,MAAM,CAAC,GAAG,EAAE,SAAS,EAAE,MAAM,CAAC,GAAG,EAAE,CAAC;gBACpE,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,yCAAuB;;;;;;;;sBAAC,OAAiB;gBACnD,qBAAM,CAAC,GAA0B,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;gBAC7F,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,uCAAqB;;;;;;;;sBAAC,MAA6B;gBAC7D,qBAAM,CAAC,GAAa,EAAE,QAAQ,EAAE,MAAM,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC;gBACxE,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,8CAA4B;;;;;;;;sBAAC,YAA6B;;gBAEpE,qBAAM,CAAC,GAAiC,IAAI,KAAK,EAAyB,CAAC;gBAC3E,KAAK,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC1C,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBACtE;gBACD,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,oCAAkB;;;;;;;;sBAAC,SAAoB;gBACjD,QAAQ,SAAS;oBACb,KAAK,SAAS,CAAC,IAAI,EAAE,OAAOI,WAAwB,CAACA,WAAwB,CAAC,OAAO,CAAC,CAAC;oBACvF,KAAK,SAAS,CAAC,SAAS,EAAE,OAAOA,WAAwB,CAACA,WAAwB,CAAC,OAAO,CAAC,CAAC;oBAC5F,KAAK,SAAS,CAAC,MAAM,EAAE,OAAOA,WAAwB,CAACA,WAAwB,CAAC,MAAM,CAAC,CAAC;oBACxF,KAAK,SAAS,CAAC,cAAc,EAAE,OAAOA,WAAwB,CAACA,WAAwB,CAAC,OAAO,CAAC,CAAC;oBACjG,SAAS,OAAOA,WAAwB,CAACA,WAAwB,CAAC,SAAS,CAAC,CAAC;iBAChF;;;;;;;;;;QAWS,wCAAsB;;;;;;;;sBAAC,OAAuB;gBACxD,qBAAM,CAAC,GAAuC,EAAE,CAAC;gBACjD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;qBACf,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,iBAAiB,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAA,CAAC;qBACzE,OAAO,CAAC,UAAC,CAAC;oBACP,IAAI,CAAC,KAAK,UAAU,EAAE;wBAClB,qBAAM,MAAM,GAAG,iBAAiB,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;wBACrE,CAAC,CAAC,QAAQ,GAAG,MAAM,CAAC;qBACvB;yBACI;wBACD,CAAC,CAAC,CAAC,CAAC,GAAG,EAAM,OAAO,GAAE,CAAC,CAAC,CAAC;qBAC5B;iBACJ,CAAC,CAAC;gBACP,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,kCAAgB;;;;;;;;sBAAC,OAAoB;gBAC/C,qBAAM,CAAC,GAA8B,EAAE,CAAC;gBACxC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;qBACf,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,iBAAiB,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAA,CAAC;qBACtE,OAAO,CAAC,UAAC,CAAC;oBACP,IAAI,CAAC,KAAK,QAAQ,EAAE;wBAChB,CAAC,CAAC,MAAM,GAAG,iBAAiB,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;qBAClE;yBACI,IAAI,CAAC,KAAK,WAAW,EAAE;wBACxB,CAAC,CAAC,SAAS,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;qBACzE;yBACI,IAAI,CAAC,KAAK,gBAAgB,EAAE;wBAC7B,CAAC,CAAC,eAAe,GAAG,MAAM,CAAC;wBAC3B,CAAC,CAAC,WAAW,GAAI,KAAK,CAAC;qBAC1B;yBACI,IAAI,CAAC,KAAK,qBAAqB,EAAE;wBAClC,CAAC,CAAC,cAAc,GAAG,KAAK,CAAC;qBAC5B;yBACI;wBACD,EAAM,CAAC,GAAE,CAAC,CAAC,GAAG,EAAM,OAAO,GAAE,CAAC,CAAC,CAAC;qBACnC;iBACJ,CAAC,CAAC;gBACP,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,gCAAc;;;;;;;;sBAAC,KAA+C;gBACxE,qBAAM,CAAC,GAAwC,IAAI,KAAK,EAAgC,CAAC;gBACzF,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC9D,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,EAAyB,CAAC,CAAC;iBAC9C;qBACI,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;;;oBAG9B,qBAAM,EAAE,IAA2B,KAAK,CAAA,CAAC;oBACzC,KAAK,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAChC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,4BAA4B,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBACjE;iBACJ;qBACI;;oBAED,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,4BAA4B,mBAAkB,KAAK,EAAC,CAAC,CAAC;iBAClF;gBACD,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,yCAAuB;;;;;;;;sBAAC,OAAwB;gBAC1D,qBAAM,CAAC,GAAwC,EAAE,CAAC;gBAClD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;qBACf,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,iBAAiB,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAA,CAAC;qBAC1E,OAAO,CAAC,UAAC,CAAC;oBACP,IAAI,CAAC,KAAK,OAAO,EAAE;wBACf,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;4BAAE,OAAO;yBAAE;wBAC9C,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;4BAC5B,CAAC,CAAC,KAAK,GAAG,IAAI,KAAK,EAAyB,CAAC;yBAChD;6BACI,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;4BACtC,CAAC,CAAC,KAAK,GAAG,IAAI,KAAK,EAAuC,CAAC;;4BAE3D,qBAAM,EAAE,IAA2B,OAAO,CAAC,KAAK,CAAA,CAAC;4BACjD,KAAK,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gCAChC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,EAAgC,CAAC;gCACvD,KAAK,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oCACnC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAC,CAAC;iCACrE;6BACJ;yBACJ;6BACI;4BACD,CAAC,CAAC,KAAK,GAAG,IAAI,KAAK,EAAgC,CAAC;;4BAEpD,qBAAM,EAAE,IAAoB,OAAO,CAAC,KAAK,CAAA,CAAC;4BAC1C,KAAK,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gCAChC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,EAAC,CAAC;6BAC5D;yBACJ;qBACJ;yBACI;wBACD,CAAC,CAAC,CAAC,CAAC,GAAG,EAAM,OAAO,GAAE,CAAC,CAAC,CAAC;qBAC5B;iBACJ,CAAC,CAAC;gBACP,OAAO,CAAC,CAAC;;;;;;;;;;QAWC,0CAAwB;;;;;;;;sBAAC,OAAyB;gBAC5D,qBAAM,CAAC,GAAyC,EAAE,CAAC;gBACnD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;qBACf,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,iBAAiB,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAA,CAAC;qBAC3E,OAAO,CAAC,UAAC,CAAC;oBACP,CAAC,CAAC,CAAC,CAAC,GAAG,EAAM,OAAO,GAAE,CAAC,CAAC,CAAC;iBAC5B,CAAC,CAAC;gBACP,OAAO,CAAC,CAAC;;;;;;;kDA9ZoC;YAC7C,iBAAiB;YACjB,QAAQ;YACR,gBAAgB;YAChB,kBAAkB;YAClB,wBAAwB;YACxB,WAAW;YACX,iBAAiB;YACjB,gBAAgB;YAChB,gBAAgB;YAChB,mBAAmB;YACnB,0BAA0B;YAC1B,iBAAiB;YACjB,SAAS;YACT,mBAAmB;YACnB,gBAAgB;YAChB,uBAAuB;YACvB,WAAW;YACX,SAAS;YACT,SAAS;YACT,SAAS;YACT,YAAY;YACZ,mBAAmB;YACnB,eAAe;YACf,sBAAsB;YACtB,cAAc;YACd,qBAAqB;YACrB,aAAa;YACb,qBAAqB;YACrB,YAAY;YACZ,mBAAmB;YACnB,0BAA0B;YAC1B,QAAQ;YACR,MAAM;YACN,MAAM;YACN,aAAa;YACb,oBAAoB;SACvB;;;;;;yDAOuD;YACpD,SAAS;YACT,aAAa;YACb,aAAa;YACb,IAAI;YACJ,UAAU;YACV,aAAa;YACb,iBAAiB;YACjB,aAAa;YACb,SAAS;YACT,OAAO;YACP,mBAAmB;YACnB,UAAU;YACV,SAAS;YACT,OAAO;YACP,QAAQ;SACX;;;;;;qDAOmD;YAChD,QAAQ;YACR,UAAU;YACV,OAAO;YACP,MAAM;YACN,OAAO;YACP,WAAW;YACX,MAAM;YACN,OAAO;YACP,QAAQ;YACR,UAAU;YACV,UAAU;YACV,SAAS;SACZ;;;;;;sDAOoD;YACjD,UAAU;YACV,sBAAsB;YACtB,mBAAmB;YACnB,UAAU;YACV,aAAa;YACb,eAAe;YACf,SAAS;YACT,QAAQ;SACX;;;;;;sDAOoD;YACjD,WAAW;YACX,WAAW;YACX,UAAU;YACV,WAAW;YACX,aAAa;YACb,UAAU;YACV,OAAO;YACP,aAAa;YACb,eAAe;YACf,cAAc;YACd,SAAS;YACT,QAAQ;SACX;;;;;;uDAOqD;YAClD,WAAW;YACX,WAAW;YACX,UAAU;YACV,UAAU;YACV,aAAa;YACb,eAAe;YACf,cAAc;YACd,SAAS;YACT,QAAQ;SACX;gCAnKL;;;;;;;ACEA;;;;;AAYA;;;;QAAA;;;;;;;;;;QAmCI,0BAAoB,WAAsC,EAAU,WAA6B;YAA7E,gBAAW,GAAX,WAAW,CAA2B;YAAU,gBAAW,GAAX,WAAW,CAAkB;SAAK;8BAzB3F,oCAAM;;;;;;;;gBACb,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI,EAAE;oBAAE,OAAO,IAAI,CAAC;iBAAE;gBAC3C,OAAO,KAAK,CAAC;;;;;8BASN,4CAAc;;;;;;;;gBACrB,OAAO,IAAI,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;QA4BrB,sCAAW;;;;;;;;;;sBAAC,SAAiB,EAAE,EAAY;;gBAC9C,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,EAAE,UAAC,CAAM;oBAC3C,IAAI,SAAS,KAAK,YAAY,EAAE;wBAAE,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;qBAAE;oBACzD,EAAE,CAAC,CAAC,CAAC,CAAC;iBACT,CAAC,CAAC;;;;;;;;;;QAUA,gCAAK;;;;;;;;;gBACR,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;;;;;;;;;;QAWtB,sCAAW;;;;;;;;;gBACd,OAAO,iBAAiB,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC;;;;;;;;;;QAW5E,+BAAI;;;;;;;;sBAAC,MAAY;;gBACpB,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,UAAA,CAAC;oBAC9B,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;oBACpB,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;iBACpC,CAAC,CAAC;;;;;;;;;;;QAWA,qCAAU;;;;;;;;;sBAAC,OAA2B;gBACzC,qBAAM,CAAC,GAAqC,iBAAiB,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;gBAClG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;QAW5B,sCAAW;;;;;;;;;sBAAC,QAAkB;gBACjC,qBAAM,CAAC,GAAiC,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;gBACtF,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;;+BArIxC;QAuIC;;;;;;ACvID;;;;;AAWA;;;;QAAA;;;;;;;;;;QAuEI,sBAAoB,OAA8B;YAA9B,YAAO,GAAP,OAAO,CAAuB;6BAlEZ,IAAI,GAAG,EAAe;4BACzC,KAAK;2BACN,IAAI;SAgEiC;8BArD5C,iCAAO;;;;;;8BAAc,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;0BAClC,GAAY,IAAI,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;;;;8BAO5C,gCAAM;;;;;;8BAAc,OAAO,IAAI,CAAC,OAAO,CAAC;;;;0BACjC,GAAY,IAAI,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;;;;8BAQ1C,kCAAQ;;;;;;;8BAAuB,OAAO,IAAI,CAAC,SAAS,CAAC;;;;8BASrD,wCAAc;;;;;;;;8BAA4B,OAAO,IAAI,CAAC,OAAO,CAAC;;;;8BAS9D,kCAAQ;;;;;;;;;gBACf,qBAAM,CAAC,GAA0B,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;gBAC5D,OAAO;oBACH,QAAQ,EAAE,CAAC,CAAC,GAAG,EAAE;oBACjB,SAAS,EAAE,CAAC,CAAC,GAAG,EAAE;iBACrB,CAAC;;;;;;;;;;;;;;QA2BC,kCAAW;;;;;;;;;sBAAC,SAAiB,EAAE,EAAY;gBAC9C,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;;;;;;;;;QASrC,mCAAY;;;;;;;;gBACf,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;;;;;;;QAQvB,+BAAQ;;;;;;;gBACX,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC;;;;;;;;;QAUjC,iCAAU;;;;;;;;gBACb,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;;;;;;;;;;QAU9B,gCAAS;;;;;;;;sBAAC,MAAW;;;;;;;;;;;;;;QAcrB,mCAAY;;;;;;;;sBAAC,SAAkB;gBAClC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;;;;;;;;;;QAUlC,8BAAO;;;;;;;;sBAAC,IAAY;gBACvB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;;;;;;;;;QAUxB,+BAAQ;;;;;;;;sBAAC,KAAa;gBACzB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;QAU1B,kCAAW;;;;;;;;sBAAC,MAAgB;gBAC/B,qBAAM,CAAC,GAA0B,iBAAiB,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;gBACnF,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;QAUzB,+BAAQ;;;;;;;;sBAAC,KAAa;gBACzB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;;QAW1B,iCAAU;;;;;;;;;sBAAC,OAAuB;gBACrC,qBAAM,CAAC,GAAiC,iBAAiB,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;gBAC1F,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;QAUxB,iCAAU;;;;;;;;sBAAC,OAAgB;gBAC9B,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;;2BA7NzC;QAgOC;;;;;;;;;;;ICtND;;;;QAAA;QAAoCJ,kCAAQ;;;;;;;;QA2BxC,wBAAY,OAA+B;YAA3C,iBAMC;YALG,OAAO,eAAY,OAAO,gBAAa,EAAE,CAAC;YAC1C,OAAO,gBAAa,OAAO,iBAAc,SAAS,CAAC;YACnD,OAAO,mBAAgB,OAAO,oBAAiB,CAAC,CAAC;YACjD,OAAO,kBAAe,OAAO,mBAAgB,SAAS,CAAC;YACvD,QAAA,kBAAM,OAAO,CAAC,SAAC;;SAClB;8BAxBU,6CAAiB;;;;;;;;;gBACxB,OAAO;oBACH,QAAQ,EAAE,EAAE;oBACZ,UAAU,EAAE,YAAY;oBACxB,SAAS,EAAE,SAAS;oBACpB,YAAY,EAAE,CAAC;oBACf,WAAW,EAAE,SAAS;iBACzB,CAAC;;;;;;;;;;;;;QA+BC,4BAAG;;;;;;;;sBAAC,GAAW;gBAClB,OAAO,EAAM,IAAI,GAAE,GAAG,CAAC,GAAG,CAAC,CAAC;;;;;;;;;QASzB,+BAAM;;;;;;;;gBACT,OAAO,EAAM,IAAI,GAAE,MAAM,EAAE,CAAC;;;;;;;;;;;QAWzB,4BAAG;;;;;;;;;sBAAC,GAAW,EAAE,GAAQ;gBAC5B,IAAI,GAAG,KAAK,UAAU,IAAI,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;oBACzF,GAAG,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC;iBAC7D;gBACD,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,EAAE;oBACvB,EAAM,IAAI,GAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iBAC7B;;;;;;;;;;QAUE,+BAAM;;;;;;;;sBAAC,GAA6B;gBACvC,EAAM,IAAI,GAAE,MAAM,CAAC,GAAG,CAAC,CAAC;;;;;;;;;;QAUrB,kCAAS;;;;;;;;sBAAC,OAA+B;gBAC5C,KAAK,qBAAM,GAAG,IAAI,OAAO,EAAE;oBACvB,IAAI,GAAG,KAAK,EAAE,EAAE;wBACZ,IAAI,GAAG,KAAK,UAAU,IAAK,OAAO,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,IAAK,OAAO,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;4BAC7G,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAE,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAG,OAAO,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC;yBAC1F;wBACD,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,OAAO,CAAC,GAAG,CAAC,EAAE;4BAAE,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;yBAAE;qBAC/D;iBACJ;gBACD,EAAM,IAAI,GAAE,SAAS,CAAC,OAAO,CAAC,CAAC;;;;;;;;;;;;;;;;;;QAazB,6BAAI;;;;;;;YAAd;gBACI,qBAAM,UAAU,GAAG,EAAM,IAAI,GAAE,aAAa,EAAE,CAAC;gBAC/C,qBAAM,UAAU,GAAW,IAAI,CAAC,UAAU,EAAE,CAAC;gBAC7C,IAAI,CAAC,UAAU,EAAE;;oBAEb,OAAO;iBACV;gBACD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;;oBAEf,OAAO;iBACV;gBACD,qBAAM,KAAK,GAAwB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;gBACtD,IAAI,UAAU,KAAK,EAAE,EAAE;;oBAEnB,KAAK,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC;oBACjC,OAAO;iBACV;gBAED,qBAAI,MAAM,GAAyB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACtD,qBAAI,MAAM,GAAuD,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBACtF,IAAI,CAAC,MAAM,EAAE;oBAAE,OAAO;iBAAE;gBACxB,IAAI,EAAE,MAAM,YAAY,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;oBAAE,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;iBAAE;gBACzG,IAAI,CAAC,MAAM,EAAE;oBAAE,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBAAE;gBAEtD,qBAAM,GAAG,GAAG,UAAU,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;gBACpD,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC;gBACzC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC;gBAC1C,KAAK,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC;aACpC;;;;;;;;;;;;;;;;;;QAUS,8BAAK;;;;;;;;;YAAf;gBACI,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAChD,qBAAM,KAAK,GAAwB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;gBACtD,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;gBAE5B,qBAAM,GAAG,GAA6B,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBACpE,GAAG,CAAC,QAAQ,GAAG,OAAO,CAAC;gBACvB,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC;gBAEzB,IAAI,CAAC,UAAU,EAAE,CAAC;gBAClB,qBAAM,KAAK,GAAG,EAAM,IAAI,GAAE,QAAQ,EAAE,CAAC;gBACrC,IAAI,KAAK,EAAE;oBACP,KAAK,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;;;;;iBAMhD;aACJ;6BAzLL;MAUoC,QAAQ,EAgL3C,CAAA;;;;;;;;AAQD;QACI,qBAAM,CAAC,GAAG,cAAc,CAAC,SAAS,CAAC;QACnC,cAAc,CAAC,SAAS,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QACvD,KAAK,qBAAM,CAAC,IAAI,CAAC,EAAE;YAAE,IAAI,EAAM,CAAC,GAAE,CAAC,CAAC,IAAI,IAAI,EAAE;gBAAE,EAAM,cAAc,CAAC,SAAS,GAAE,CAAC,CAAC,GAAG,EAAM,CAAC,GAAE,CAAC,CAAC,CAAC;aAAE;SAAC;QACpG,EAAM,cAAc,CAAC,SAAS,GAAE,SAAS,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC;QAC1D,EAAM,cAAc,CAAC,SAAS,GAAE,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;QACtD,EAAM,cAAc,CAAC,SAAS,GAAE,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC;QACpD,EAAM,cAAc,CAAC,SAAS,GAAE,UAAU,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC;KAC/D;;;;;;;;;;;AC3LD;;;;QAAA;QAAmCA,iCAAO;;;;;;;;;;QAgHtC,uBAAoB,QAAgC;YAApD,YACI,iBAAO,SAEV;YAHmB,cAAQ,GAAR,QAAQ,CAAwB;2BA9G3B,EAAE;+BACG,KAAK;iCACH,KAAK;6BACV,CAAC,CAAC;6BACF,CAAC,CAAC;2BACI,IAAI;6BACF,IAAI;oCACJ,KAAK;wCACD,KAAK;uCAEmB,IAAI;sCACL,IAAI;uCACH,IAAI;8BAC7B,IAAI,GAAG,EAAe;4CACM,IAAI;YAkGlE,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,QAAQ,EAAE,CAAC;;SACxC;8BAvFU,uCAAY;;;;;;;8BAAa,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;0BACjC,GAAW;gBAC/B,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;gBACpB,IAAI,CAAC,WAAW,EAAE,CAAC;;;;;8BASZ,uCAAY;;;;;;;8BAAa,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;0BACjC,GAAW;gBAC/B,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;gBACpB,IAAI,CAAC,WAAW,EAAE,CAAC;;;;;8BASZ,mCAAQ;;;;;;;8BAAuB,OAAO,IAAI,CAAC,SAAS,CAAC;;;;8BAQrD,yCAAc;;;;;;;8BAA6B,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;8BAShE,oCAAS;;;;;;;;8BAAc,OAAO,IAAI,CAAC,UAAU,CAAC;;;;0BACpC,GAAY;gBAC7B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;gBACtB,IAAI,CAAC,WAAW,EAAE,CAAC;;;;;8BAUZ,sCAAW;;;;;;;;8BAAc,OAAO,IAAI,CAAC,YAAY,CAAC;;;;0BACtC,GAAY;gBAC/B,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;gBACxB,IAAI,CAAC,aAAa,EAAE,CAAC;;;;;8BAUd,gCAAK;;;;;;;;8BAAa,OAAO,IAAI,CAAC,MAAM,CAAC;;;;0BAC/B,GAAW;gBACxB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;gBAClB,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,IAAI,CAAC,aAAa,EAAE,CAAC;;;;;;;;;;;;;QA0BlB,mCAAW;;;;;;;;sBAAC,SAAiB,EAAE,EAAY;gBAC9C,qBAAM,eAAe,GAAG;oBACpB,OAAO;oBACP,UAAU;oBACV,MAAM,EAAE,SAAS;oBACjB,WAAW;oBACX,WAAW;oBACX,WAAW;oBACX,UAAU;oBACV,WAAW;oBACX,SAAS;oBACT,YAAY;iBACf,CAAC;gBACF,IAAI,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;oBAC3C,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;iBAC5C;gBACD,IAAI,SAAS,KAAK,aAAa,EAAE;oBAC7B,IAAI,CAAC,uBAAuB,qBAAmC,EAAE,CAAA,CAAC;iBACrE;;;;;;;;QAQE,8BAAM;;;;;;;gBACT,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC3B,IAAI,IAAI,CAAC,MAAM,EAAE;oBAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;iBAAE;gBAC1C,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;iBAAE;;;;;;;;;QAU3C,oCAAY;;;;;;;;gBACf,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;;;;;;;;;QAUjC,mCAAW;;;;;;;;gBACd,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;;;;;;;;;QAUhC,+BAAO;;;;;;;;gBACV,qBAAM,CAAC,GAAiC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;gBAChE,qBAAM,IAAI,GAAoB,IAAI,KAAK,EAAY,CAAC;gBACpD,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAA,CAAC,CAAC;gBACrE,OAAO,IAAI,CAAC;;;;;;;;;QAUT,gCAAQ;;;;;;;;gBACX,qBAAM,CAAC,GAAwC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBACxE,qBAAM,KAAK,GAA2B,IAAI,KAAK,EAAmB,CAAC;gBACnE,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC;oBACP,qBAAM,IAAI,GAAoB,IAAI,KAAK,EAAY,CAAC;oBACpD,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAA,CAAC,CAAC;oBACrE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACpB,CAAC,CAAC;gBACH,OAAO,KAAK,CAAC;;;;;;;;;QAUV,kCAAU;;;;;;;;gBACb,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;;;;;;;;;;QAU/B,oCAAY;;;;;;;;sBAAC,SAAkB;gBAClC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;;;;;;;;;;QAUnC,mCAAW;;;;;;;;sBAAC,QAAiB;gBAChC,qBAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;gBAC7C,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;gBACpC,IAAI,QAAQ,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,uBAAuB,EAAE;oBACvD,IAAI,CAAC,uBAAuB,CAAC;wBACzB,KAAK,EAAE,IAAI;wBACX,OAAO,EAAE,IAAI;wBACb,YAAY,EAAE,IAAI,CAAC,aAAa;wBAChC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE;qBAC3B,CAAC,CAAC;oBACH,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;iBACxC;;;;;;;;;;;QAWE,kCAAU;;;;;;;;;sBAAC,OAAwB;gBACtC,qBAAM,CAAC,GAAkC,iBAAiB,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;gBAE5F,IAAI,OAAO,CAAC,CAAC,QAAQ,KAAK,WAAW,EAAE;oBACnC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;oBAC7B,OAAO,CAAC,CAAC,QAAQ,CAAC;iBACrB;gBAED,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC5B,IAAI,OAAO,CAAC,OAAO,IAAI,IAAI,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,EAAE;oBAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;iBAAE;;;;;;;;;;QAU5G,+BAAO;;;;;;;;sBAAC,IAAqB;gBAChC,qBAAM,CAAC,GAAiC,IAAI,KAAK,EAAyB,CAAC;gBAC3E,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,GAAA,CAAC,CAAC;gBAC3E,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,aAAa,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC5B,IAAI,IAAI,CAAC,MAAM,EAAE;oBACb,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;oBACtB,IAAI,CAAC,WAAW,EAAE,CAAC;iBACtB;;;;;;;;;;;QAWE,gCAAQ;;;;;;;;;sBAAC,KAA+C;gBAC3D,IAAI,KAAK,IAAI,IAAI,EAAE;oBAAE,OAAO;iBAAE;gBAC9B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAAE,OAAO;iBAAE;gBACtC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBACpB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,KAAK,EAAyB,CAAC,CAAC;oBAC3D,IAAI,IAAI,CAAC,MAAM,EAAE;wBACb,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;wBACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;qBACtB;oBACD,OAAO;iBACV;gBACD,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;;oBAEzB,qBAAM,GAAC,GAAwC,IAAI,KAAK,EAAgC,CAAC;oBACzF,EAAyB,KAAK,GAAE,OAAO,CAAC,UAAA,IAAI;wBACxC,qBAAM,EAAE,GAAiC,IAAI,KAAK,EAAyB,CAAC;wBAC5E,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,GAAA,CAAC,CAAC;wBAC5E,GAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;qBACd,CAAC,CAAC;oBACH,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAC,CAAC,CAAC;oBAC1B,IAAI,CAAC,aAAa,qBAA2B,KAAK,CAAA,CAAC;oBACnD,IAAI,IAAI,CAAC,MAAM,EAAE;wBACb,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;wBACtB,IAAI,CAAC,WAAW,EAAE,CAAC;qBACtB;iBACJ;qBAAM;;oBAEH,IAAI,CAAC,OAAO,mBAAkB,KAAK,EAAC,CAAC;iBACxC;;;;;;;;;;QAUE,kCAAU;;;;;;;;sBAAC,OAAgB;gBAC9B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBAClC,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,EAAE;oBAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC;iBAAE;;;;;;;QAWxE,mCAAW;;;;;;gBACf,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;oBAAE,OAAO;iBAAE;gBACpE,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,EAAE,EAAE;oBAC9D,qBAAM,CAAC,GAA2B;wBAC9B,IAAI,EAAE,IAAI,CAAC,MAAM;wBACjB,QAAQ,EAAE,iBAAiB,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC;qBACrE,CAAC;oBACF,IAAI,CAAC,gBAAa,IAAI,EAAE;wBAAE,OAAO;qBAAE;oBACnC,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,CAAC,EAAE;wBAAE,CAAC,cAAW,IAAI,CAAC,QAAQ,CAAC;qBAAE;oBACxD,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,CAAC,EAAE;wBAAE,CAAC,cAAW,IAAI,CAAC,QAAQ,CAAC;qBAAE;oBACxD,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;wBACrB,CAAC,UAAO,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;wBACrC,CAAC,aAAU,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,CAAC;wBAC7E,IAAI,CAAC,MAAM,GAAG,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC;qBACvC;yBACI;wBACD,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;qBAC5B;oBACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;iBACjD;qBACI;oBACD,IAAI,IAAI,CAAC,MAAM,EAAE;wBACb,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;qBACtB;iBACJ;;;;;;;QAOG,qCAAa;;;;;;;gBACjB,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,EAAE,EAAE;oBAChE,qBAAM,CAAC,GAA2B;wBAC9B,IAAI,EAAE,IAAI,CAAC,MAAM;wBACjB,KAAK,EAAE,MAAM;wBACb,MAAM,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;wBACpC,eAAe,EAAE,QAAQ;wBACzB,MAAM,EAAE,IAAI;wBACZ,QAAQ,EAAE,EAAE;wBACZ,SAAS,EAAE,SAAS;wBACpB,YAAY,EAAE,CAAC;qBAClB,CAAC;oBACF,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;wBACvB,CAAC,UAAO,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;wBACrC,CAAC,aAAU,MAAM,CAAC;wBAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC;qBACzC;yBACI;wBACD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;qBAC9B;oBACD,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;wBAC3B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,EAAE,UAAC,CAA4B;4BAChG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;4BACxC,IAAI,CAAC,KAAI,CAAC,eAAe,EAAE;gCACvB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;gCACnC,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;6BAC/B;yBACJ,CAAC,CAAC;wBACH,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,EAAE,UAAC,CAA4B;4BAChG,IAAI,KAAI,CAAC,eAAe,EAAE;gCAAE,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;6BAAE;yBACzE,CAAC,CAAC;wBACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,EAAE,UAAC,CAA4B;4BAC9F,IAAI,KAAI,CAAC,eAAe,EAAE;gCACtB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gCAClC,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;6BAChC;yBACJ,CAAC,CAAC;wBACH,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;qBACnC;iBACJ;gBACD,KAAK,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,MAAM,KAAK,EAAE,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,GAAG;oBACnE,IAAI,IAAI,CAAC,mBAAmB,EAAE;wBAC1B,IAAI,IAAI,CAAC,iBAAiB,EAAE;4BAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;yBAAE;wBACzF,IAAI,IAAI,CAAC,kBAAkB,EAAE;4BAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;yBAAE;wBAC3F,IAAI,IAAI,CAAC,kBAAkB,EAAE;4BAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;yBAAE;wBAC3F,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;qBACpC;oBACD,IAAI,IAAI,CAAC,QAAQ,EAAE;wBACf,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;qBACxB;iBACJ;;4BAjcT;MAemC,OAAO,EAqbzC;;;;;;;;;;;ACtbD;;;;QAAA;QAAoCA,kCAAQ;;;;;;;;;;QAuExC,wBAAoB,SAAkC;YAAtD,YACI,iBAAO,SACV;YAFmB,eAAS,GAAT,SAAS,CAAyB;2BAlE7B,EAAE;iCACK,KAAK;6BACF,IAAI;oCACJ,KAAK;wCACD,KAAK;uCACmB,IAAI;sCACL,IAAI;uCACH,IAAI;8BAC7B,IAAI,GAAG,EAAe;;SA4D3D;8BAhDU,oCAAQ;;;;;;;8BAAuB,OAAO,IAAI,CAAC,SAAS,CAAC;;;;8BAQrD,0CAAc;;;;;;;8BAA8B,OAAO,IAAI,CAAC,SAAS,CAAC;;;;8BASlE,uCAAW;;;;;;;;8BAAc,OAAO,IAAI,CAAC,YAAY,CAAC;;;;0BACtC,GAAY;gBAC/B,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;gBACxB,IAAI,CAAC,aAAa,EAAE,CAAC;;;;;8BAUd,iCAAK;;;;;;;;8BAAa,OAAO,IAAI,CAAC,MAAM,CAAC;;;;0BAC/B,GAAW;gBACxB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;gBAClB,IAAI,CAAC,aAAa,EAAE,CAAC;;;;;;;;;;;;;QAwBlB,oCAAW;;;;;;;;sBAAC,SAAiB,EAAE,EAAY;gBAC9C,qBAAM,eAAe,GAAG;oBACpB,OAAO;oBACP,UAAU;oBACV,MAAM,EAAE,SAAS;oBACjB,WAAW;oBACX,WAAW;oBACX,WAAW;oBACX,UAAU;oBACV,WAAW;oBACX,SAAS;oBACT,YAAY;iBACf,CAAC;gBACF,IAAI,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;oBAC3C,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;iBAC7C;;;;;;;;;QASE,+BAAM;;;;;;;;gBACT,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC5B,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;iBAAE;;;;;;;;;QAU3C,qCAAY;;;;;;;;gBACf,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;;;;;;;;;QAUlC,oCAAW;;;;;;;;gBACd,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;;;;;;;;;QAUjC,gCAAO;;;;;;;;gBACV,qBAAM,CAAC,GAAiC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;gBACjE,qBAAM,IAAI,GAAoB,IAAI,KAAK,EAAY,CAAC;gBACpD,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAA,CAAC,CAAC;gBACrE,OAAO,IAAI,CAAC;;;;;;;;;QAUT,mCAAU;;;;;;;;gBACb,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;;;;;;;;;;QAUhC,qCAAY;;;;;;;;sBAAC,SAAkB;gBAClC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;;;;;;;;;;QAUpC,oCAAW;;;;;;;;sBAAC,QAAiB;gBAChC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;;;;;;;;;;;QAWlC,mCAAU;;;;;;;;;sBAAC,OAAyB;gBACvC,qBAAM,CAAC,GAAmC,iBAAiB,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;gBAC9F,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAI,OAAO,CAAC,IAAI,EAAE;oBACd,IAAI,CAAC,OAAO,mBAAkB,OAAO,CAAC,IAAI,EAAC,CAAC;iBAC/C;;;;;;;;;;QAUE,gCAAO;;;;;;;;sBAAC,IAAqB;gBAChC,qBAAM,CAAC,GAAiC,IAAI,KAAK,EAAyB,CAAC;gBAC3E,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,GAAA,CAAC,CAAC;gBAC3E,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;QAUvB,mCAAU;;;;;;;;sBAAC,OAAgB;gBAC9B,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;;;;;;;QAU/B,sCAAa;;;;;;;gBACjB,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,EAAE,EAAE;oBAChE,qBAAM,CAAC,GAA2B;wBAC9B,IAAI,EAAE,IAAI,CAAC,MAAM;wBACjB,KAAK,EAAE,MAAM;wBACb,MAAM,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;wBACpC,eAAe,EAAE,QAAQ;wBACzB,MAAM,EAAE,IAAI;wBACZ,QAAQ,EAAE,EAAE;wBACZ,SAAS,EAAE,SAAS;wBACpB,YAAY,EAAE,CAAC;qBAClB,CAAC;oBACF,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;wBACvB,CAAC,UAAO,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;wBACrC,CAAC,aAAU,MAAM,CAAC;wBAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC;qBACzC;yBACI;wBACD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;qBAC9B;oBACD,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;wBAC3B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,EAAE,UAAC,CAA4B;4BAChG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;4BACxC,IAAI,CAAC,KAAI,CAAC,eAAe,EAAE;gCACvB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;gCACnC,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;6BAC/B;yBACJ,CAAC,CAAC;wBACH,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,EAAE,UAAC,CAA4B;4BAChG,IAAI,KAAI,CAAC,eAAe,EAAE;gCAAE,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;6BAAE;yBACzE,CAAC,CAAC;wBACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,EAAE,UAAC,CAA4B;4BAC9F,IAAI,KAAI,CAAC,eAAe,EAAE;gCACtB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gCAClC,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;6BAChC;yBACJ,CAAC,CAAC;wBACH,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;qBACnC;iBACJ;gBACD,KAAK,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,MAAM,KAAK,EAAE,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,GAAG;oBACnE,IAAI,IAAI,CAAC,mBAAmB,EAAE;wBAC1B,IAAI,IAAI,CAAC,iBAAiB,EAAE;4BAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;yBAAE;wBACzF,IAAI,IAAI,CAAC,kBAAkB,EAAE;4BAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;yBAAE;wBAC3F,IAAI,IAAI,CAAC,kBAAkB,EAAE;4BAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;yBAAE;wBAC3F,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;qBACpC;oBACD,IAAI,IAAI,CAAC,QAAQ,EAAE;wBACf,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;qBACxB;iBACJ;;6BApST;MAcoC,QAAQ,EAyR3C;;;;;;;;;;ACjSD,yBAAa,qBAAqB,GAAoB;QAClD,KAAK,EAAe,OAAO;QAC3B,QAAQ,EAAY,UAAU;QAC9B,UAAU,EAAU,YAAY;QAChC,MAAM,EAAc,QAAQ;QAC5B,aAAa,EAAO,gBAAgB;QACpC,aAAa,EAAO,gBAAgB;QACpC,WAAW,EAAS,cAAc;QAClC,SAAS,EAAW,WAAW;QAC/B,QAAQ,EAAY,UAAU;QAC9B,SAAS,EAAW,WAAW;QAC/B,eAAe,EAAK,YAAY;KACnC;;;;;;;;;;;ACLD;;;;QAAA;QAAyCA,uCAAa;;;;;;;QAclD,6BAAY,YAAiD;mBACzD,kBAAM,YAAY,CAAC;SACtB;;;;;;;;QAaM,qDAAuB;;;;;;;sBAAC,CAA4B;gBACvD,IAAI,CAAC,CAAC,EAAE;oBAAE,OAAO,IAAI,CAAC;iBAAE;gBACxB,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE;oBAAE,OAAO,IAAI,CAAC;iBAAE;gBAC/B,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE;oBAAE,OAAO,IAAI,CAAC;iBAAE;gBACpD,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC;;;;;;;;;QAS5D,oCAAM;;;;;;;;gBACT,OAAO,EAAM,IAAI,GAAE,MAAM,EAAE,CAAC;;;;;;;;;;;QAYzB,+CAAiB;;;;;;;;;;gBACpB,qBAAM,CAAC,GAA2B;oBAC9B,KAAK,EAAE,MAAM;oBACb,MAAM,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;oBACpC,eAAe,EAAE,QAAQ;oBACzB,MAAM,EAAE,IAAI;oBACZ,QAAQ,EAAE,EAAE;oBACZ,SAAS,EAAE,SAAS;oBACpB,YAAY,EAAE,CAAC;iBAClB,CAAC;gBACF,CAAC,aAAU,MAAM,CAAC;gBAClB,qBAAM,KAAK,GAAa,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC;gBAC9C,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;gBAC5B,OAAO,KAAK,CAAC;;;;;;;QAOV,mCAAK;;;;;;gBACR,iBAAM,KAAK,WAAE,CAAC;gBACd,IAAI,CAAC,MAAM,EAAE,CAAC;gBACd,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC;;;gBAIlC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;;;;;;;;;QASvB,oCAAM;;;;;;;;gBAET,qBAAM,GAAG,GAA6B,IAAI,CAAC,MAAM,EAAE,CAAC;gBAEpD,AAIK;;;oBAGD,qBAAM,WAAW,GAAW,GAAG,CAAC,OAAO,EAAE,CAAC;oBAC1C,qBAAM,aAAa,GAA0B,GAAG,CAAC,SAAS,EAAE,CAAC;;oBAG7D,qBAAM,KAAK,GAAW,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;;oBAGjE,qBAAM,EAAE,GAAmB,GAAG,CAAC,MAAM,EAAE,CAAC;oBACxC,qBAAM,CAAC,GAAW,EAAE,CAAC,WAAW,CAAC;oBACjC,qBAAM,CAAC,GAAW,EAAE,CAAC,YAAY,CAAC;oBAClC,qBAAM,QAAQ,GAAW,CAAC,GAAG,KAAK,CAAC;oBACnC,qBAAM,SAAS,GAAW,CAAC,GAAG,KAAK,CAAC;;oBAGpC,qBAAM,UAAU,GAAG,EAAM,IAAI,GAAE,aAAa,EAAE,CAAC;oBAC/C,qBAAM,EAAE,GAAG,UAAU,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;;oBAG1D,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;iBACvF;;;;;;;;QAQE,oCAAM;;;;;;;;gBAET,qBAAM,GAAG,GAA6B,EAAM,IAAI,GAAE,MAAM,EAAE,CAAC;;gBAG3D,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC;gBAChC,qBAAM,CAAC,GAA0B,GAAG,CAAC,SAAS,EAAE,CAAC;gBACjD,IAAI,CAAC,YAAY,GAAG;oBAChB,QAAQ,EAAE,CAAC,CAAC,GAAG,EAAE;oBACjB,SAAS,EAAE,CAAC,CAAC,GAAG,EAAE;iBACrB,CAAC;;gBAGF,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,EAAE,UAAC,CAAM;oBACzE,KAAI,CAAC,YAAY,EAAE,CAAC;iBACvB,CAAC,CAAC;;gBAGH,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,QAAQ,EAAE,UAAC,CAAM;oBACvE,KAAI,CAAC,YAAY,EAAE,CAAC;iBACvB,CAAC,CAAC;;;;;;;;;QAQA,oCAAM;;;;;;;sBAAC,GAA6B;gBACvC,EAAM,IAAI,GAAE,MAAM,CAAC,GAAG,CAAC,CAAC;;;;;;;;;;;;;;;;;QAYlB,8CAAgB;;;;;;;YAA1B,UAA2B,EAAqB;gBAC5C,qBAAM,KAAK,GAAG,EAAM,IAAI,GAAE,QAAQ,EAAE,CAAC;gBACrC,IAAI,KAAK,EAAE;oBACP,IAAI,EAAE,IAAI,IAAI,EAAE;wBACZ,KAAK,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;;;;;;qBAMtC;yBACI;wBACD,KAAK,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBAChD;iBACJ;aACJ;;;;;;;;;;;;;;QAQS,iDAAmB;;;;;;;YAA7B;;gBAEI,IAAI,IAAI,CAAC,mBAAmB,EAAE;oBAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;iBAAE;gBAC7F,IAAI,IAAI,CAAC,eAAe,EAAE;oBAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;iBAAE;aACxF;;;;;;;;;;;;;;QAQS,oCAAM;;;;;;;YAAhB;gBACI,qBAAM,GAAG,GAA6B,EAAM,IAAI,GAAE,MAAM,EAAE,CAAC;;gBAG3D,qBAAM,EAAE,GAAmB,GAAG,CAAC,MAAM,EAAE,CAAC;gBACxC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC;gBACpC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC,YAAY,CAAC;aACzC;;;;;;;;;;;;;;QAQS,0CAAY;;;;;;;YAAtB;gBACI,qBAAM,GAAG,GAA6B,EAAM,IAAI,GAAE,MAAM,EAAE,CAAC;;gBAG3D,AAAU;oBACN,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;;oBAGhC,qBAAM,EAAE,GAAmB,GAAG,CAAC,MAAM,EAAE,CAAC;oBACxC,qBAAM,CAAC,GAAW,EAAE,CAAC,WAAW,CAAC;oBACjC,qBAAM,CAAC,GAAW,EAAE,CAAC,YAAY,CAAC;oBAClC,qBAAM,WAAW,GAAG,EAAM,IAAI,GAAE,aAAa,EAAE,CAAC,oBAAoB,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC;oBACtF,IAAI,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;;oBAG5E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;oBAGlB,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC;oBAChC,qBAAM,CAAC,GAA0B,GAAG,CAAC,SAAS,EAAE,CAAC;oBACjD,IAAI,CAAC,YAAY,GAAG;wBAChB,QAAQ,EAAE,CAAC,CAAC,GAAG,EAAE;wBACjB,SAAS,EAAE,CAAC,CAAC,GAAG,EAAE;qBACrB,CAAC;iBACL;aACJ;kCAlQL;MAayC,aAAa,EAsPrD,CAAA;;;;;;;;AAQD;QACI,qBAAM,CAAC,GAAG,mBAAmB,CAAC,SAAS,CAAC;QACxC,mBAAmB,CAAC,SAAS,qBAAS,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAA,CAAC;QACpE,KAAK,qBAAM,CAAC,IAAI,CAAC,EAAE;YAAE,IAAI,EAAM,CAAC,GAAE,CAAC,CAAC,IAAI,IAAI,EAAE;gBAAE,EAAM,mBAAmB,CAAC,SAAS,GAAE,CAAC,CAAC,GAAG,EAAM,CAAC,GAAE,CAAC,CAAC,CAAC;aAAE;SAAC;QACzG,EAAM,mBAAmB,CAAC,SAAS,GAAE,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;QAC3D,EAAM,mBAAmB,CAAC,SAAS,GAAE,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC3D,EAAM,mBAAmB,CAAC,SAAS,GAAE,UAAU,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC;KACpE;;;;;;AClRD;;;;;;;;;;;oBAeCK,eAAU;;gCAfX;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;QAuEkB,6BAAkB;;;;;;;;sBAAC,KAAa,EAAE,MAAY;gBACxD,qBAAM,CAAC,GAAoB,EAAE,CAAC;gBAC9B,qBAAM,kBAAkB,GAAG,UAAC,CAAO;oBAC/B,qBAAM,GAAG,GAAW,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC;oBACpF,qBAAI,GAAG,GAAW,CAAC,CAAC;oBACpB,IAAI,eAAe,EAAE;wBACjB,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,YAAY,GAAG,GAAG,GAAG,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC;wBAC/E,IAAI,GAAG,GAAG,GAAG,EAAE;4BAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;yBAAE;qBACtC;yBACI;wBACD,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC;qBAC5E;oBACD,qBAAM,CAAC,GAAa,EAAE,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC;oBACtD,OAAO,CAAC,CAAC;iBACZ,CAAC;gBACF,qBAAI,eAAe,GAAY,KAAK,CAAC;gBAErC,IAAI,MAAM,IAAI,IAAI,EAAE;oBAAE,MAAM,qBAAS;wBAC7B,WAAW,EAAE,GAAG;wBAChB,WAAW,EAAE,CAAC;wBACd,YAAY,EAAE,GAAG;wBACjB,YAAY,EAAE,CAAC;qBAClB,CAAA,CAAC;iBACL;gBACD,IAAI,MAAM,CAAC,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,YAAY,IAAK,MAAM,CAAC,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE;oBAAE,eAAe,GAAG,IAAI,CAAC;iBAAE;gBAChI,IAAI,CAAC,KAAK,IAAI,KAAK,IAAI,CAAC,EAAE;oBACtB,OAAO,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;iBACvC;gBACD,KAAK,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;oBAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;iBAAE;gBACvE,OAAO,CAAC,CAAC;;;oBA1EhBA,eAAU;;yBA1BX;;;;;;;ACAA;;;;;;;;;;;;oBAcCA,eAAU;;4BAdX;;;;;;;ACAA;;;;;;;;;;;oBAaCA,eAAU;;6BAbX;;;;;;;ACAA;;;;;;;;;;;oBAiBCA,eAAU;;2BAjBX;;;;;;;ACAA;;;;;;;;;;;;oBAcCA,eAAU;;6BAdX;;;;;;;ACAA;;;;;;;;;;;;oBAcCA,eAAU;;8BAdX;;;;;;;;;;;;;;;QCmB6CL,kCAAY;;;;;oBADxDK,eAAU;;6BAlBX;MAmB6C,YAAY;;;;;;ACnBzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAgDwC,IAAIC,iBAAY,EAAQ;;;oBAnB/DC,cAAS,SAAC;wBACP,QAAQ,EAAE,mBAAmB;qBAChC;;;4BAQIC,UAAK;oCAQLC,WAAM;;qCA/CX;;;;;;;ACAA;;;IAwBA,qBAAI,SAAS,GAAG,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAsMd,0BAAoB,eAA+B;YAA/B,oBAAe,GAAf,eAAe,CAAgB;0CAvJlB,KAAK;uBAChB,CAAC,SAAS,EAAE,EAAE,QAAQ,EAAE;;;;;;yBAmEtB,IAAI;;;;;;2BAcF,KAAK;;;;;;wCAqBQ,IAAI;;;;;;gCAWW,IAAIH,iBAAY,EAAU;SAqCxB;8BAzB7C,yCAAW;;;;;;;;gBAClB,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;oBAC7H,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC;iBAChD;gBACD,OAAO,EAAE,CAAC;;;;;8BASH,gCAAE;;;;;;;8BAAa,OAAO,IAAI,CAAC,GAAG,CAAC;;;;;;;;;;QAuBnC,gCAAK;;;;;;;;gBACR,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;oBACzC,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,GAAG,CAAC,CAAC;iBACpC,CAAC,CAAC;;;;;;;;QAQA,0CAAe;;;;;;;gBAClB,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;gBACzC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;gBACnC,IAAI,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;QAUjB,sCAAW;;;;;;;;sBAAC,OAAwC;gBACvD,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;oBAAE,OAAO;iBAAE;gBAC7C,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,OAAO,CAAC,WAAW,CAAC,KAAK,OAAO,IAAI,CAAC,QAAQ,KAAK,QAAQ;oBAClF,OAAO,IAAI,CAAC,SAAS,KAAK,QAAQ,EAAE;oBACpC,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,EAAE;wBACnC,QAAQ,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,YAAY;wBAC1C,SAAS,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC,YAAY;qBAC/C,CAAC,CAAC;iBACN;gBACD,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;;;;;;;;QAQhC,sCAAW;;;;;;0BAAK,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;;;;;;;;;QAU5D,+BAAI;;;;;;;;sBAAC,GAAc;gBACtB,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;;;;;;;;;QAUzC,mCAAQ;;;;;;;0BAAa,OAAO,mBAAmB,GAAG,IAAI,CAAC,GAAG,CAAC;;;;;;;QAW1D,uCAAY;;;;;;;;gBAChB,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,SAAS,CAAC,UAAA,CAAC;oBAC3E,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,GAAG,CAAC,CAAC;iBACpC,CAAC,CAAC;;;;;;;;;;QAUC,+CAAoB;;;;;;;;sBAAC,OAAwC;gBACjE,qBAAM,OAAO,GAAuB,EAAE,CAAC;gBACvC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;oBAAE,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;iBAAE;gBACrD,IAAI,OAAO,CAAC,aAAa,CAAC,EAAE;oBAAE,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;iBAAE;gBACvE,IAAI,OAAO,CAAC,gBAAgB,CAAC,EAAE;oBAAE,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;iBAAE;gBAChF,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;oBAAE,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;iBAAE;gBAC3D,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;oBAC1C,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;wBAAE,OAAO,CAAC,WAAW,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;qBAAE;oBAC1E,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;oBACrC,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;iBACxC;gBACD,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;;;oBArRtDI,cAAS,SAAC;wBACP,QAAQ,EAAE,YAAY;wBACtB,QAAQ,EAAE,iHAGC;wBACX,MAAM,EAAE,CAAC,yPAIR,CAAC;wBACF,aAAa,EAAEC,sBAAiB,CAAC,IAAI;qBACxC;;;;;wBAhDQ,cAAc;;;;+BA8DlBC,cAAS,SAAC,gBAAgB;wCAO1BC,oBAAe,SAAC,sBAAsB;+BAQtCL,UAAK;gCAOLA,UAAK;4BAOLA,UAAK;kCAOLA,UAAK;qCAQLA,UAAK;+BASLA,UAAK;4BAOLA,UAAK;iCAOLA,UAAK;8BAOLA,UAAK;8BAOLA,UAAK;8BAOLA,UAAK;2CAOLA,UAAK;mCAWLC,WAAM;;+BAzLX;;;;;;;ACAA;;;IAeA,qBAAI,QAAQ,GAAG,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA4Sb,4BAAoB,cAA6B,EAAU,aAA+B;YAAtE,mBAAc,GAAd,cAAc,CAAe;YAAU,kBAAa,GAAb,aAAa,CAAkB;iCAzQpD,IAAI;2BACR,EAAE;mCAEV,KAAK;kCACN,KAAK;wCAWC,KAAK;;;;;;4BAca,IAAIH,iBAAY,EAAgB;;;;;;wBAOpC,IAAIA,iBAAY,EAAgB;;;;;;2BAO7B,IAAIA,iBAAY,EAAgB;;;;;;6BAOpD,KAAK;;;;;;6BAOiB,IAAIA,iBAAY,EAAgB;;;;;;wCAOX,IAAIA,iBAAY,EAAmB;;;;;;;gCA6B3E,KAAK;;;;;;;+BAQN,IAAI;;;;;;+BA4ByB,IAAIA,iBAAY,EAAgB;;;;;;4BAO9C,IAAI,GAAG,EAAe;;;;;;6BAOjB,IAAIA,iBAAY,EAAgB;;;;;;6BAOhC,IAAIA,iBAAY,EAAgB;;;;;;4BAOjC,IAAIA,iBAAY,EAAgB;;;;;;6BAO/B,IAAIA,iBAAY,EAAgB;;;;;;2BAOlC,IAAIA,iBAAY,EAAgB;;;;;;8BAO7B,IAAIA,iBAAY,EAAgB;YAwF/E,IAAI,CAAC,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,CAAC;SACtC;8BAhDU,8CAAc;;;;;;;8BAAc,OAAO,IAAI,CAAC,oBAAoB,CAAC;;;;8BAQ7D,kCAAE;;;;;;;8BAAa,OAAO,IAAI,CAAC,GAAG,CAAC;;;;8BAQ/B,8CAAc;;;;;;;8BAAc,OAAO,IAAI,CAAC,eAAe,CAAC;;;;8BAQxD,6CAAa;;;;;;;8BAAc,OAAO,IAAI,CAAC,cAAc,CAAC;;;;8BAQtD,uCAAO;;;;;;;8BAAa,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;;;;;;;;QA8B7C,4CAAe;;;;;;;;sBAAC,GAAc;gBACjC,OAAO,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;;;;;;;;QAQ1D,+CAAkB;;;;;;;gBACrB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;oBAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBAC/D,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,aAAa,EAAE;oBACxD,qBAAM,UAAU,GAAW,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC;oBAC1F,IAAI,UAAU,CAAC,WAAW,EAAE,KAAK,iBAAiB,EAAE;wBAChD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;qBAC/B;yBAAM,IAAI,UAAU,CAAC,WAAW,EAAE,KAAK,aAAa,EAAE;wBACnD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;qBAC9B;oBACD,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;iBACxG;gBACD,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;oBAC5B,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBACpC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;oBACjC,IAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC5B;;;;;;;;;;QAUE,wCAAW;;;;;;;;sBAAC,OAAwC;gBACvD,IAAI,OAAO,IAAI,CAAC,QAAQ,KAAK,QAAQ,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,QAAQ,EAAE;oBACzE,OAAO;iBACV;gBACD,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;oBAAE,OAAO;iBAAE;gBAC3C,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,OAAO,CAAC,WAAW,CAAC,EAAE;oBAC7C,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;iBAClD;gBACD,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;oBAClB,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;iBACzC;gBACD,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;oBAClB,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;iBACzC;gBACD,IAAI,OAAO,CAAC,WAAW,CAAC,EAAE;oBACtB,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;iBAC7C;gBACD,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE;oBAC3C,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;iBACxC;gBACD,IAAI,OAAO,CAAC,QAAQ,CAAC,EAAE;oBACnB,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;iBAC1C;gBACD,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;oBACpB,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;iBAC3C;;;;;;;;;QASE,wCAAW;;;;;;;;gBACd,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBACvC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,WAAW,EAAE,GAAA,CAAC,CAAC;;;;;;;QAQ1C,qCAAQ;;;;;0BAAa,OAAO,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;;;;;;;QAW9D,8CAAiB;;;;;;;;gBACrB,qBAAM,YAAY,GAAoC,UAAA,CAAC;oBACnD,OAAO;wBACH,MAAM,EAAE,KAAI;wBACZ,KAAK,EAAE,CAAC;wBACR,QAAQ,EAAE,KAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC,CAAC;wBACxD,MAAM,EAAE,KAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;qBACpD,CAAC;iBACL,CAAC;gBAEF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,CAAa;;;;oBAI/F,KAAI,CAAC,aAAa,GAAGQ,UAAK,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,UAAA,CAAC;wBACvC,IAAI,KAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;4BACvB,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;yBACtE;wBACD,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC1C,CAAC,CAAC;iBACN,CAAC,CAAC,CAAC;gBAEJ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,CAAa;oBAClG,IAAI,KAAI,CAAC,aAAa,EAAE;wBACpB,KAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;wBACjC,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC;qBAC7B;oBACD,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;iBACvC,CAAC,CAAC,CAAC;gBAEJ,qBAAM,QAAQ,GAAG;oBACb,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBAC/E,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACrF,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACzF,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACzF,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACzF,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACvF,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACzF,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACrF,EAAE,IAAI,EAAE,YAAY,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;iBAC9F,CAAC;gBACF,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAG;oBACjB,qBAAM,EAAE,GAAG,KAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,GAAG,CAAC,IAAI,EAAE,KAAI,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBAC5F,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBACzB,CAAC,CAAC;;;oBAtaVP,cAAS,SAAC;wBACP,QAAQ,EAAE,cAAc;qBAC3B;;;;;wBAnCQ,aAAa;wBAP4BQ,qBAAgB;;;;+BA4D7DC,iBAAY,SAAC,gBAAgB;6BAU7BR,UAAK;+BAOLC,WAAM;2BAONA,WAAM;8BAONA,WAAM;gCAOND,UAAK;gCAOLC,WAAM;2CAONA,WAAM;6BAOND,UAAK;+BAOLA,UAAK;8BAOLA,UAAK;mCAQLA,UAAK;kCAQLA,UAAK;4BAOLA,UAAK;+BAOLA,UAAK;gCAOLA,UAAK;kCAOLC,WAAM;+BAOND,UAAK;gCAOLC,WAAM;gCAONA,WAAM;+BAONA,WAAM;gCAONA,WAAM;8BAONA,WAAM;iCAONA,WAAM;4BAOND,UAAK;8BAOLA,UAAK;4BAOLA,UAAK;;iCAzPV;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA0QI,sBAAoB,WAAuB,EAAU,KAAa;YAA9C,gBAAW,GAAX,WAAW,CAAY;YAAU,UAAK,GAAL,KAAK,CAAQ;8BAnL7C,CAAC;6BACF,CAAC;yBACL,CAAC;4BAEe,EAAE;wBACb,IAAI;mCAE6C,IAAI;;;;;;gCAsEvC,IAAIF,iBAAY,EAAQ;;;;;;gCAQpB,IAAIA,iBAAY,EAAY;;;;;;;4BAS9B,IAAIA,iBAAY,EAAc;;;;;;;+BAS3B,IAAIA,iBAAY,EAAc;;;;;;;iCAS5B,IAAIA,iBAAY,EAAc;;;;;;;gCAS/B,IAAIA,iBAAY,EAAc;;;;;;;+BAS/B,IAAIA,iBAAY,EAAc;;;;;;;gCAS7B,IAAIA,iBAAY,EAAc;;;;;;;;8BAU9B,IAAIA,iBAAY,EAAgB;;;;;;8BAQtC,IAAIA,iBAAY,EAAU;;;;;;8BAQtB,IAAIA,iBAAY,EAAc;SAcE;QA/JvE,sBACW,6BAAG;;;;;;;;;;;;;;gBADd,cACyB,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE;;;;0BAC7B,GAAS,IAAI,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;;;WADA;QAQ5C,sBACW,kCAAQ;;;;;;;;;;;gBADnB,cACyC,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE;;;;0BAC9C,KAAsB;gBACtC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;gBAC9C,IAAI,CAAC,YAAY,EAAE,CAAC;;;;WAH0C;QAWlE,sBACW,mCAAS;;;;;;;;;;;gBADpB,cAC0C,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE;;;;0BAC9C,KAAsB;gBACvC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;gBAC/C,IAAI,CAAC,YAAY,EAAE,CAAC;;;;WAH2C;QAWnE,sBACW,iCAAO;;;;;;;;;;;gBADlB,cACoC,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;;;;0BACxC,GAAgB,IAAI,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;;;WADA;QAQ3D,sBACW,8BAAI;;;;;;;;;;;gBADf,cACqC,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE;;;;0BACzC,KAAsB;gBAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC7C,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,EAAE;oBAChC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACxC;;;;WALoD;;;;;;;QA+HlD,+BAAQ;;;;;;;gBACX,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;gBACpD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;gBAClD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;;;;;;;;;;QAUpC,kCAAW;;;;;;;;sBAAC,OAA6C;gBAC5D,IAAI,IAAI,CAAC,WAAW,EAAE;oBAClB,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;wBAChB,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;4BACnB,IAAI,CAAC,WAAW,CAAC,cAAc,mBAAc;gCACzC,MAAM,EAAE,IAAI,CAAC,IAAI;6BACpB,EAAC,CAAC;yBACN;qBACJ;oBACD,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;wBACpB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;qBACjD;iBACJ;;;;;;;;QAQE,kCAAW;;;;;;;gBACd,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;;;;;;;;;QAU3B,oCAAa;;;;;;;;;;;;gBAIhB,OAAO,IAAI,OAAO,CAAO,UAAC,OAAO;oBAC7B,UAAU,CACN,cAAQ,OAAO,KAAI,CAAC,WAAW,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,EAAE,GAAA,CAAC,CAAC,EAAE,CAAC,CAAC;iBAC3F,CAAC,CAAC;;;;;;;;;;;QAgBC,uCAAgB;;;;;;;;;sBAAC,KAAsB,EAAE,YAA2B;gBAA3B,6BAAA;oBAAA,mBAA2B;;gBACxE,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC3B,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;iBAC5B;qBAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAClC,yBAAe,KAAK,EAAC;iBACxB;gBACD,OAAO,YAAY,CAAC;;;;;;;;QAQhB,2CAAoB;;;;;;;;gBACxB,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAM,OAAO,CAAC,CAAC,SAAS,CAAC,UAAA,CAAC;;;;;;oBAI1D,KAAI,CAAC,aAAa,GAAG,UAAU,CAAC;wBAC5B,KAAI,CAAC,QAAQ,CAAC,IAAI,mBAAa,CAAC,EAAC,CAAC;qBACrC,EAAE,GAAG,CAAC,CAAC;iBACX,CAAC,CAAC;gBACH,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAM,UAAU,CAAC,CAAC,SAAS,CAAC,UAAA,CAAC;oBAC7D,IAAI,KAAI,CAAC,aAAa,EAAE;wBACpB,YAAY,mBAAe,KAAI,CAAC,aAAa,EAAC,CAAC;qBAClD;oBACD,KAAI,CAAC,WAAW,CAAC,IAAI,mBAAa,CAAC,EAAC,CAAC;iBACxC,CAAC,CAAC;gBACH,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAM,YAAY,CAAC,CAAC,SAAS,CAAC,UAAA,CAAC;oBAC/D,KAAI,CAAC,aAAa,CAAC,IAAI,mBAAa,CAAC,EAAC,CAAC;iBAC1C,CAAC,CAAC;gBACH,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAM,WAAW,CAAC,CAAC,SAAS,CAAC,UAAA,CAAC;oBAC9D,KAAI,CAAC,YAAY,CAAC,IAAI,mBAAa,CAAC,EAAC,CAAC;iBACzC,CAAC,CAAC;gBACH,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAM,UAAU,CAAC,CAAC,SAAS,CAAC,UAAA,CAAC;oBAC7D,KAAI,CAAC,WAAW,CAAC,IAAI,mBAAa,CAAC,EAAC,CAAC;iBACxC,CAAC,CAAC;gBACH,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAM,WAAW,CAAC,CAAC,SAAS,CAAC,UAAA,CAAC;oBAC9D,KAAI,CAAC,YAAY,CAAC,IAAI,mBAAa,CAAC,EAAC,CAAC;iBACzC,CAAC,CAAC;;;;;;;;QAQC,4CAAqB;;;;;;;;gBACzB,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAO,eAAe,CAAC,CAAC,SAAS,CAAC;oBAClE,KAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,UAAC,MAAY;wBAC3C,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;qBAClC,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;QAQC,4CAAqB;;;;;;;;gBACzB,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAO,eAAe,CAAC,CAAC,SAAS,CAAC;oBAClE,KAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,UAAC,MAAgB;wBAC/C,IAAI,KAAI,CAAC,SAAS,KAAK,MAAM,CAAC,QAAQ,IAAI,KAAI,CAAC,UAAU,KAAK,MAAM,CAAC,SAAS,EAAE;4BAC5E,KAAI,CAAC,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC;4BACjC,KAAI,CAAC,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC;4BACnC,KAAI,CAAC,YAAY,CAAC,IAAI,mBAAW,EAAE,QAAQ,EAAE,KAAI,CAAC,SAAS,EAAE,SAAS,EAAE,KAAI,CAAC,UAAU,EAAE,EAAC,CAAC;yBAC9F;qBACJ,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;QAQC,0CAAmB;;;;;;;;gBACvB,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAO,aAAa,CAAC,CAAC,SAAS,CAAC;oBAChE,KAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAC,CAAS;wBACtC,IAAI,KAAI,CAAC,KAAK,KAAK,CAAC,EAAE;4BAClB,KAAI,CAAC,KAAK,GAAG,CAAC,CAAC;4BACf,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;yBAC3B;qBACJ,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;QAUC,sCAAe;;;;;;;;sBAAC,EAAe;;gBACnC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;oBACzB,IAAI,KAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,IAAI,EAAE;wBAAE,KAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,EAAE,QAAQ,EAAE,KAAI,CAAC,SAAS,EAAE,SAAS,EAAE,KAAI,CAAC,UAAU,EAAE,CAAC;qBAAE;oBACtH,IAAI,KAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,EAAE;wBAAE,KAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,KAAI,CAAC,KAAK,CAAC;qBAAE;oBACpE,IAAI,KAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,IAAI,EAAE;wBAAE,KAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC;qBAAE;oBACpF,IAAI,KAAI,CAAC,IAAI,IAAI,IAAI,EAAE;wBAAE,KAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,KAAI,CAAC,IAAI,CAAC;qBAAE;oBAC5D,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE,EAAE,KAAI,CAAC,QAAQ,CAAC,CAAC;oBACjE,KAAI,CAAC,qBAAqB,EAAE,CAAC;oBAC7B,KAAI,CAAC,qBAAqB,EAAE,CAAC;oBAC7B,KAAI,CAAC,mBAAmB,EAAE,CAAC;oBAC3B,KAAI,CAAC,oBAAoB,EAAE,CAAC;iBAC/B,CAAC,CAAC;;;;;;;;QAQC,mCAAY;;;;;;;gBAChB,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,QAAQ,IAAI,OAAO,IAAI,CAAC,UAAU,KAAK,QAAQ,EAAE;oBAC3E,OAAO;iBACV;gBACD,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;oBACvB,QAAQ,EAAE,IAAI,CAAC,SAAS;oBACxB,SAAS,EAAE,IAAI,CAAC,UAAU;iBAC7B,CAAC,CAAC;;;oBA5ZVI,cAAS,SAAC;wBACP,QAAQ,EAAE,OAAO;wBACjB,SAAS,EAAE;4BACP,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,iBAAiB,CAAC,EAAE,UAAU,EAAE,iBAAiB,EAAE;4BACjF,EAAE,OAAO,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,iBAAiB,EAAE,UAAU,EAAE,YAAY,EAAE,cAAc,CAAC,EAAE,UAAU,EAAE,oBAAoB,EAAE;4BACjI;gCACI,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,iBAAiB,EAAE,UAAU;oCACzD,aAAa,CAAC,EAAE,UAAU,EAAE,qBAAqB;6BACxD;4BACD,EAAE,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,iBAAiB,EAAE,UAAU,CAAC,EAAE,UAAU,EAAE,mBAAmB,EAAE;4BACjG,EAAE,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,iBAAiB,EAAE,UAAU,CAAC,EAAE,UAAU,EAAE,qBAAqB,EAAE;4BACrG,EAAE,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,iBAAiB,EAAE,UAAU,EAAE,YAAY,CAAC,EAAE,UAAU,EAAE,qBAAqB,EAAE;4BACnH,EAAE,OAAO,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,iBAAiB,EAAE,UAAU,EAAE,YAAY,CAAC,EAAE,UAAU,EAAE,sBAAsB,EAAE;yBACxH;wBACD,QAAQ,EAAE,8JAKT;wBACD,MAAM,EAAE,CAAC,uLAIR,CAAC;wBACF,aAAa,EAAEC,sBAAiB,CAAC,IAAI;wBACrC,eAAe,EAAEM,4BAAuB,CAAC,MAAM;qBAClD;;;;;wBA/DQ,UAAU;wBAHfC,WAAM;;;;sCA+ELC,gBAAW,SAAC,qBAAqB;iCACjCP,cAAS,SAAC,WAAW;+BACrBC,oBAAe,SAAC,kBAAkB;0BAWlCL,UAAK;+BASLA,UAAK;gCAYLA,UAAK;8BAYLA,UAAK;2BASLA,UAAK;mCAcLC,WAAM;mCAQNA,WAAM;+BASNA,WAAM;kCASNA,WAAM;oCASNA,WAAM;mCASNA,WAAM;kCASNA,WAAM;mCASNA,WAAM;iCAUNA,WAAM;iCAQNA,WAAM;iCAQNA,WAAM;;2BA3PX;;;;;;;;;;;AA+dA,mCAAsC,CAAoB,EAAE,CAAa,IAAoB,OAAO,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,EAAE;;;;;;;;;;;AAYhI,mCAAsC,CAAoB,EAAE,CAAa,EACrE,EAAiB,IAAoB,OAAO,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;;;;;;;;;;AAWhF,iCAAoC,CAAoB,EAAE,CAAa,IAAkB,OAAO,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAE;;;;;;;;;AAU1H,+BAAkC,CAAoB,IAAgB,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE;;;;;;;;;;;;AAa1F,kCAAqC,CAAoB,EAAE,CAAa,EAAE,CAAe,EAAE,CAAiB;QACxG,OAAO,CAAC,CAAC,mBAAmB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;KACzC;;;;;;;;;;;AAYD,mCAAsC,CAAoB,EAAE,CAAa,EAAE,CAAe;QACtF,OAAO,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KACvC;;;;;;;;;;;AAYD,oCAAuC,CAAoB,EAAE,CAAa,EAAE,CAAe;QACvF,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KACxC;;;;;;AC5iBD;;;IAQA,qBAAI,OAAO,GAAG,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA4EZ,2BAAsB,aAA2B,EAAY,aAA+B;YAAtE,kBAAa,GAAb,aAAa,CAAc;YAAY,kBAAa,GAAb,aAAa,CAAkB;4BAvCvE,IAAI;mCACG,KAAK;YAuC7B,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC;SACxB;QA1BD,sBACe,sCAAO;;;;;;;;;;;;;;gBADtB,cACoC,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;;;;0BACpC,GAAY,IAAI,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;;;WADA;8BAShD,iCAAE;;;;;;;8BAAa,OAAO,IAAI,CAAC,GAAG,CAAC;;;;;;;;;;QA2BnC,oCAAQ;;;;;;;gBACX,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;gBACrF,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAClC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;;;;;;;;;;QAUzB,uCAAW;;;;;;;;sBAAC,OAA6C;gBAC5D,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;oBAAE,OAAO;iBAAE;gBACtC,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;oBACpB,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;wBAC1C,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC;qBACjC,CAAC,CAAC;iBACN;;;;;;;;;QASE,uCAAW;;;;;;;;gBACd,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;;;oBAzF5CF,cAAS,SAAC;wBACP,QAAQ,EAAE,aAAa;qBAC1B;;;;;wBArCQ,YAAY;wBADOQ,qBAAgB;;;;+BAgDvCF,oBAAe,SAAC,kBAAkB;8BAWlCL,UAAK;;gCA5DV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QC8C2CR,yCAAiB;;;;;;;;;;;;;QAkPxD,+BAAY,aAA6B,EAAE,aAA+B;YAA1E,YACI,kBAAM,aAAa,EAAE,aAAa,CAAC,SACtC;uCA/O4B,IAAI;0CACqB,oBAAoB,CAAC,SAAS;wCAClC,kBAAkB,CAAC,eAAe;0CAQpD,KAAK;2CACJ,EAAE;yCACiB,IAAI,GAAG,CAAiB;gBACxE,CAAC,EAAE,EAAE,wBAAwB,CAAC;gBAC9B,CAAC,GAAG,EAAE,yBAAyB,CAAC;gBAChC,CAAC,MAAM,CAAC,gBAAgB,EAAG,wBAAwB,CAAC;aACvD,CAAC;iCACqB,IAAI;;SA8N1B;QAlND,sBACe,qDAAkB;;;;;;;;;;;;;;gBADjC,cAC2D,OAAO,IAAI,CAAC,mBAAmB,CAAC,EAAE;;;;0BAC3D,GAAuB,IAAI,IAAI,CAAC,mBAAmB,GAAG,GAAG,CAAC;;;WADC;QAS7F,sBACe,oDAAiB;;;;;;;;;;;;;gBADhC,cAC+C,OAAO,IAAI,CAAC,kBAAkB,CAAC,EAAE;;;;0BAC/C,GAAY,IAAI,IAAI,CAAC,kBAAkB,GAAG,GAAG,CAAC;;;WADC;QAQhF,sBACe,uDAAoB;;;;;;;;;;;gBADnC,cAC+D,OAAO,IAAI,CAAC,qBAAqB,CAAC,EAAE;;;;0BAC/D,GAAyB,IAAI,IAAI,CAAC,qBAAqB,GAAG,GAAG,CAAC;;;WADC;QASnG,sBACe,uDAAoB;;;;;;;;;;;;;gBADnC,cAC2F,OAAO,IAAI,CAAC,qBAAqB,CAAC,EAAE;;;;0BAC3F,GAAqD;gBACjF,IAAI,IAAI,CAAC,qBAAqB,EAAE;oBAC5B,OACI,IAAI,KAAK,CAAC,4IACyB,CAAC,EACtC;iBACL;gBACD,IAAI,CAAC,qBAAqB,GAAG,GAAG,CAAC;;;;WARsF;QAiB/H,sBACe,wDAAqB;;;;;;;;;;;;;gBADpC,cACkD,OAAO,IAAI,CAAC,sBAAsB,CAAC,EAAE;;;;0BAClD,GAAW,IAAI,IAAI,CAAC,sBAAsB,GAAG,GAAG,CAAC;;;WADC;QAUvF,sBACe,sDAAmB;;;;;;;;;;;;;;;gBADlC,cAC6D,OAAO,IAAI,CAAC,oBAAoB,CAAC,EAAE;;;;0BAC7D,GAAwB,IAAI,IAAI,CAAC,oBAAoB,GAAG,GAAG,CAAC;;;WADC;QAQhG,sBACe,2CAAQ;;;;;;;;;;;gBADvB,cACqC,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;;;0BACrC,GAAW,IAAI,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;;;WADC;QAS7D,sBACe,2CAAQ;;;;;;;;;;;;;gBADvB,cAC8C,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;;;0BAC9C,GAAoB,IAAI,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;;;WADC;QAQtE,sBACe,8CAAW;;;;;;;;;;;gBAD1B,cACwC,OAAO,IAAI,CAAC,YAAY,CAAC,EAAE;;;;0BACxC,GAAW,IAAI,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;;;WADC;QASnE,sBACe,qDAAkB;;;;;;;;;;;;;gBADjC,cAC+C,OAAO,IAAI,CAAC,mBAAmB,CAAC,EAAE;;;;0BAC/C,GAAW,IAAI,IAAI,CAAC,mBAAmB,GAAG,GAAG,CAAC;;;WADC;QAQjF,sBACe,uDAAoB;;;;;;;;;;;gBADnC,cAC+D,OAAO,IAAI,CAAC,qBAAqB,CAAC,EAAE;;;;0BAC/D,GAA0B,IAAI,IAAI,CAAC,qBAAqB,GAAG,GAAG,CAAC;;;WADA;QASnG,sBACe,yCAAM;;;;;;;;;;;;;gBADrB,cACmD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE;;;;0BACnD,GAA4B,IAAI,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;;;WADA;QASzE,sBACe,wDAAqB;;;;;;;;;;;;;gBADpC,cACkD,OAAO,IAAI,CAAC,qBAAqB,CAAC,EAAE;;;;0BACjD,GAAY;;gBACzC,IAAI,CAAC,qBAAqB,GAAG,GAAG,CAAC;gBACjC,IAAI,GAAG,EAAE;oBACL,IAAI,CAAC,qBAAqB,GAAG,UAAC,CAAgB,EAAE,IAAqB;wBACjE,OAAO,qBAAqB,CAAC,uBAAuB,CAChD,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,KAAI,CAAC,sBAAsB,EAAE,KAAI,CAAC,oBAAoB,CAAC,CAAC;qBAC/E,CAAC;iBACL;;;;WAR6E;QAgBtF,sBACe,yCAAM;;;;;;;;;;;gBADrB,cACkC,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE;;;;0BAClC,GAAW,IAAI,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;;;WADA;QASxD,sBACe,8CAAW;;;;;;;;;;;;;gBAD1B,cACwC,OAAO,IAAI,CAAC,YAAY,CAAC,EAAE;;;;0BACxC,GAAY,IAAI,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;;;WADA;;;;;;;;;;;;;;;;QAkBrD,6CAAuB;;;;;;;;;;;;;;;sBAAC,IAAY,EAAE,IAAqB,EAChC,cAAsB,EAAE,MAA2B;gBACxF,qBAAM,EAAE,GAAW,cAAc,CAAC;gBAClC,qBAAM,OAAO,GAAW,EAAE,GAAG,IAAI,CAAC;gBAClC,qBAAM,KAAK,GAAW,IAAI,CAAC;gBAC3B,qBAAM,CAAC,GAAW,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;gBAC1D,qBAAM,CAAC,GAAW,CAAC,GAAG,CAAC,CAAC;gBACxB,qBAAI,SAAiB,CAAC;gBACtB,MAAM,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC;oBAChB,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;wBAAE,SAAS,GAAG,CAAC,CAAC;qBAAE;iBACnD,CAAC,CAAC;gBACH,IAAI,CAAC,SAAS,EAAE;oBAAE,SAAS,GAAG,wBAAwB,CAAC;iBAAE;;gBAGzD,qBAAM,GAAG,GAAe,CAAC,oDAAkD,CAAC,kBAAa,CAAC,OAAI;oBAC1F,iBAAe,CAAC,cAAS,CAAC,aAAQ,CAAC,gBAAW,SAAS,QAAK;oBAC5D,iBAAe,CAAC,cAAS,CAAC,cAAQ,CAAC,GAAG,OAAO,iBAAW,SAAS,QAAK;oBACtE,QAAQ,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;gBACpC,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;gBAC5C,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC;gBACrC,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;;;;;;;;;;QA+BjB,2CAAW;;;;;;;;sBAAC,OAA6C;gBAC5D,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;oBAAE,OAAO;iBAAE;gBACtC,IAAI,OAAO,CAAC,oBAAoB,CAAC,EAAE;oBAC/B,OACI,IAAI,KAAK,CAAC,8FAA8F,CAAC,EAC3G;iBACL;gBAED,qBAAM,OAAO,GAAoB,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;gBAClD,IAAI,OAAO,CAAC,mBAAmB,CAAC,EAAE;oBAAE,OAAO,CAAC,iBAAiB,GAAG,IAAI,CAAC,kBAAkB,CAAC;iBAAE;gBAC1F,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE;oBAAE,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;iBAAE;gBAC/D,IAAI,OAAO,CAAC,aAAa,CAAC,EAAE;oBAAE,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;iBAAE;gBACxE,IAAI,OAAO,CAAC,sBAAsB,CAAC,EAAE;oBAAE,OAAO,CAAC,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC;iBAAE;gBACnG,IAAI,OAAO,CAAC,QAAQ,CAAC,EAAE;oBAAE,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;iBAAE;gBACzD,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;oBAAE,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;iBAAE;gBAE5D,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,CAAQ;oBAClD,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;iBACzB,CAAC,CAAC;;;oBAtRVO,cAAS,SAAC;wBACP,QAAQ,EAAE,iBAAiB;qBAC9B;;;;;wBAnCQ,cAAc;wBARKQ,qBAAgB;;;;yCA8EvCP,UAAK;wCAULA,UAAK;2CASLA,UAAK;2CAULA,UAAK;4CAkBLA,UAAK;0CAWLA,UAAK;+BASLA,UAAK;+BAULA,UAAK;kCASLA,UAAK;yCAULA,UAAK;2CASLA,UAAK;6BAULA,UAAK;4CAULA,UAAK;6BAiBLA,UAAK;kCAULA,UAAK;;oCAxOV;MA8C2C,iBAAiB;;;;;;AC9C5D,IAYA,qBAAI,SAAS,GAAG,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAsUd,6BAAoB,eAA+B,EAAU,aAA+B;YAAxE,oBAAe,GAAf,eAAe,CAAgB;YAAU,kBAAa,GAAb,aAAa,CAAkB;kCAnSnE,KAAK;mCAGJ,KAAK;2BACG,EAAE;;;;;;6BAaR,IAAI;;;;;;6BAOJ,KAAK;;;;;;;4BAQN,KAAK;;;;;;;;;;4BAyBL,KAAK;;;;;;4BAmBa,IAAI,GAAG,EAAe;;;;;;;;;;;;;;yBAeD,EAAE;;;;;;+BAc7B,IAAI;;;;;;yBAqDI,IAAIF,iBAAY,EAAiB;;;;;;4BAO9B,IAAIA,iBAAY,EAAiB;;;;;;wBAOrC,IAAIA,iBAAY,EAAiB;;;;;;2BAO9B,IAAIA,iBAAY,EAAiB;;;;;;6BAO/B,IAAIA,iBAAY,EAAiB;;;;;;6BAOjC,IAAIA,iBAAY,EAAiB;;;;;;6BAOjC,IAAIA,iBAAY,EAAiB;;;;;;4BAOlC,IAAIA,iBAAY,EAAiB;;;;;;6BAOhC,IAAIA,iBAAY,EAAiB;;;;;;2BAOnC,IAAIA,iBAAY,EAAiB;;;;;;8BAQ9B,IAAIA,iBAAY,EAAiB;;;;;;+BAOhC,IAAIA,iBAAY,EAAiB;YAwDlF,IAAI,CAAC,GAAG,GAAG,SAAS,EAAE,CAAC;SAC1B;8BA9CU,+CAAc;;;;;;8BAAc,OAAO,IAAI,CAAC,eAAe,CAAC;;;;8BAQxD,mCAAE;;;;;;;8BAAa,OAAO,IAAI,CAAC,GAAG,CAAC;;;;8BAQ/B,2CAAU;;;;;;;8BAAa,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;;;;8BAQlD,8CAAa;;;;;;;8BAAc,OAAO,IAAI,CAAC,cAAc,CAAC;;;;8BAQtD,wCAAO;;;;;;;8BAAa,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;;;;;;;;;;;;;;QAyBpD,gDAAkB;;;;;;YAAlB;gBACI,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,aAAa,EAAE;oBACxD,qBAAM,UAAU,GAAW,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC;oBAC1F,IAAI,UAAU,CAAC,WAAW,EAAE,KAAK,aAAa,EAAE;wBAC5C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;wBAC3B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;qBACxG;iBACJ;gBACD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;oBACvB,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBACtC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;oBAC5B,IAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC5B;gBACD,OAAO;aACV;;;;;;;;;;;;;;;;QASD,yCAAW;;;;;;;;YAAX,UAAY,OAAsB;gBAC9B,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;oBAAE,OAAO;iBAAE;gBAEtC,qBAAM,CAAC,GAAoB,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;gBAClE,IAAI,CAAC,IAAI,IAAI,EAAE;oBAAE,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;iBAAE;gBAC5D,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE;oBACvD,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;iBAC5C;aAEJ;;;;;;;;;;;;;;QAQD,yCAAW;;;;;;;YAAX;gBACI,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;gBACzC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,WAAW,EAAE,GAAA,CAAC,CAAC;aAIhD;;;;;;;QAWO,+CAAiB;;;;;;;;gBACrB,qBAAM,YAAY,GAAqC,UAAA,CAAC;oBACpD,OAAO;wBACH,OAAO,EAAE,KAAI;wBACb,KAAK,EAAE,CAAC;qBACX,CAAC;iBACL,CAAC;gBACF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,EAAc;oBAEjG,IAAI,KAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;wBACvB,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,eAAe,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC;qBACxE;oBACD,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;iBACrC,CAAC,CAAC,CAAC;gBACJ,qBAAM,QAAQ,GAAG;oBACb,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACvF,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBAC/E,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACrF,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACzF,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACzF,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACzF,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACvF,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACzF,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACrF,EAAE,IAAI,EAAE,YAAY,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBAC3F,EAAE,IAAI,EAAE,aAAa,EAAE,OAAO,EAAE,UAAC,EAAiB,IAAK,OAAA,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,GAAA,EAAE;iBACrF,CAAC;gBACF,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAG;oBACjB,qBAAM,EAAE,GAAG,KAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,GAAG,CAAC,IAAI,EAAE,KAAI,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBAC7F,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBACzB,CAAC,CAAC;;;;;;;;;;QAYC,sDAAwB;;;;;;;;sBAAC,OAAsB;gBACnD,qBAAM,OAAO,GAAoB,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;gBAClD,qBAAI,UAAU,GAAY,KAAK,CAAC;gBAChC,IAAI,OAAO,CAAC,WAAW,CAAC,EAAE;oBAAE,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBACpF,IAAI,OAAO,CAAC,WAAW,CAAC,EAAE;oBAAE,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBACpF,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE;oBAAE,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBACjF,IAAI,OAAO,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,aAAa,CAAC,EAAE;oBAChD,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBACnC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;oBACvC,UAAU,GAAG,IAAI,CAAC;iBACrB;gBACD,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE;oBAAE,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBACjF,IAAI,OAAO,CAAC,cAAc,CAAC,EAAE;oBAAE,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBAC7F,IAAI,OAAO,CAAC,cAAc,CAAC,EAAE;oBAAE,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBAC7F,IAAI,OAAO,CAAC,aAAa,CAAC,EAAE;oBAAE,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBAC1F,IAAI,OAAO,CAAC,WAAW,CAAC,EAAE;oBAAE,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBACpF,IAAI,OAAO,CAAC,aAAa,CAAC,IAAI,OAAO,CAAC,eAAe,CAAC,EAAE;oBACpD,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;oBACvC,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;oBAC3C,UAAU,GAAG,IAAI,CAAC;iBACrB;gBACD,IAAI,OAAO,CAAC,cAAc,CAAC,EAAE;oBAAE,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBAC7F,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;oBAAE,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBACxE,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;oBAAE,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBAC9E,IAAI,OAAO,CAAC,QAAQ,CAAC,EAAE;oBAAE,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBAC3E,OAAO,UAAU,GAAG,OAAO,GAAG,IAAI,CAAC;;;oBApb1CC,cAAS,SAAC;wBACP,QAAQ,EAAE,eAAe;qBAC5B;;;;;wBAhCQ,cAAc;wBAR6BQ,qBAAgB;;;;+BAuD/DC,iBAAY,SAAC,gBAAgB;gCAQ7BR,UAAK;gCAOLA,UAAK;+BAQLA,UAAK;gCAOLA,UAAK;kCAOLA,UAAK;+BAWLA,UAAK;mCAMLA,UAAK;mCAMLA,UAAK;+BAOLA,UAAK;4BAeLA,UAAK;gCAOLA,UAAK;kCAOLA,UAAK;kCAOLA,UAAK;oCAOLA,UAAK;mCAOLA,UAAK;4BAOLA,UAAK;8BAOLA,UAAK;6BAOLA,UAAK;4BAWLC,WAAM;+BAONA,WAAM;2BAONA,WAAM;8BAONA,WAAM;gCAONA,WAAM;gCAONA,WAAM;gCAONA,WAAM;+BAONA,WAAM;gCAONA,WAAM;8BAONA,WAAM;iCAQNA,WAAM;kCAONA,WAAM;;kCA3RX;;;;;;;ACAA,IAYA,qBAAI,UAAU,GAAG,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAuRf,8BAAoB,gBAAiC,EAAU,aAA+B;YAA1E,qBAAgB,GAAhB,gBAAgB,CAAiB;YAAU,kBAAa,GAAb,aAAa,CAAkB;kCApPrE,KAAK;mCAGJ,KAAK;2BACG,EAAE;;;;;;6BAaR,IAAI;;;;;;6BAOJ,KAAK;;;;;;;4BAQN,KAAK;;;;;;;;;;4BAWL,KAAK;;;;;;4BAOa,IAAI,GAAG,EAAe;;;;;;;;wBASF,EAAE;;;;;;+BAO5B,IAAI;;;;;;yBAqDK,IAAIH,iBAAY,EAAkB;;;;;;4BAO/B,IAAIA,iBAAY,EAAkB;;;;;;wBAOtC,IAAIA,iBAAY,EAAkB;;;;;;2BAO/B,IAAIA,iBAAY,EAAkB;;;;;;6BAOhC,IAAIA,iBAAY,EAAkB;;;;;;6BAOlC,IAAIA,iBAAY,EAAkB;;;;;;6BAOlC,IAAIA,iBAAY,EAAkB;;;;;;4BAOnC,IAAIA,iBAAY,EAAkB;;;;;;6BAOjC,IAAIA,iBAAY,EAAkB;;;;;;2BAOpC,IAAIA,iBAAY,EAAkB;;;;;;8BAO/B,IAAIA,iBAAY,EAAkB;YAwDnF,IAAI,CAAC,GAAG,GAAG,UAAU,EAAE,CAAC;SAC3B;8BA9CU,gDAAc;;;;;;8BAAc,OAAO,IAAI,CAAC,eAAe,CAAC;;;;8BAQxD,oCAAE;;;;;;;8BAAa,OAAO,IAAI,CAAC,GAAG,CAAC;;;;8BAQ/B,4CAAU;;;;;;;8BAAa,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;;;;8BAQlD,+CAAa;;;;;;;8BAAc,OAAO,IAAI,CAAC,cAAc,CAAC;;;;8BAQtD,yCAAO;;;;;;;8BAAa,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;;;;;;;;;;;;;;QAyBpD,iDAAkB;;;;;;YAAlB;gBACI,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,aAAa,EAAE;oBACxD,qBAAM,UAAU,GAAW,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC;oBAC1F,IAAI,UAAU,CAAC,WAAW,EAAE,KAAK,aAAa,EAAE;wBAC5C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;wBAC3B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;qBACxG;iBACJ;gBACD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;oBACvB,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;oBACxC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;oBAC5B,IAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC5B;gBACD,OAAO;aACV;;;;;;;;;;;;;;;;QASD,0CAAW;;;;;;;;YAAX,UAAY,OAAsB;gBAC9B,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;oBAAE,OAAO;iBAAE;gBAEtC,qBAAM,CAAC,GAAqB,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;gBACpE,IAAI,CAAC,IAAI,IAAI,EAAE;oBACX,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;iBAC7C;gBACD,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,EAAE;oBACrD,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;iBAC9C;aACJ;;;;;;;;;;;;;;QAQD,0CAAW;;;;;;;YAAX;gBACI,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gBAC3C,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,WAAW,EAAE,GAAA,CAAC,CAAC;aAIhD;;;;;;;QAWO,gDAAiB;;;;;;;;gBACrB,qBAAM,YAAY,GAAsC,UAAA,CAAC;oBACrD,OAAO;wBACH,QAAQ,EAAE,KAAI;wBACd,KAAK,EAAE,CAAC;qBACX,CAAC;iBACL,CAAC;gBACF,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,EAAc;oBAChF,IAAI,KAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;wBACvB,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC;qBACzE;oBACD,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;iBACrC,CAAC,CAAC;gBACH,qBAAM,QAAQ,GAAG;oBACb,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACvF,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBAC/E,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACrF,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACzF,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACzF,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACzF,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACvF,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACzF,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;oBACrF,EAAE,IAAI,EAAE,YAAY,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,GAAA,EAAE;iBAC9F,CAAC;gBACF,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAG;oBACjB,qBAAM,EAAE,GAAG,KAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,GAAG,CAAC,IAAI,EAAE,KAAI,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBAC9F,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBACzB,CAAC,CAAC;;;;;;;;;;QAYC,wDAAyB;;;;;;;;sBAAC,OAAsB;gBACpD,qBAAM,OAAO,GAAqB,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;gBACnD,qBAAI,UAAU,GAAY,KAAK,CAAC;gBAChC,IAAI,OAAO,CAAC,WAAW,CAAC,EAAE;oBAAE,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBACpF,IAAI,OAAO,CAAC,WAAW,CAAC,EAAE;oBAAE,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBACpF,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE;oBAAE,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBACjF,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE;oBAAE,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBACjF,IAAI,OAAO,CAAC,aAAa,CAAC,EAAE;oBAAE,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBAC1F,IAAI,OAAO,CAAC,aAAa,CAAC,EAAE;oBAAE,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBAC1F,IAAI,OAAO,CAAC,eAAe,CAAC,EAAE;oBAAE,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBAChG,IAAI,OAAO,CAAC,cAAc,CAAC,EAAE;oBAAE,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBAC7F,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;oBAAE,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBACxE,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;oBAAE,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBAC9E,IAAI,OAAO,CAAC,QAAQ,CAAC,EAAE;oBAAE,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAAC,UAAU,GAAG,IAAI,CAAC;iBAAE;gBAC3E,OAAO,UAAU,GAAG,OAAO,GAAG,IAAI,CAAC;;;oBAzX1CC,cAAS,SAAC;wBACP,QAAQ,EAAE,gBAAgB;qBAC7B;;;;;wBAjCQ,eAAe;wBAP4BQ,qBAAgB;;;;+BAuD/DC,iBAAY,SAAC,gBAAgB;gCAQ7BR,UAAK;gCAOLA,UAAK;+BAQLA,UAAK;+BAWLA,UAAK;+BAOLA,UAAK;2BASLA,UAAK;kCAOLA,UAAK;kCAOLA,UAAK;oCAOLA,UAAK;mCAOLA,UAAK;4BAOLA,UAAK;8BAOLA,UAAK;6BAOLA,UAAK;4BAWLC,WAAM;+BAONA,WAAM;2BAONA,WAAM;8BAONA,WAAM;gCAONA,WAAM;gCAONA,WAAM;gCAONA,WAAM;+BAONA,WAAM;gCAONA,WAAM;8BAONA,WAAM;iCAONA,WAAM;;mCA5OX;;;;;;;;;;ICyBA,qBAAIW,SAAO,GAAG,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA+QlB,iCACY,gBACA,eACA,iBACA,aACA;YAJA,mBAAc,GAAd,cAAc;YACd,kBAAa,GAAb,aAAa;YACb,oBAAe,GAAf,eAAe;YACf,gBAAW,GAAX,WAAW;YACX,UAAK,GAAL,KAAK;yCA7Oe,KAAK;0CACJ,EAAE;wCACiB,IAAI,GAAG,CAAiB;gBACxE,CAAC,EAAE,EAAE,wBAAwB,CAAC;gBAC9B,CAAC,GAAG,EAAE,yBAAyB,CAAC;gBAChC,CAAC,MAAM,CAAC,gBAAgB,EAAG,wBAAwB,CAAC;aACvD,CAAC;8BAE4B,KAAK;4BACO,IAAI,KAAK,EAAkB;gCACvB,IAAI,KAAK,EAAkB;;;;;;sCAQf,kBAAkB,CAAC,eAAe;;;;;;wCAe9B,oBAAoB,CAAC,SAAS;;;;;;oCA8ChD,KAAK;;;;;;4BAOd,GAAG;;;;;;+BAeA,IAAI;;;;;;0BAoET,CAAC;;;;;;;+BAQK,IAAI;;;;;;wCAY4B,IAAId,iBAAY,EAAmB;;;;;;+BAO/C,IAAIA,iBAAY,EAAgB;;;;;;2BAOpC,IAAIA,iBAAY,EAAgB;YAmCnF,IAAI,CAAC,GAAG,GAAGc,SAAO,EAAE,CAAC;SACxB;QAtMD,sBACe,yDAAoB;;;;;;;;;;;;;gBADnC,cAC2F,OAAO,IAAI,CAAC,qBAAqB,CAAC,EAAE;;;;0BAC3F,GAAqD;gBACjF,IAAI,IAAI,CAAC,qBAAqB,EAAE;oBAC5B,OACI,IAAI,KAAK,CAAC,4IACyB,CAAC,EACtC;iBACL;gBACD,IAAI,CAAC,qBAAqB,GAAG,GAAG,CAAC;;;;WARsF;QAiB/H,sBACe,0DAAqB;;;;;;;;;;;;;gBADpC,cACkD,OAAO,IAAI,CAAC,sBAAsB,CAAC,EAAE;;;;0BAClD,GAAW,IAAI,IAAI,CAAC,sBAAsB,GAAG,GAAG,CAAC;;;WADC;QAUvF,sBACe,wDAAmB;;;;;;;;;;;;;;;gBADlC,cAC6D,OAAO,IAAI,CAAC,oBAAoB,CAAC,EAAE;;;;0BAC7D,GAAwB,IAAI,IAAI,CAAC,oBAAoB,GAAG,GAAG,CAAC;;;WADC;QAqChG,sBACe,kDAAa;;;;;;;;;;;gBAD5B,cACwD,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;;;;0BAClD,GAA0B;gBAC/C,IAAI,IAAI,CAAC,UAAU,EAAE;oBACjB,CAAA,KAAA,IAAI,CAAC,YAAY,EAAC,IAAI,oBAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAE;oBACxC,CAAA,KAAA,IAAI,CAAC,QAAQ,EAAC,IAAI,oBAAI,GAAG,GAAE;iBAC9B;qBACI;oBACD,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBAChC;;;;;WARsE;QAgB/E,sBACe,2CAAM;;;;;;;;;;;gBADrB,cACmD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE;;;;0BACnD,GAA4B,IAAI,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;;;WADA;QASzE,sBACe,kEAA6B;;;;;;;;;;;;;gBAD5C,cAC0D,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE;;;;0BACtC,GAAY,IAAI,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;;;WADA;QASnF,sBACe,0DAAqB;;;;;;;;;;;;;gBADpC,cACkD,OAAO,IAAI,CAAC,qBAAqB,CAAC,EAAE;;;;0BACjD,GAAY;;gBACzC,IAAI,CAAC,qBAAqB,GAAG,GAAG,CAAC;gBACjC,IAAI,GAAG,EAAE;oBACL,IAAI,CAAC,qBAAqB,GAAG,UAAC,CAAgB,EAAE,IAAqB;wBACjE,OAAO,qBAAqB,CAAC,uBAAuB,CAChD,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,KAAI,CAAC,sBAAsB,EAAE,KAAI,CAAC,oBAAoB,CAAC,CAAC;qBAC/E,CAAC;iBACL;;;;WAR6E;8BAsE3E,uCAAE;;;;;;;8BAAa,OAAO,IAAI,CAAC,GAAG,CAAC;;;;;;;;;;;;QAqCnC,iDAAe;;;;;;;;sBAAC,GAAa;gBAChC,OAAO,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;;;;;;;;QAQ7C,oDAAkB;;;;;;;;gBACrB,qBAAM,YAAY,GAAkB;oBAChC,EAAE,EAAE,IAAI,CAAC,GAAG;iBACf,CAAC;gBACF,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;oBACzB,qBAAM,kBAAkB,GAAQ;wBAC5B,EAAE,EAAG,KAAI,CAAC,GAAG;wBACb,OAAO,EAAE,KAAI,CAAC,OAAO;qBACxB,CAAC;oBACF,IAAI,CAAC,KAAI,CAAC,gBAAgB,EAAE;wBACxB,KAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;wBAChD,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,aAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;wBAC3E,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,aAAa,CAAC;qBACtC;yBACI;wBACD,kBAAkB,CAAC,WAAW,GAAG,KAAI,CAAC,WAAW,CAAC;wBAClD,kBAAkB,CAAC,MAAM,GAAG,KAAI,CAAC,MAAM,CAAC;wBACxC,kBAAkB,CAAC,iBAAiB,GAAG,KAAI,CAAC,gBAAgB,CAAC;wBAC7D,kBAAkB,CAAC,oBAAoB,GAAG,KAAI,CAAC,oBAAoB,CAAC;wBACpE,kBAAkB,CAAC,QAAQ,GAAG,KAAI,CAAC,QAAQ,CAAC;wBAC5C,kBAAkB,CAAC,kBAAkB,GAAG,KAAI,CAAC,kBAAkB,CAAC;wBAChE,kBAAkB,CAAC,QAAQ,GAAG,KAAI,CAAC,eAAe,CAAC;wBACnD,kBAAkB,CAAC,oBAAoB,GAAG,KAAI,CAAC,oBAAoB,CAAC;wBACpE,kBAAkB,CAAC,qBAAqB,GAAG,KAAI,CAAC,qBAAqB,CAAC;wBACtE,KAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;wBAClD,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,eAAe,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;wBAC7E,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,eAAe,CAAC;qBACxC;oBACD,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,CAAC;wBACrB,CAAC,CAAC,UAAU,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;wBAC3B,IAAI,KAAI,CAAC,aAAa,EAAE;4BACpB,KAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,cAAM,OAAA,KAAI,CAAC,aAAa,EAAE,GAAA,CAAC,CAAC;yBAC5D;qBACJ,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;QASA,6CAAW;;;;;;;;gBACd,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,CAAC;oBACrB,CAAC,CAAC,MAAM,EAAE,CAAC;iBACd,CAAC,CAAC;;;;;;;;;;QAUA,6CAAW;;;;;;;;sBAAC,OAAwC;;gBACvD,qBAAI,gBAAgB,GAAY,KAAK,CAAC;gBACtC,qBAAM,CAAC,GAAoB;oBACvB,EAAE,EAAE,IAAI,CAAC,GAAG;iBACf,CAAC;gBACF,IAAI,OAAO,CAAC,eAAe,CAAC,EAAE;oBAC1B,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;wBACzB,KAAI,CAAC,aAAa,EAAE,CAAC;qBACxB,CAAC,CAAC;iBACN;gBACD,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE;oBACvD,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;wBACzB,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,CAAC,KAAI,CAAC,OAAO,CAAC,GAAA,CAAC,CAAC;qBAC5D,CAAC,CAAC;iBACN;gBACD,IAAI,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,WAAW,EAAE;oBACzE,IAAI,gBAAgB,IAAI,IAAI,CAAC,QAAQ,EAAE;wBACnC,CAAC,CAAC,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,CAAC;wBAC5C,gBAAgB,GAAG,IAAI,CAAC;qBAC3B;yBACI;wBACD,OAAO,IAAI,KAAK,CAAC,sEAAsE,CAAC,EAAE;qBAC7F;iBACJ;gBACD,IAAI,OAAO,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC,WAAW,IAAI,gBAAgB,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACtH,CAAC,CAAC,aAAa,GAAG,IAAI,CAAC,oBAAoB,CAAC;oBAC5C,gBAAgB,GAAG,IAAI,CAAC;iBAC3B;gBACD,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,WAAW,IAAI,gBAAgB,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAC9F,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC3B,gBAAgB,GAAG,IAAI,CAAC;iBAC3B;gBACD,IAAI,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,WAAW,IAAI,gBAAgB,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAClH,CAAC,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,KAAK,kBAAkB,CAAC,eAAe,CAAC;oBAC/E,gBAAgB,GAAG,IAAI,CAAC;iBAC3B;gBACD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,WAAW;qBACnD,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,WAAW,CAAC;qBAC9D,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,WAAW,CAC5D,EAAE;oBACE,OAAO,IAAI,KAAK,CAAC,2EAA2E,CAAC,EAAE;iBAClG;gBAED,IAAI,gBAAgB,EAAE;oBAClB,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;wBACzB,qBAAM,kBAAkB,GAAQ,EAAC,EAAE,EAAG,KAAI,CAAC,GAAG,EAAC,CAAC;wBAChD,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;qBACjD,CAAC,CAAC;iBACN;;;;;;;QAQE,0CAAQ;;;;;0BAAa,OAAO,iBAAiB,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;;;;;;;;;QAanE,mDAAiB;;;;;;;;sBAAC,CAAS;;gBAC/B,CAAC,CAAC,WAAW,CAAC,OAAO,EAAE,UAAC,CAAa;oBAAK,OAAA,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC;wBACxD,MAAM,EAAE,CAAC;wBACT,KAAK,EAAE,CAAC;wBACR,QAAQ,EAAE,KAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC,CAAC;wBACxD,MAAM,EAAE,KAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;qBACpD,CAAC;iBAAA,CAAC,CAAC;gBACR,CAAC,CAAC,WAAW,CAAC,SAAS,EAAE,UAAC,CAAa;oBAAK,OAAA,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC;wBACtD,MAAM,EAAE,CAAC;wBACT,KAAK,EAAE,CAAC;wBACR,QAAQ,EAAE,KAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC,CAAC;wBACxD,MAAM,EAAE,KAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;qBACpD,CAAC;iBAAA,CAAC,CAAC;;;;;;;;;;QAUJ,+CAAa;;;;;;;;;;gBACjB,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;oBAAE,OAAO;iBAAE;gBAC3C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,CAAC;oBACrB,qBAAM,OAAO,GAA0B,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,KAAI,CAAC,QAAQ,CAAC;;oBAGrG,qBAAM,EAAE,GAA2B,KAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,EAAE,KAAI,CAAC,QAAQ,CAAC,CAAC;;oBAGvF,EAAE,CAAC,IAAI,CAAC,UAAA,CAAC;wBACL,CAAC,CAAC,OAAO,CAAC,UAAA,MAAM;4BACX,KAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;yBACnC,CAAC,CAAC;wBACH,KAAI,CAAC,UAAU,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;qBACzD,CAAC,CAAC;iBACN,CAAC,CAAC;;;oBApbVb,cAAS,SAAC;wBACP,QAAQ,EAAE,oBAAoB;qBACjC;;;;;wBA1CQ,aAAa;wBACb,YAAY;wBACZ,cAAc;wBACd,UAAU;wBAbiDW,WAAM;;;;yCAgFrEV,UAAK;sCAQLA,UAAK;2CAOLA,UAAK;2CAQLA,UAAK;4CAkBLA,UAAK;0CAWLA,UAAK;uCASLA,UAAK;+BAOLA,UAAK;+BAQLA,UAAK;kCAOLA,UAAK;oCAOLA,UAAK;6BAiBLA,UAAK;oDAULA,UAAK;4CAULA,UAAK;8BAiBLA,UAAK;6BAOLA,UAAK;kCAQLA,UAAK;2CAYLC,WAAM;kCAONA,WAAM;8BAONA,WAAM;;sCA3QX;;;;;;;;;;ICuBA,qBAAIW,SAAO,GAAG,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAuMlB,kCACY,eACA,aACA;YAFA,kBAAa,GAAb,aAAa;YACb,gBAAW,GAAX,WAAW;YACX,UAAK,GAAL,KAAK;2BAnKwC,IAAI,KAAK,EAAkC;yCAE/C,IAAI,KAAK,EAAgB;mCAC3C,KAAK;mCACC;gBACrC,QAAQ,EAAE,EAAE;gBACZ,UAAU,EAAE,YAAY;gBACxB,YAAY,EAAE,CAAC;gBACf,WAAW,EAAE,SAAS;gBACtB,SAAS,EAAE,SAAS;aACvB;8BAC6B,KAAK;6BACS,IAAI,KAAK,EAAmB;iCACxB,IAAI,KAAK,EAAmB;;;;;gCAMrC,MAAM,CAAC,gBAAgB;;;;;gCAMvB,CAAC,CAAC;;;;;;+BAcH,IAAI;;;;;;8BAwBJ,KAAK;;;;;;gCAOH,IAAI;;;;;;0BAwBX,CAAC;;;;;;gCAW2B,IAAId,iBAAY,EAAiB;;;;;;mCAOrC,IAAIA,iBAAY,EAAiB;;;;;;oCAOhC,IAAIA,iBAAY,EAAiB;;;;;;mCAOlC,IAAIA,iBAAY,EAAiB;;;;;;oCAOhC,IAAIA,iBAAY,EAAiB;YA+BvF,IAAI,CAAC,GAAG,GAAGc,SAAO,EAAE,CAAC;SACxB;QAvHD,sBACe,oDAAc;;;;;;;;;;;gBAD7B,cAC0D,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;;;0BACpD,GAA2B;gBACjD,IAAI,IAAI,CAAC,UAAU,EAAE;oBACjB,CAAA,KAAA,IAAI,CAAC,aAAa,EAAC,IAAI,oBAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAE;oBACzC,CAAA,KAAA,IAAI,CAAC,SAAS,EAAC,IAAI,oBAAI,GAAG,GAAE;iBAC/B;qBACI;oBACD,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBACjC;;;;;WARyE;QA+BlF,sBACe,oEAA8B;;;;;;;;;;;;;gBAD7C,cAC2D,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE;;;;0BACtC,GAAY,IAAI,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;;;WADA;8BAoEzE,wCAAE;;;;;;;8BAAa,OAAO,IAAI,CAAC,GAAG,CAAC;;;;;;;;;;QA6BnC,qDAAkB;;;;;;;;gBACrB,qBAAM,YAAY,GAAkB;oBAChC,EAAE,EAAE,IAAI,CAAC,GAAG;iBACf,CAAC;gBACF,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;oBACzB,qBAAM,kBAAkB,GAAQ;wBAC5B,EAAE,EAAG,KAAI,CAAC,GAAG;wBACb,OAAO,EAAE,KAAI,CAAC,OAAO;wBACrB,WAAW,EAAE,KAAI,CAAC,WAAW;wBAC7B,MAAM,EAAE,KAAI,CAAC,MAAM;qBACtB,CAAC;oBACF,KAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;oBAChD,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,aAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;oBAE3E,OAAO,CAAC,GAAG,CAAC;wBACR,KAAI,CAAC,aAAa;wBAClB,KAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,UAAA,EAAE,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,EAAE,CAAC,GAAA,CAAC;qBAClE,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;wBACV,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;wBACnC,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBACzB,KAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,CAAC;4BAC5B,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;4BACjD,KAAI,CAAC,aAAa,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;yBACzC,CAAC,CAAC;wBACH,IAAI,KAAI,CAAC,cAAc,EAAE;4BACrB,KAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,cAAM,OAAA,KAAI,CAAC,cAAc,EAAE,GAAA,CAAC,CAAC;yBAC7D;qBACJ,CAAC,CAAC;oBACH,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,aAAa,CAAC;iBACtC,CAAC,CAAC;;;;;;;;QAQA,8CAAW;;;;;;;gBACd,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAE,GAAA,CAAC,CAAC;gBACzD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,CAAC;oBACrB,CAAC,CAAC,MAAM,EAAE,CAAC;iBACd,CAAC,CAAC;gBACH,IAAI,IAAI,CAAC,OAAO,EAAE;oBAAE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;iBAAE;;;;;;;;;QASzC,8CAAW;;;;;;;sBAAC,OAAwC;;gBACvD,IAAI,OAAO,CAAC,gBAAgB,CAAC,EAAE;oBAC3B,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;wBACzB,KAAI,CAAC,cAAc,EAAE,CAAC;qBACzB,CAAC,CAAC;iBACN;gBACD,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE;oBACvD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,CAAC,KAAI,CAAC,OAAO,CAAC,GAAA,CAAC,CAAC;iBAC5D;gBACD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,WAAW;qBACnD,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,WAAW,CAClE,EAAE;oBACE,OAAO,IAAI,KAAK,CAAC,2EAA2E,CAAC,EAAE;iBAClG;gBACD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,WAAW;qBAC3D,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC;qBAChE,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,WAAW,CACpE,EAAE;oBACE,IAAI,IAAI,CAAC,OAAO,EAAE;wBACd,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;qBAC7B;iBACJ;gBACD,IAAI,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAC1C,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC;iBAC5D;;;;;;;QAQE,2CAAQ;;;;;0BAAa,OAAO,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;;;;;;;;;QAapE,oDAAiB;;;;;;;;sBAAC,CAAU;;gBAChC,qBAAM,QAAQ,GAAG;oBACb,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,GAAA,EAAE;oBAC/F,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,GAAA,EAAE;oBACrG,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,GAAA,EAAE;oBACvG,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,GAAA,EAAE;oBACrG,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,GAAA,EAAE;iBAC1G,CAAC;gBACF,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAG,IAAK,OAAA,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,GAAA,CAAC,CAAC;;;;;;;;;QAS5D,6CAAU;;;;;;;sBAAC,EAAqB;;gBACpC,IAAI,IAAI,CAAC,UAAU,EAAE;oBACjB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAA,CAAC;wBAC7B,IAAI,KAAI,CAAC,YAAY,IAAI,CAAC,IAAI,KAAI,CAAC,YAAY,IAAI,CAAC,EAAE;4BAClD,qBAAM,KAAG,GAA6B,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;4BAC1D,qBAAM,QAAM,GAAG,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,GAAA,CAAC,CAAC;4BAC9C,KAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,GAAG,GAAA,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI;gCACtE,qBAAM,IAAI,GAAU,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC;gCAC7C,KAAK,qBAAI,CAAC,GAAG,CAAC,mBAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;;oCAE7C,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE;wCACzF,KAAI,CAAC,QAAQ,CAAC,KAAG,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,QAAM,CAAC,CAAC,CAAC,CAAC,CAAC;qCAC1C;iCACJ;6BACJ,CAAC,CAAC;yBACN;qBACJ,CAAC,CAAC;iBACN;;;;;;;;;QASG,2CAAQ;;;;;;;sBAAC,GAA6B,EAAE,GAAW,EAAE,IAAY;gBACrE,qBAAI,EAAE,GAAkB,IAAI,CAAC,YAAY,CAAC;gBAC1C,IAAI,EAAE,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAAE,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC;iBAAE;gBAC1E,IAAI,EAAE,IAAI,IAAI,EAAE;oBAAE,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC;iBAAE;gBAE9C,GAAG,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC;gBACjC,GAAG,CAAC,IAAI,GAAM,EAAE,CAAC,QAAQ,WAAM,EAAE,CAAC,UAAY,CAAC;gBAC/C,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC;gBACzB,qBAAM,YAAY,GAAW,EAAE,CAAC,YAAY,CAAC;gBAC7C,IAAI,IAAI,IAAI,YAAY,IAAI,YAAY,GAAG,CAAC,EAAE;oBACtC,GAAG,CAAC,SAAS,GAAG,YAAY,CAAC;oBAC7B,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC1C;gBACD,GAAG,CAAC,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC;gBAC7B,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;;;;;;;;;QAS7B,gDAAa;;;;;;;sBAAC,IAAa;;gBAC/B,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;;oBAEtB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;oBAClC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;oBAC7B,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC,SAAS,CAAC,UAAA,CAAC;wBAC5E,IAAI,KAAI,CAAC,eAAe,EAAE;4BACtB,qBAAM,GAAG,GAAa,KAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;4BACpE,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;yBACtC;qBACJ,CAAC,CAAC,CAAC;oBACJ,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC,SAAS,CAAC,UAAA,CAAC;wBAC5E,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;4BAC/C,qBAAM,GAAG,GAAa,KAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;4BACpE,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;4BAC3C,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;4BACnC,IAAI,CAAC,KAAI,CAAC,eAAe,EAAE;gCACvB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;gCACnC,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;6BAC/B;yBACJ;qBACJ,CAAC,CAAC,CAAC;oBACJ,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC,SAAS,CAAC,UAAA,CAAC;wBAC3E,IAAI,KAAI,CAAC,eAAe,EAAE;4BACtB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;4BAClC,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;yBAChC;qBACJ,CAAC,CAAC,CAAC;iBACP;qBACI;;oBAED,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAE,GAAA,CAAC,CAAC;oBACzD,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACrC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;oBAClC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;iBAChC;;;;;;;;;;QAUG,iDAAc;;;;;;;;;;gBAClB,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;oBAC5B,OAAO;iBACV;gBACD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,CAAC;oBACrB,qBAAM,QAAQ,GAA2B,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,KAAI,CAAC,SAAS,CAAC;oBACzG,IAAI,CAAC,KAAI,CAAC,UAAU,EAAE;wBAAE,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBAAE;;oBAGjD,qBAAM,EAAE,GAA4B,KAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;;oBAG9F,EAAE,CAAC,IAAI,CAAC,UAAA,CAAC;wBACL,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;4BACV,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gCAAE,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;6BAAE;4BAChH,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;yBAChC,CAAC,CAAC;wBACH,KAAI,CAAC,UAAU,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;wBACtD,IAAI,KAAI,CAAC,OAAO,EAAE;4BAAE,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC;yBAAE;qBAC/D,CAAC,CAAC;iBACN,CAAC,CAAC;;;oBA/ZVb,cAAS,SAAC;wBACP,QAAQ,EAAE,qBAAqB;qBAClC;;;;;wBAvCQ,YAAY;wBACZ,UAAU;wBAZiDW,WAAM;;;;mCA+ErEV,UAAK;mCAMLA,UAAK;mCAOLA,UAAK;kCAOLA,UAAK;qCAOLA,UAAK;iCAiBLA,UAAK;mCAOLA,UAAK;qDAQLA,UAAK;8BASLA,UAAK;6BAOLA,UAAK;mCAWLC,WAAM;sCAONA,WAAM;uCAONA,WAAM;sCAONA,WAAM;uCAONA,WAAM;;uCAnMX;;;;;;;;;;ICuBA,qBAAIW,SAAO,GAAG,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAuMlB,mCACY,eACA,aACA;YAFA,kBAAa,GAAb,aAAa;YACb,gBAAW,GAAX,WAAW;YACX,UAAK,GAAL,KAAK;2BAnKwC,IAAI,KAAK,EAAkC;yCAE/C,IAAI,KAAK,EAAgB;mCAC3C,KAAK;mCACC;gBACrC,QAAQ,EAAE,EAAE;gBACZ,UAAU,EAAE,YAAY;gBACxB,YAAY,EAAE,CAAC;gBACf,WAAW,EAAE,SAAS;gBACtB,SAAS,EAAE,SAAS;aACvB;8BAC6B,KAAK;8BACW,IAAI,KAAK,EAAoB;kCACzB,IAAI,KAAK,EAAoB;;;;;gCAMxC,MAAM,CAAC,gBAAgB;;;;;gCAMvB,CAAC,CAAC;;;;;;+BAcH,IAAI;;;;;;8BAwBJ,KAAK;;;;;;gCAOH,IAAI;;;;;;0BAwBX,CAAC;;;;;;iCAW6B,IAAId,iBAAY,EAAkB;;;;;;oCAOtC,IAAIA,iBAAY,EAAkB;;;;;;qCAOjC,IAAIA,iBAAY,EAAkB;;;;;;oCAOnC,IAAIA,iBAAY,EAAkB;;;;;;qCAOjC,IAAIA,iBAAY,EAAkB;YA+B1F,IAAI,CAAC,GAAG,GAAGc,SAAO,EAAE,CAAC;SACxB;QAvHD,sBACe,sDAAe;;;;;;;;;;;gBAD9B,cAC4D,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE;;;;0BACtD,GAA4B;gBACnD,IAAI,IAAI,CAAC,UAAU,EAAE;oBACjB,CAAA,KAAA,IAAI,CAAC,cAAc,EAAC,IAAI,oBAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAE;oBAC1C,CAAA,KAAA,IAAI,CAAC,UAAU,EAAC,IAAI,oBAAI,GAAG,GAAE;iBAChC;qBACI;oBACD,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBAClC;;;;;WAR4E;QA+BrF,sBACe,sEAA+B;;;;;;;;;;;;;gBAD9C,cAC4D,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE;;;;0BACtC,GAAY,IAAI,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;;;WADA;8BAoE1E,yCAAE;;;;;;;8BAAa,OAAO,IAAI,CAAC,GAAG,CAAC;;;;;;;;;;QA6BnC,sDAAkB;;;;;;;;gBACrB,qBAAM,YAAY,GAAkB;oBAChC,EAAE,EAAE,IAAI,CAAC,GAAG;iBACf,CAAC;gBACF,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;oBACzB,qBAAM,kBAAkB,GAAQ;wBAC5B,EAAE,EAAG,KAAI,CAAC,GAAG;wBACb,OAAO,EAAE,KAAI,CAAC,OAAO;wBACrB,WAAW,EAAE,KAAI,CAAC,WAAW;wBAC7B,MAAM,EAAE,KAAI,CAAC,MAAM;qBACtB,CAAC;oBACF,KAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;oBAChD,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,aAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;oBAE3E,OAAO,CAAC,GAAG,CAAC;wBACJ,KAAI,CAAC,aAAa;wBAClB,KAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,UAAA,EAAE,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,EAAE,CAAC,GAAA,CAAC;qBAClE,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;wBACV,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;wBACnC,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBACzB,KAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,CAAC;4BAC5B,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;4BACjD,KAAI,CAAC,aAAa,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;yBACzC,CAAC,CAAC;wBACH,IAAI,KAAI,CAAC,eAAe,EAAE;4BACtB,KAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,cAAM,OAAA,KAAI,CAAC,eAAe,EAAE,GAAA,CAAC,CAAC;yBAC9D;qBACJ,CAAC,CAAC;oBACP,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,aAAa,CAAC;iBACtC,CAAC,CAAC;;;;;;;;QAQA,+CAAW;;;;;;;gBACd,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAE,GAAA,CAAC,CAAC;gBACzD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,CAAC;oBACrB,CAAC,CAAC,MAAM,EAAE,CAAC;iBACd,CAAC,CAAC;gBACH,IAAI,IAAI,CAAC,OAAO,EAAE;oBAAE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;iBAAE;;;;;;;;;QASzC,+CAAW;;;;;;;sBAAC,OAAwC;;gBACvD,IAAI,OAAO,CAAC,iBAAiB,CAAC,EAAE;oBAC5B,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;wBACzB,KAAI,CAAC,eAAe,EAAE,CAAC;qBAC1B,CAAC,CAAC;iBACN;gBACD,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE;oBACvD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,CAAC,KAAI,CAAC,OAAO,CAAC,GAAA,CAAC,CAAC;iBAC5D;gBACD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,WAAW;qBACnD,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,WAAW,CAClE,EAAE;oBACE,OAAO,IAAI,KAAK,CAAC,2EAA2E,CAAC,EAAE;iBAClG;gBACD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,WAAW;qBAC3D,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC;qBAChE,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,WAAW,CACpE,EAAE;oBACE,IAAI,IAAI,CAAC,OAAO,EAAE;wBACd,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;qBAC7B;iBACJ;gBACD,IAAI,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAC1C,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC;iBAC5D;;;;;;;QAQE,4CAAQ;;;;;0BAAa,OAAO,mBAAmB,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;;;;;;;;;QAarE,qDAAiB;;;;;;;;sBAAC,CAAW;;gBACjC,qBAAM,QAAQ,GAAG;oBACb,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,GAAA,EAAE;oBACjG,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,GAAA,EAAE;oBACvG,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,GAAA,EAAE;oBACzG,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,GAAA,EAAE;oBACvG,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,UAAC,EAAc,IAAK,OAAA,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,GAAA,EAAE;iBAC5G,CAAC;gBACF,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAG,IAAK,OAAA,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,GAAA,CAAC,CAAC;;;;;;;;;QAS5D,8CAAU;;;;;;;sBAAC,EAAqB;;gBACpC,IAAI,IAAI,CAAC,UAAU,EAAE;oBACjB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAA,CAAC;wBAC7B,IAAI,KAAI,CAAC,YAAY,IAAI,CAAC,IAAI,KAAI,CAAC,YAAY,IAAI,CAAC,EAAE;4BAClD,qBAAM,KAAG,GAA6B,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;4BAC1D,qBAAM,QAAM,GAAG,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,GAAA,CAAC,CAAC;4BAC9C,KAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,GAAG,GAAA,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI;gCACtE,qBAAM,IAAI,GAAU,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC;gCAC7C,KAAK,qBAAI,CAAC,GAAG,CAAC,mBAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;;oCAE7C,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE;wCACzF,KAAI,CAAC,QAAQ,CAAC,KAAG,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,QAAM,CAAC,CAAC,CAAC,CAAC,CAAC;qCAC1C;iCACJ;6BACJ,CAAC,CAAC;yBACN;qBACJ,CAAC,CAAC;iBACN;;;;;;;;;QASG,4CAAQ;;;;;;;sBAAC,GAA6B,EAAE,GAAW,EAAE,IAAY;gBACrE,qBAAI,EAAE,GAAkB,IAAI,CAAC,YAAY,CAAC;gBAC1C,IAAI,EAAE,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAAE,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC;iBAAE;gBAC1E,IAAI,EAAE,IAAI,IAAI,EAAE;oBAAE,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC;iBAAE;gBAE9C,GAAG,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC;gBACjC,GAAG,CAAC,IAAI,GAAM,EAAE,CAAC,QAAQ,WAAM,EAAE,CAAC,UAAY,CAAC;gBAC/C,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC;gBACzB,qBAAM,YAAY,GAAW,EAAE,CAAC,YAAY,CAAC;gBAC7C,IAAI,IAAI,IAAI,YAAY,IAAI,YAAY,GAAG,CAAC,EAAE;oBACtC,GAAG,CAAC,SAAS,GAAG,YAAY,CAAC;oBAC7B,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC1C;gBACD,GAAG,CAAC,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC;gBAC7B,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;;;;;;;;;QAS7B,iDAAa;;;;;;;sBAAC,IAAa;;gBAC/B,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;;oBAEtB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;oBAClC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;oBAC7B,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC,SAAS,CAAC,UAAA,CAAC;wBAC7E,IAAI,KAAI,CAAC,eAAe,EAAE;4BACtB,qBAAM,GAAG,GAAa,KAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;4BACpE,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;yBACtC;qBACJ,CAAC,CAAC,CAAC;oBACJ,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC,SAAS,CAAC,UAAA,CAAC;wBAC7E,IAAI,CAAC,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;4BACjD,qBAAM,GAAG,GAAa,KAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;4BACpE,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;4BAC5C,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;4BACnC,IAAI,CAAC,KAAI,CAAC,eAAe,EAAE;gCACvB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;gCACnC,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;6BAC/B;yBACJ;qBACJ,CAAC,CAAC,CAAC;oBACJ,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC,SAAS,CAAC,UAAA,CAAC;wBAC5E,IAAI,KAAI,CAAC,eAAe,EAAE;4BACtB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;4BAClC,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;yBAChC;qBACJ,CAAC,CAAC,CAAC;iBACP;qBACI;;oBAED,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAE,GAAA,CAAC,CAAC;oBACzD,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACrC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;oBAClC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;iBAChC;;;;;;;;;;QAUG,mDAAe;;;;;;;;;;gBACnB,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;oBAC5B,OAAO;iBACV;gBACD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,CAAC;oBACrB,qBAAM,SAAS,GAA4B,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,KAAI,CAAC,UAAU,CAAC;oBAC7G,IAAI,CAAC,KAAI,CAAC,UAAU,EAAE;wBAAE,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBAAE;;oBAGjD,qBAAM,EAAE,GAA6C,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;;oBAGjH,EAAE,CAAC,IAAI,CAAC,UAAA,CAAC;wBACL,qBAAM,CAAC,GAAoB,IAAI,KAAK,EAAY,CAAC;wBACjD,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;4BACV,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gCACrB,qBAAI,OAAK,GAAW,EAAE,CAAC;gCACvB,qBAAM,WAAS,GAAoB,IAAI,KAAK,EAAY,CAAC;gCACzD,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC;oCACV,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oCACV,KAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;oCAC1B,WAAS,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;oCAC3B,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,OAAK,CAAC,MAAM,KAAK,CAAC,EAAE;wCAAE,OAAK,GAAG,CAAC,CAAC,KAAK,CAAC;qCAAE;iCACxF,CAAC,CAAC;gCACH,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,QAAQ,CAAC,mBAAmB,CAAC,WAAS,CAAC,EAAE,KAAK,EAAE,OAAK,EAAC,CAAC,CAAC;6BACnF;iCACI;gCACD,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gCACb,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;oCAAE,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;iCAAE;gCAChH,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;6BAChC;yBACJ,CAAC,CAAC;wBACH,KAAI,CAAC,UAAU,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;wBACtD,IAAI,KAAI,CAAC,OAAO,EAAE;4BAAE,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC;yBAAE;qBAC/D,CAAC,CAAC;iBACN,CAAC,CAAC;;;oBA9aVb,cAAS,SAAC;wBACP,QAAQ,EAAE,sBAAsB;qBACnC;;;;;wBAvCQ,YAAY;wBACZ,UAAU;wBAZiDW,WAAM;;;;mCA+ErEV,UAAK;mCAMLA,UAAK;mCAOLA,UAAK;kCAOLA,UAAK;sCAOLA,UAAK;iCAiBLA,UAAK;mCAOLA,UAAK;sDAQLA,UAAK;8BASLA,UAAK;6BAOLA,UAAK;oCAWLC,WAAM;uCAONA,WAAM;wCAONA,WAAM;uCAONA,WAAM;wCAONA,WAAM;;wCAnMX;;;;;;;ACAA;;;;;;;;;;;;oBASCJ,eAAU;;2BATX;;;;;;;;;;;8BAwCe,oCAAW;;;;;;;;;gBAClB,OAAO,EAAE,QAAQ,QAAQ,CAAC,KAAK,WAAW,CAAC,CAAC;;;;;;;;;;;;QAUzC,uCAAiB;;;;;;;;gBACpB,IAAI,QAAQ,QAAQ,CAAC,KAAK,WAAW,EAAE;oBACnC,OAAO,IAAI,CAAC;iBACf;gBACD,OAAO,QAAQ,CAAC;;;oBAzBvBA,eAAU;;0BA9BX;;;;;;;;;;;8BA2Ee,kCAAW;;;;;;;;;gBAClB,OAAO,EAAE,QAAQ,MAAM,CAAC,KAAK,WAAW,CAAC,CAAC;;;;;;;;;;;;QAUvC,mCAAe;;;;;;;;gBAClB,IAAI,QAAQ,MAAM,CAAC,KAAK,WAAW,EAAE;oBACjC,OAAO,IAAI,CAAC;iBACf;gBACD,OAAO,MAAM,CAAC;;;oBAzBrBA,eAAU;;wBAjEX;;;;;;;;;;;;;;;;;;;;;;;0BC0Ba,EAAE;+BAKG,kCAAkC;4BAKrB,cAAc,CAAC,KAAK;0BAKtC,EAAE;;;oBArBdA,eAAU;;qCApBX;;;;;IA+CA,qBAAM,qBAAqB,GAAG,IAAI,sBAAsB,EAAE,CAAC;;;;;;;QAQrBL,oCAAY;;;;;;;;;;QA4B9C,0BAAiC,OAA+B,EAAU,UAAqB,EAAU,YAAyB;YAAlI,YACI,iBAAO,SAIV;YALgC,aAAO,GAAP,OAAO,CAAwB;YAAU,gBAAU,GAAV,UAAU,CAAW;YAAU,kBAAY,GAAZ,YAAY,CAAa;YAE9H,IAAI,KAAI,CAAC,OAAO,KAAK,IAAI,IAAI,KAAI,CAAC,OAAO,KAAK,SAAS,EAAE;gBACrD,KAAI,CAAC,OAAO,GAAG,qBAAqB,CAAC;aACxC;;SACJ;8BAhBU,oCAAM;;;;;;;8BAA6B,OAAO,IAAI,CAAC,OAAO,CAAC;;;;;;;;;;QA2B3D,+BAAI;;;;;;;;gBACP,IAAI,IAAI,CAAC,qBAAqB,EAAE;oBAC5B,OAAO,IAAI,CAAC,qBAAqB,CAAC;iBACrC;gBAED,qBAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAC7E,MAAM,CAAC,IAAI,GAAG,iBAAiB,CAAC;gBAChC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;gBACpB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;gBACpB,qBAAM,YAAY,GAAG,qBAAmB,IAAI,IAAI,EAAE,CAAC,eAAe,EAAI,CAAC;gBACvE,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;gBAE7C,IAAI,CAAC,qBAAqB,GAAG,IAAI,OAAO,CAAO,UAAC,OAAiB,EAAE,MAAgB;oBAC/E,EAAM,KAAI,CAAC,UAAU,CAAC,eAAe,EAAE,GAAE,YAAY,CAAC,GAAG;wBACrD,OAAO,EAAE,CAAC;qBACb,CAAC;oBACF,MAAM,CAAC,OAAO,GAAG,UAAC,KAAY,IAAO,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;iBACzD,CAAC,CAAC;gBACH,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBAC/D,OAAO,IAAI,CAAC,qBAAqB,CAAC;;;;;;;;;;QAe9B,uCAAY;;;;;;;;sBAAC,YAAoB;gBACrC,qBAAM,YAAY,GAAmB,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,qBAAqB,CAAC,QAAQ,CAAC;gBAC/G,qBAAI,QAAgB,CAAC;gBAErB,QAAQ,YAAY;oBAChB,KAAK,cAAc,CAAC,IAAI;wBACpB,QAAQ,GAAG,EAAE,CAAC;wBACd,MAAM;oBACV,KAAK,cAAc,CAAC,IAAI;wBACpB,QAAQ,GAAG,OAAO,CAAC;wBACnB,MAAM;oBACV,KAAK,cAAc,CAAC,KAAK;wBACrB,QAAQ,GAAG,QAAQ,CAAC;wBACpB,MAAM;iBACb;gBAED,qBAAM,WAAW,GAAW,IAAI,CAAC,OAAO,CAAC,WAAW,IAAI,qBAAqB,CAAC,WAAW,CAAC;gBAC1F,qBAAM,WAAW,GAA8B;oBAC3C,QAAQ,EAAE,YAAY;iBACzB,CAAC;gBACF,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,EAAE,EAAE;oBAC5B,WAAW,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;iBAC/C;gBACD,qBAAM,MAAM,GAAW,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;qBAC1C,GAAG,CAAC,UAAC,CAAS,EAAE,CAAS;oBACtB,qBAAI,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC;oBAClC,OAAO,KAAK,IAAO,CAAC,SAAI,WAAW,CAAC,CAAC,CAAG,CAAC;iBAC5C,CAAC;qBACD,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,OAAU,QAAQ,UAAK,WAAW,GAAG,MAAQ,CAAC;;;oBA5GrDK,eAAU;;;;;wBA6BmC,sBAAsB,uBAAlDgB,aAAQ;wBAlFH,SAAS;wBAAE,WAAW;;;+BAD7C;MAuDsC,YAAY;;;;;;ACvDlD;;;;;;;;;;;;;;;;QAoCI,4BAAoB,WAAuB,EAAU,KAAa;YAA9C,gBAAW,GAAX,WAAW,CAAY;YAAU,UAAK,GAAL,KAAK,CAAQ;0BAbL,IAAI,GAAG,EAAyC;SAatC;;;;;;;;;QAShE,0CAAa;;;;;;;;sBAAC,IAAsB;gBACvC,qBAAM,OAAO,GAAuB,EAAE,CAAC;gBACvC,IAAI,OAAO,IAAI,CAAC,QAAQ,KAAK,QAAQ,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,QAAQ,EAAE;oBACzE,OAAO,CAAC,QAAQ,GAAG;wBACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;wBACvB,SAAS,EAAE,IAAI,CAAC,SAAS;qBAC5B,CAAC;iBACL;gBACD,IAAI,OAAO,IAAI,CAAC,iBAAiB,KAAK,WAAW,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;oBACpF,OAAO,CAAC,OAAO,GAAG,EAAE,CAAC;oBACrB,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAC,MAA8B;wBAC1D,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;4BACjB,KAAK,EAAE,MAAM,CAAC,KAAK;4BACnB,YAAY,EAAE,cAAQ,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;yBAC3D,CAAC,CAAC;qBACN,CAAC,CAAC;iBACN;gBACD,IAAI,IAAI,CAAC,WAAW,KAAK,EAAE,EAAE;oBACzB,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;iBAC1C;qBACI;oBACD,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBAC3B,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;iBAC1C;gBACD,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;oBAC9B,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;wBAAE,OAAO,CAAC,WAAW,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;qBAAE;oBAC1E,IAAI,IAAI,CAAC,OAAO,EAAE;wBAAE,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;qBAAE;oBAC3D,IAAI,IAAI,CAAC,OAAO,EAAE;wBAAE,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;qBAAE;iBAC9D;gBAED,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;gBAC/B,qBAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;gBAC/D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;;;;;;;;;;;QAYhC,kCAAK;;;;;;;;;sBAAC,IAAsB;gBAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,KAAK,EAAE,GAAA,CAAC,CAAC;;;;;;;;;;;;QAYjD,kDAAqB;;;;;;;;;;sBAAI,SAAiB,EAAE,aAA+B;;gBAC9E,qBAAM,mBAAmB,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC;gBAC3D,OAAOC,eAAU,CAAC,MAAM,CAAC,UAAC,QAAqB;oBAC3C,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAC,CAAa;wBAC9C,CAAC,CAAC,WAAW,CAAC,mBAAmB,EAAE,UAAC,CAAI,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAM,OAAA,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAA,CAAC,GAAA,CAAC,CAAC;qBACxF,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;;QAYA,6CAAgB;;;;;;;;;sBAAC,IAAsB;;gBAC1C,qBAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAChC,IAAI,CAAC,IAAI,IAAI,EAAE;oBACX,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC5B;gBACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAa;oBACxB,OAAO,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC;wBAClB,CAAC,CAAC,KAAK,EAAE,CAAC;wBACV,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;qBAC5B,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;;;QAYA,iCAAI;;;;;;;;;;sBAAC,IAAsB,EAAE,GAAc;gBAC9C,IAAI,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,KAAK,EAAE;;oBAEzC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,CAAsB,EAAE,CAAmB;wBAC5D,IAAI,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,EAAE;4BAClB,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;gCACJ,IAAI,CAAC,CAAC,MAAM,EAAE;oCACV,CAAC,CAAC,KAAK,EAAE,CAAC;oCACV,CAAC,CAAC,KAAK,EAAE,CAAC;iCACb;6BACJ,CAAC,CAAC;yBACN;qBACJ,CAAC,CAAC;iBACN;gBACD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC;oBAChC,qBAAM,OAAO,GAAuB,EAAE,CAAC;oBACvC,IAAI,IAAI,CAAC,WAAW,KAAK,EAAE,EAAE;wBACzB,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;qBAC1C;yBACI;wBACD,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;wBAC3B,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;qBAC1C;oBACD,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;oBAEtB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;wBACjC,CAAC,CAAC,WAAW,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;qBACzE;yBACI,IAAI,GAAG,EAAE;wBAIV,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;qBACtB;yBACI,IAAI,IAAI,CAAC,UAAU,EAAE;wBACtB,CAAC,CAAC,WAAW,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC;qBAC/F;oBACD,CAAC,CAAC,IAAI,EAAE,CAAC;iBACZ,CAAC,CAAC;;;;;;;;;;;;;QAcA,uCAAU;;;;;;;;;;;sBAAC,IAAsB,EAAE,OAA2B;gBACjE,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,CAAa,IAAK,OAAA,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,GAAA,CAAC,CAAC;;;;;;;;;;;QAYzE,wCAAW;;;;;;;;;sBAAC,IAAsB;gBACrC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,CAAa;oBAAK,OAAA,CAAC,CAAC,WAAW,CAAC;wBAC/D,QAAQ,EAAE,IAAI,CAAC,QAAQ;wBACvB,SAAS,EAAE,IAAI,CAAC,SAAS;qBAC5B,CAAC;iBAAA,CAAC,CAAC;;;oBAjMXjB,eAAU;;;;;wBAXF,UAAU;wBAPEa,WAAM;;;iCAA3B;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;QA2CI,2BAAoB,WAAuB,EACvB,eACA,iBACA;YAHA,gBAAW,GAAX,WAAW,CAAY;YACvB,kBAAa,GAAb,aAAa;YACb,oBAAe,GAAf,eAAe;YACf,UAAK,GAAL,KAAK;4BApBoC,IAAI,GAAG,EAAuC;SAqB1G;;;;;;;;;QAaM,qCAAS;;;;;;;;sBAAC,MAA0B;gBACvC,qBAAM,CAAC,GAAmB;oBACtB,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,EAAE;oBACpE,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,SAAS,EAAE,MAAM,CAAC,SAAS;oBAC3B,IAAI,EAAE,MAAM,CAAC,OAAO;oBACpB,QAAQ,EAAE,MAAM,CAAC,QAAQ;oBACzB,OAAO,EAAE,MAAM,CAAC,YAAY;oBAC5B,MAAM,EAAE,MAAM,CAAC,WAAW;iBAC7B,CAAC;gBACF,IAAI,MAAM,CAAC,KAAK,EAAE;oBAAE,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;iBAAE;gBAC7C,IAAI,MAAM,CAAC,MAAM,EAAE;oBAAE,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;iBAAE;gBAChD,IAAI,MAAM,CAAC,MAAM,EAAE;oBAAE,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;iBAAE;gBAChD,IAAI,MAAM,CAAC,QAAQ,EAAE;oBAAE,CAAC,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;iBAAE;;gBAGtD,qBAAI,aAAa,GAAoB,IAAI,CAAC;gBAC1C,IAAI,MAAM,CAAC,cAAc,EAAE;oBACvB,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;iBACxE;qBACI,IAAI,MAAM,CAAC,aAAa,EAAE;oBAC3B,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;iBACtE;qBACI;oBACD,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;iBACpD;gBAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;gBACzC,IAAI,MAAM,CAAC,QAAQ,EAAE;oBACjB,aAAa,CAAC,IAAI,CAAC,UAAC,CAAS;;;wBAGzB,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;wBAC7C,qBAAM,CAAC,GAAW;4BACd,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC,QAAQ,CAAC,iBAAiB,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC;4BACnH,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC,QAAQ,CAAC,iBAAiB,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC;yBACvH,CAAC;wBACF,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;qBAClB,CAAC,CAAC;iBACN;;;;;;;;;;;;QAYE,iDAAqB;;;;;;;;;;sBAAI,SAAiB,EAAE,MAA0B;;gBACzE,qBAAM,CAAC,GAAe,IAAIK,YAAO,EAAK,CAAC;gBACvC,IAAI,SAAS,KAAK,WAAW,EAAE;oBAC3B,OAAO,CAAC,CAAC,YAAY,EAAE,CAAC;iBAC3B;gBACD,IAAI,SAAS,KAAK,YAAY,EAAE;oBAC5B,OAAO,CAAC,CAAC,YAAY,EAAE,CAAC;iBAC3B;gBAMD,OAAOD,eAAU,CAAC,MAAM,CAAC,UAAC,QAAqB;oBAC3C,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS;wBACrC,CAAC,CAAC,WAAW,CAAC,SAAS,EAAE,UAAC,CAAI;4BAAK,OAAA,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC;gCAC9C,OAAA,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;6BAAA,CAAC;yBAAA,CAAC,CAAC;qBAC1B,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;QAWA,wCAAY;;;;;;;;sBAAC,MAA0B;;gBAC1C,qBAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACpC,qBAAI,CAAC,GAAkB,OAAO,CAAC,OAAO,EAAE,CAAC;gBACzC,IAAI,CAAC,IAAI,IAAI,EAAE;oBACX,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAC,EAAU;wBAClB,IAAI,MAAM,CAAC,cAAc,EAAE;4BACvB,KAAI,CAAC,eAAe,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAM,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;yBAC1F;wBACD,IAAI,MAAM,CAAC,aAAa,EAAE;4BACtB,KAAI,CAAC,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAM,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;yBACxF;wBACD,OAAO,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC;4BAClB,EAAE,CAAC,YAAY,EAAE,CAAC;4BAClB,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;yBAChC,CAAC,CAAC;qBACN,CAAC,CAAC;iBACN;gBACD,OAAO,CAAC,CAAC;;;;;;;;;;QAWN,mDAAuB;;;;;;;;sBAAC,CAAmB;gBAC9C,IAAI,CAAC,CAAC,EAAE;oBACJ,OAAO,IAAI,CAAC;iBACf;gBACD,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE;oBACd,OAAO,IAAI,CAAC;iBACf;gBACD,IAAI,EAAE,CAAC,CAAC,SAAS,YAAY,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;oBAClD,OAAO,IAAI,CAAC;iBACf;gBACD,qBAAM,CAAC,GAA2B,CAAC,CAAC,SAAS,CAAC;gBAC9C,qBAAM,GAAG,GAA4B,CAAC,CAAC,WAAW,EAAE,CAAC;gBACrD,OAAO,EAAE,QAAQ,EAAE,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,GAAG,CAAC,SAAS,EAAE,CAAC;;;;;;;;;;QAWzD,2CAAe;;;;;;;;sBAAC,MAA0B;gBAC7C,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;;;;;;;;;;QAW9B,8CAAkB;;;;;;;;sBAAC,CAAmB;gBACzC,qBAAM,GAAG,GAAa,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;gBACtD,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,OAAO,IAAI,CAAC;iBACf;gBACD,qBAAM,CAAC,GAA4B,eAAe,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;gBAC1E,qBAAM,CAAC,IAA+C,EAClD,IAAI,CAAC,WAAW,GAAE,WAAW,CAAC,kBAAkB,CAAC,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAA,CAAC;gBAC/F,IAAI,CAAC,IAAI,IAAI,EAAE;oBAAE,OAAO,IAAI,CAAC;iBAAE;gBAC/B,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;;;;;;;;;;;QAYvB,2CAAe;;;;;;;;;sBAAC,MAAqC;;gBACxD,IAAI,MAAM,IAAI,IAAI,EAAE;oBAChB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBAChC;gBACD,IAAI,MAAM,YAAY,kBAAkB,EAAE;oBACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS;wBAC5C,qBAAM,CAAC,GAAa,CAAC,CAAC,QAAQ,CAAC;wBAC/B,qBAAM,CAAC,GAAoB,KAAI,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;wBAC/D,OAAO,CAAC,CAAC;qBACZ,CAAC,CAAC;iBACN;gBACD,OAAO,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;;;;;;;;;;QAY7C,wCAAY;;;;;;;;sBAAC,MAA0B;gBAC1C,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS;oBAC5C,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;iBAC9B,CAAC,CAAC;;;;;;;;;;QAYA,2CAAe;;;;;;;;sBAAC,MAA0B;gBAC7C,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS,IAAK,OAAA,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,SAAS,CAAC,GAAA,CAAC,CAAC;;;;;;;;;;QAYpF,sCAAU;;;;;;;;sBAAC,MAA0B;gBACxC,qBAAM,OAAO,GAAG,UAAC,CAAS,EAAE,IAAY,EAAE,QAAyB;oBAC/D,IAAI,IAAI,IAAI,IAAI,KAAK,EAAE,EAAE;wBACrB,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBAChB,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;qBAC9C;iBACJ,CAAC;gBACF,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS;oBAC5C,IAAI,MAAM,CAAC,QAAQ,EAAE;wBACjB,qBAAM,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;wBAC/C,IAAI,QAAO,CAAC,CAAC,KAAK,QAAQ,EAAE;4BAAE,QAAO,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE;yBAAE;6BAClE;4BACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;gCACX,QAAO,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE;6BAC1C,CAAC,CAAC;yBACN;qBACJ;yBACI;wBACD,QAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;qBACrC;iBACJ,CAAC,CAAC;;;;;;;;;;QAYA,uCAAW;;;;;;;;sBAAC,MAA0B;gBACzC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS,IAAO,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;;;;;;;;;QAYjF,gDAAoB;;;;;;;;sBAAC,MAA0B;gBAClD,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CACjC,UAAC,CAAS;oBAAK,OAAA,CAAC,CAAC,WAAW,CAAC;wBACzB,QAAQ,EAAE,MAAM,CAAC,QAAQ;wBACzB,SAAS,EAAE,MAAM,CAAC,SAAS;qBAC9B,CAAC;iBAAA,CAAC,CAAC;;;;;;;;;;QAYL,uCAAW;;;;;;;;sBAAC,MAA0B;gBACzC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS,IAAK,OAAA,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;;;;;;;;;;QAY5E,yCAAa;;;;;;;;sBAAC,MAA0B;gBAC3C,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS,IAAK,OAAA,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,GAAA,CAAC,CAAC;;;oBA5U1FjB,eAAU;;;;;wBAZF,UAAU;wBACV,YAAY;wBACZ,cAAc;wBAVFa,WAAM;;;gCAA3B;;;;;;;ACAA;;;;;;;;;;;;;;;;QA6GI,wBAAoB,OAAqB,EAAU,KAAa;YAAhE,iBAGC;YAHmB,YAAO,GAAP,OAAO,CAAc;YAAU,UAAK,GAAL,KAAK,CAAQ;4BAxDxB,IAAI,GAAG,EAAkB;YAyD7D,IAAI,CAAC,IAAI,GAAG,IAAI,OAAO,CAAqB,UAAC,OAAmB,IAAO,KAAI,CAAC,YAAY,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;YACvG,IAAI,CAAC,OAAO,GAAG,EAAmB,IAAI,CAAC,OAAO,GAAE,MAAM,CAAC;SAC1D;8BA/CU,yCAAa;;;;;;;8BAA0B,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;8BAQ5D,uCAAW;;;;;;;8BAAyB,OAAO,IAAI,CAAC,YAAY,CAAC;;;;8BAQ7D,sCAAU;;;;;;;8BAAkC,OAAO,IAAI,CAAC,IAAI,CAAC;;;;8BAS7D,mCAAO;;;;;;;;;gBACd,IAAI,IAAI,CAAC,WAAW,EAAE;oBAClB,qBAAM,CAAC,GAAU,EAAE,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE,CAAC;oBAC9F,OAAO,CAAC,CAAC;iBACZ;gBACD,OAAO,IAAI,CAAC;;;;;;;;;;;;;QA+BT,4CAAmB;;;;;;;;sBAAC,YAAiD;gBACxE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAuB;oBAC1C,qBAAM,OAAO,GAAsB,IAAI,iBAAiB,CAAC,YAAY,CAAC,CAAC;oBACvE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;oBAC3B,OAAO,OAAO,CAAC;iBAClB,CAAC,CAAC;;;;;;;;;;QAWA,2CAAkB;;;;;;;;sBAAC,OAAwB;;gBAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAuB;oBAC1C,qBAAM,CAAC,GAAmB,IAAI,OAAO,CAAQ,UAAA,OAAO;wBAChD,KAAI,CAAC,UAAU,CAAC,2BAA2B,EAAE;4BACzC,qBAAM,CAAC,GAAwC,eAAe,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;4BAChG,qBAAM,KAAK,GAAgC,IAAI,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,EAA0B,EAAE,CAAC,CAAC,CAAC;4BACnH,qBAAI,EAAoB,CAAC;4BACzB,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;4BACzB,EAAE,GAAG,IAAI,gBAAgB,CAAC,KAAK,EAAE,KAAI,CAAC,CAAC;4BACvC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;4BACvB,OAAO,CAAC,EAAE,CAAC,CAAC;yBACf,CAAC,CAAC;qBACN,CAAC,CAAC;oBACH,OAAO,CAAC,CAAC;iBACZ,CAAC,CAAC;;;;;;;;;;QAWA,yCAAgB;;;;;;;;sBAAC,OAA4B;gBAChD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAuB;oBAC1C,qBAAI,GAA4B,CAAC;oBACjC,IAAI,OAAO,CAAC,QAAQ,IAAI,IAAI,EAAE;wBAC1B,GAAG,GAAG,GAAG,CAAC,SAAS,EAAE,CAAC;qBACzB;yBAAM;wBACH,GAAG,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;qBAC5F;oBACD,qBAAM,OAAO,GAA2B,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,eAAe,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC1H,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBACpB,OAAO,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC;iBACtC,CAAC,CAAC;;;;;;;;;;QAWA,oCAAW;;;;;;;;sBAAC,OAAsB;;gBACrC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAuB;oBAC1C,qBAAM,KAAK,GAAyB,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;oBACpF,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBACzB,OAAO,IAAI,SAAS,CAAC,KAAK,EAAE,KAAI,CAAC,CAAC;iBACrC,CAAC,CAAC;;;;;;;;;;;QAYA,kCAAS;;;;;;;;;sBAAC,EAAe,EAAE,UAAuB;;gBACrD,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;;oBAE5B,4BAA4B,EAAE,CAAC;oBAC/B,kBAAkB,EAAE,CAAC;;oBAGrB,IAAI,KAAI,CAAC,YAAY,IAAI,IAAI,EAAE;wBAC3B,KAAI,CAAC,UAAU,EAAE,CAAC;qBACrB;oBACD,qBAAM,CAAC,GAAmC,eAAe,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;oBAC3F,IAAI,CAAC,CAAC,CAAC,WAAW,EAAE;wBAChB,CAAC,CAAC,WAAW,GAAG,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC;qBACvC;oBACD,qBAAM,GAAG,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC1C,KAAI,CAAC,YAAY,GAAG,GAAG,CAAC;oBACxB,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;iBAC1B,CAAC,CAAC;;;;;;;;;;QAWA,qCAAY;;;;;;;;sBAAC,OAA4C;gBAA5C,wBAAA;oBAAA,4BAA0C,EAAE,CAAA;;gBAC5D,qBAAM,OAAO,GAAG,UAAC,IAAY,EAAE,GAAuB;oBAClD,qBAAM,GAAG,GAA4B,eAAe,CAAC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBACzF,qBAAM,CAAC,GAAmC,eAAe,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;oBAC1F,IAAI,IAAI,IAAI,IAAI,KAAK,EAAE,EAAE;wBAAE,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;qBAAE;oBAC3C,qBAAM,OAAO,GAA2B,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;oBAC3E,qBAAM,MAAM,GAAe,IAAI,UAAU,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;oBAC9D,IAAI,OAAO,CAAC,QAAQ,EAAE;wBAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC;qBAAE;oBACxF,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC3B,OAAO,MAAM,CAAC;iBACjB,CAAC;gBACF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAuB;oBAC1C,IAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE;wBACjD,qBAAM,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;wBAChD,IAAI,QAAQ,CAAC,CAAC,KAAK,QAAQ,EAAE;4BAAE,QAAQ,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;yBAAE;6BACrD;4BACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;gCACX,QAAQ,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;6BACjC,CAAC,CAAC;yBACN;qBACJ;yBACI;wBACD,QAAQ,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;qBAC/B;iBACJ,CAAC,CAAC;;;;;;;;;;;QAYA,sCAAa;;;;;;;;;sBAAC,OAAwB;;gBACzC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAuB;oBAC1C,qBAAM,IAAI,GAA0C,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;oBAClG,qBAAM,CAAC,GAAmC,eAAe,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;oBAC3F,qBAAM,IAAI,GAA2B,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;oBACzE,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAExB,qBAAM,CAAC,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE,KAAI,EAAE,IAAI,CAAC,CAAC;oBAC5C,IAAI,OAAO,CAAC,QAAQ,EAAE;wBAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC;qBAAE;oBACnF,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,KAAK,EAAE,EAAE;wBAAE,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;qBAAE;oBACvE,IAAI,OAAO,CAAC,SAAS,IAAI,IAAI,EAAE;wBAAE,CAAC,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;qBAAE;oBACnE,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;wBAAE,CAAC,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;qBAAE;oBACzE,IAAI,OAAO,CAAC,YAAY,IAAI,IAAI,EAAE;wBAAE,CAAC,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;qBAAE;oBAC5E,IAAI,OAAO,CAAC,YAAY,IAAI,IAAI,EAAE;wBAAE,CAAC,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;qBAAE;oBAC5E,IAAI,OAAO,CAAC,QAAQ,EAAE;wBAAE,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;qBAAE;oBAC1D,OAAO,CAAC,CAAC;iBACZ,CAAC,CAAC;;;;;;;;;;;;QAaA,uCAAc;;;;;;;;;;sBAAC,OAAyB;gBAC3C,qBAAI,QAAiC,CAAC;gBACtC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAuB;oBAC1C,qBAAM,CAAC,GAAoC,eAAe,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;oBAC7F,qBAAM,IAAI,GAA0C,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjG,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;wBAC5E,QAAQ,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBACnD,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBAE5B,qBAAM,IAAE,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;wBACjD,IAAI,OAAO,CAAC,QAAQ,EAAE;4BAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,IAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC;yBAAE;wBACpF,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,KAAK,EAAE,EAAE;4BAAE,IAAE,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;yBAAE;wBACxE,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;4BAAE,IAAE,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;yBAAE;wBAC1E,OAAO,IAAE,CAAC;qBACb;yBACI;wBACD,qBAAM,OAAK,GAAoB,IAAI,KAAK,EAAY,CAAC;wBACrD,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC;4BACV,QAAQ,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BAC7C,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;4BAE5B,qBAAM,EAAE,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;4BACjD,IAAI,OAAO,CAAC,QAAQ,EAAE;gCAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC;6BAAE;4BACpF,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,KAAK,EAAE,EAAE;gCAAE,EAAE,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;6BAAE;4BACxE,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;gCAAE,EAAE,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;6BAAE;4BAC1E,OAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;yBAClB,CAAC,CAAC;wBACH,OAAO,OAAK,CAAC;qBAChB;iBACJ,CAAC,CAAC;;;;;;;;;;QAWA,oCAAW;;;;;;;;sBAAC,KAAY;gBAC3B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAuB;oBAC1C,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;iBAC3C,CAAC,CAAC;;;;;;;;QAQA,mCAAU;;;;;;;;gBACb,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;oBAChD,OAAO;iBACV;gBACD,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;oBAC3B,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;oBAC5B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;oBACzB,IAAI,CAAC,IAAI,GAAG,IAAI,OAAO,CAAqB,UAAC,OAAmB,IAAO,KAAI,CAAC,YAAY,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;iBAC1G;;;;;;;;;QAUE,kCAAS;;;;;;;;gBACZ,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAuB;oBAC1C,qBAAM,MAAM,GAAG,GAAG,CAAC,SAAS,EAAE,CAAC;oBAC/B,yBAAiB;wBACb,QAAQ,EAAE,MAAM,CAAC,QAAQ;wBACzB,SAAS,EAAE,MAAM,CAAC,SAAS;qBAC9B,EAAC;iBACL,CAAC,CAAC;;;;;;;;;QAUA,kCAAS;;;;;;;;gBACZ,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAuB;oBAC1C,qBAAM,GAAG,GAAG,GAAG,CAAC,SAAS,EAAE,CAAC;oBAC5B,yBAAa;wBACT,WAAW,EAAE,GAAG,CAAC,QAAQ,EAAE;wBAC3B,YAAY,EAAE,GAAG,CAAC,4BAA4B,EAAE,GAAG,GAAG,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC,OAAO,EAAE;wBAChF,WAAW,EAAE,GAAG,CAAC,QAAQ,EAAE;wBAC3B,YAAY,EAAE,GAAG,CAAC,4BAA4B,EAAE,GAAG,GAAG,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC,OAAO,EAAE;wBAChF,MAAM,EAAE,EAAE,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE;wBAC1E,OAAO,EAAE,CAAC;qBACb,EAAC;iBACL,CAAC,CAAC;;;;;;;;;QAUA,wCAAe;;;;;;;sBAAE,iBAAiC;;gBAAjC,kCAAA;oBAAA,wBAAiC;;gBACrD,OAAO,IAAI,OAAO,CAA8B,UAAC,OAAO,EAAE,MAAM;oBAC5D,KAAI,CAAC,kBAAkB,CAAC,6BAA6B,EAAE,iBAAiB,CAAC,CAAC,IAAI,CAAC,UAAC,CAA8B;wBAC1G,OAAO,CAAC,CAAC,CAAC,CAAC;qBACd,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;QAUA,gCAAO;;;;;;;;gBACV,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAuB,IAAK,OAAA,GAAG,CAAC,OAAO,EAAE,GAAA,CAAC,CAAC;;;;;;;;;;;QAW/D,mCAAU;;;;;;;;;sBAAC,UAAkB,EAAE,QAAoB;;gBACtD,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;oBAC/B,QAAQ,EAAE,CAAC;iBACd;qBACI;oBACD,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE;wBAClC,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBACpC,QAAQ,EAAE,CAAC;qBACd,CAAC,CAAC;iBACN;;;;;;;;;;;QAWE,2CAAkB;;;;;;;;;sBAAC,UAAkB,EAAE,iBAAiC;;gBAAjC,kCAAA;oBAAA,wBAAiC;;gBAC3E,qBAAM,CAAC,GAAW,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBACrE,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;oBAC/B,qBAAI,CAAC,GAAQ,IAAI,CAAC;oBAClB,IAAI,CAAC,iBAAiB,EAAG;wBACrB,CAAC,GAAG,IAAI,EAAM,SAAS,CAAC,IAAI,GAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;qBACvD;yBACI,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,EAAE;wBAC5C,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;qBACrC;yBACI;wBACD,CAAC,GAAG,IAAI,EAAM,SAAS,CAAC,IAAI,GAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;wBACpD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;qBACpC;oBACD,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBAC7B;qBACI;oBACD,OAAO,IAAI,OAAO,CAAS,UAAC,OAAO,EAAE,MAAM;wBACvC,IAAI;4BACJ,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE;gCAClC,qBAAM,CAAC,GAAG,IAAI,EAAM,SAAS,CAAC,IAAI,GAAE,CAAC,CAAC,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;gCAC1D,IAAI,iBAAiB,EAAE;oCACnB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;iCACpC;qCACI;oCACD,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;iCACvC;gCACD,OAAO,CAAC,CAAC,CAAC,CAAC;6BACd,CAAC,CAAC;yBACF;wBAAC,OAAO,CAAC,EAAE;4BACR,MAAM,CAAC,2CAA2C,CAAC,CAAC;yBACvD;qBACJ,CAAC,CAAC;iBACN;;;;;;;;;;;QAYE,wCAAe;;;;;;;;;sBAAC,GAAa;gBAChC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,CAAqB;oBACxC,qBAAM,CAAC,GAA4B,eAAe,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;oBAC1E,qBAAM,CAAC,IAA+C,CAAC,CAAC,kBAAkB,CAAC,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAA,CAAC;oBACrH,IAAI,CAAC,IAAI,IAAI,EAAE;wBACX,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;qBAC7B;oBACD,OAAO,IAAI,CAAC;iBACf,CAAC,CAAC;;;;;;;;;;QAWA,0CAAiB;;;;;;;;sBAAC,IAAqB;gBAC1C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,CAAqB;oBACxC,qBAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,eAAe,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAA,CAAC,CAAC;oBAClE,qBAAM,CAAC,IAA6D,CAAC,CAAC,kBAAkB,CAAC,CAAC,EACtF,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAA,CAAC;oBAC3C,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,KAAK,EAAU,CAAC;iBACtC,CAAC,CAAC;;;;;;;;;;QAWA,kCAAS;;;;;;;;sBAAC,MAAgB;gBAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAuB;oBAAK,OAAA,GAAG,CAAC,OAAO,CAAC;wBAC3D,MAAM,EAAE,eAAe,CAAC,iBAAiB,CAAC,MAAM,CAAC;qBACpD,CAAC;iBAAA,CAAC,CAAC;;;;;;;;;;QAUD,sCAAa;;;;;;;;sBAAC,OAAoB;gBACrC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,CAAqB;oBACjC,qBAAM,CAAC,GAA+B,eAAe,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;oBAChF,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;iBACnB,CAAC,CAAC;;;;;;;;;;QAUA,uCAAc;;;;;;;;sBAAC,OAAoB;gBACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,CAAqB;oBACjC,qBAAM,CAAC,GAAgC,eAAe,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;oBACrF,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBAChB,CAAC,CAAC;;;;;;;;;;QAWA,gCAAO;;;;;;;;sBAAC,IAAY;gBACvB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAuB;oBAAK,OAAA,GAAG,CAAC,OAAO,CAAC;wBAC3D,IAAI,EAAE,IAAI;qBACb,CAAC;iBAAA,CAAC,CAAC;;;;;;;;;;;QAWD,4CAAmB;;;;;;;;;sBAAI,SAAiB;;gBAC3C,qBAAM,mBAAmB,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC;gBAC3D,OAAOI,eAAU,CAAC,MAAM,CAAC,UAAC,QAAqB;oBAC3C,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,CAAqB;wBACjC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,mBAAmB,EAAE,UAAC,CAAM;4BAC5D,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAM,OAAA,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;yBAC1C,CAAC,CAAC;qBACN,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;QAWA,wCAAe;;;;;;;;sBAAC,SAAiB;gBACpC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,CAAC,IAAK,OAAA,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,GAAA,CAAC,CAAC;;;oBAvjBtFjB,eAAU;;;;;wBAvCF,YAAY;wBAJAa,WAAM;;;6BAA3B;;;;;;;ACGA;;;;;;;;;AAkBA;;;;;;;;QAAA;;;;;;;;;;QAkBI,uBAAsB,WAAuB,EAAY,KAAa;YAAhD,gBAAW,GAAX,WAAW,CAAY;YAAY,UAAK,GAAL,KAAK,CAAQ;2BAZrB,IAAI,GAAG,EAA0B;SAYP;;;;;;;;;;QA2BpE,oCAAY;;;;;;;;;sBAAC,KAAa,EAAE,OAAuB;gBACtD,qBAAM,OAAO,GAAG,UAAC,IAAY,EAAE,CAAQ;oBACnC,qBAAM,GAAG,GAA4B,eAAe,CAAC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBACzF,qBAAM,CAAC,GAAmC,eAAe,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;oBAC1F,IAAI,IAAI,IAAI,IAAI,KAAK,EAAE,EAAE;wBAAE,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;qBAAE;oBAC3C,qBAAM,OAAO,GAA2B,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;oBAC3E,qBAAM,MAAM,GAAe,IAAI,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC;oBAC3E,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;oBACjC,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;oBAC/B,IAAI,OAAO,CAAC,QAAQ,EAAE;wBAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC;qBAAE;oBACxF,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;oBACpB,OAAO,MAAM,CAAC;iBACjB,CAAC;gBACF,qBAAM,CAAC,GAAmB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACnD,IAAI,CAAC,IAAI,IAAI,EAAE;oBAAE,OAAO,IAAI,KAAK,CAAC,mBAAiB,KAAK,4BAAyB,CAAC,EAAE;iBAAE;gBACtF,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAQ;oBACnB,IAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE;wBACjD,qBAAM,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;wBAChD,IAAI,QAAO,CAAC,CAAC,KAAK,QAAQ,EAAE;4BAAE,QAAO,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;yBAAE;6BACjD;4BACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;gCACX,QAAO,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE;6BAC9B,CAAC,CAAC;yBACN;qBACJ;yBACI;wBACD,QAAQ,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE;qBAC7B;iBACJ,CAAC,CAAC;;;;;;;;;;;;QAaA,qCAAa;;;;;;;;;;sBAAC,OAA8B,EAAE,UAA4B;gBAC7E,qBAAM,OAAO,GAAG,UAAC,IAAY,EAAE,EAAyB;oBACpD,qBAAM,OAAO,GAAsB,EAAE,CAAC,GAAG,CAAC,UAAA,EAAE;wBACxC,qBAAI,CAAS,CAAC;wBACd,qBAAM,CAAC,GAAmC,eAAe,CAAC,sBAAsB,CAAC,EAAE,CAAC,CAAC;wBACrF,IAAI,IAAI,IAAI,IAAI,KAAK,EAAG,EAAE;4BAAE,CAAC,GAAG,IAAI,CAAC;yBAAE;6BAClC,IAAI,CAAC,CAAC,IAAI,EAAE;4BACb,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;yBACd;wBACD,IAAI,CAAC,CAAC,IAAI,EAAE;4BAAE,OAAO,CAAC,CAAC,IAAI,CAAC;yBAAE;wBAC9B,qBAAM,GAAG,GAA4B,eAAe,CAAC,iBAAiB,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;wBACpF,qBAAM,OAAO,GAA2B,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;wBAC3E,qBAAM,GAAG,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;wBACxC,IAAI,GAAG,IAAI,IAAI,EAAE;4BAAE,EAAM,OAAO,GAAE,KAAK,GAAG,GAAG,CAAC;yBAAE;wBAEhD,qBAAM,MAAM,GAAe,IAAI,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;wBAC/D,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC;wBAC5B,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC;wBAC1B,IAAI,EAAE,CAAC,QAAQ,EAAE;4BAAE,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC;yBAAE;wBAC9E,OAAO,MAAM,CAAC;qBACjB,CAAC,CAAC;oBACH,OAAO,OAAO,CAAC;iBAClB,CAAC;gBACF,qBAAM,CAAC,GAA2B,IAAI,OAAO,CAAgB,UAAC,OAAO,EAAE,MAAM;oBACzE,IAAI,UAAU,IAAI,UAAU,CAAC,UAAU,EAAE;wBACrC,qBAAM,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;wBAC1C,IAAI,QAAO,CAAC,CAAC,KAAK,QAAQ,EAAE;4BAAE,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;yBAAE;6BACxD;4BACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;gCACX,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;6BACrC,CAAC,CAAC;yBACN;qBACJ;yBACI;wBACD,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;qBACnC;iBACJ,CAAC,CAAC;gBACH,OAAO,CAAC,CAAC;;;;;;;;;;QAWN,mCAAW;;;;;;;;sBAAC,KAAwB;;gBACvC,qBAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACrC,IAAI,CAAC,IAAI,IAAI,EAAE;oBACX,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC5B;gBACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,EAAS;oBACpB,OAAO,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC;wBAClB,EAAE,CAAC,MAAM,EAAE,CAAC;wBACZ,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;qBACjC,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;QAWA,sCAAc;;;;;;;;sBAAC,KAA+B;gBACjD,qBAAI,CAAC,GAAmB,IAAI,CAAC;gBAC7B,IAAI,QAAO,KAAK,CAAC,KAAK,QAAQ,EAAE;oBAC5B,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;iBAC/B;qBACI;oBACD,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAoB,KAAK,GAAE,EAAE,CAAC,CAAC;iBACvD;gBACD,OAAO,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;QAgBH,oCAAY;;;;;;;;;YAAtB,UAAuB,EAAU;gBAC7B,qBAAI,CAAiB,CAAC;gBACtB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAiB,EAAE,CAAS;oBAAO,IAAI,CAAC,KAAK,EAAE,EAAE;wBAAE,CAAC,GAAG,CAAC,CAAC;qBAAE;iBAAE,CAAC,CAAC;gBACrF,OAAO,CAAC,CAAC;aACZ;4BA5ML;QA8MC;;;;;;;;;;;;QCpLqClB,oCAAa;;;;;;;;;;;QAa/C,0BAAY,WAAuB,EAAE,KAAa;mBAC9C,kBAAM,WAAW,EAAE,KAAK,CAAC;SAC5B;;;;;;;;;;;;QAYM,mCAAQ;;;;;;;;;;;sBAAC,KAAwB;gBACpC,qBAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;gBACpE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;gBACzC,YAAY,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,GAAA,CAAC,CAAC;;;;;;;;;;;;QAcjD,wCAAa;;;;;;;;;;sBAAC,KAAa,EAAE,OAAwB;;gBACxD,qBAAM,CAAC,GAAmB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACnD,IAAI,CAAC,IAAI,IAAI,EAAE;oBAAE,OAAO,IAAI,KAAK,CAAC,mBAAiB,KAAK,4BAAyB,CAAC,EAAE;iBAAE;gBACtF,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAQ;oBACnB,qBAAM,IAAI,GAA0C,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;oBAClG,qBAAM,CAAC,GAAoC,eAAe,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;oBAC5F,qBAAM,IAAI,GAA2B,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;oBACzE,qBAAM,OAAO,GAAY,IAAI,WAAW,CAAC,IAAI,oBAAkB,KAAI,CAAC,WAAW,GAAE,CAAC,CAAC,cAAc,CAAC,CAAC;oBAEnG,IAAI,OAAO,CAAC,QAAQ,EAAE;wBAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC;qBAAE;oBACzF,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,KAAK,EAAE,EAAE;wBAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;qBAAE;oBAC5E,IAAI,OAAO,CAAC,SAAS,IAAI,IAAI,EAAE;wBAAE,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;qBAAE;oBACzE,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;wBAAE,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;qBAAE;oBAC/E,IAAI,OAAO,CAAC,YAAY,IAAI,IAAI,EAAE;wBAAE,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;qBAAE;oBAClF,IAAI,OAAO,CAAC,YAAY,IAAI,IAAI,EAAE;wBAAE,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;qBAAE;oBAClF,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;oBACrB,OAAO,OAAO,CAAC;iBAClB,CAAC,CAAC;;;;;;;;;;;;QAaA,yCAAc;;;;;;;;;;sBAAC,KAAa,EAAE,OAA+B;;gBAChE,qBAAM,CAAC,GAAmB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACnD,IAAI,CAAC,IAAI,IAAI,EAAE;oBAAE,OAAO,IAAI,KAAK,CAAC,mBAAiB,KAAK,4BAAyB,CAAC,EAAE;iBAAE;gBACtF,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAQ;oBACnB,qBAAM,QAAQ,GAA4B,IAAI,OAAO,CAAiB,UAAC,OAAO,EAAE,MAAM;wBAClF,qBAAM,KAAK,GAAuB,OAAO,CAAC,GAAG,CAAC,UAAA,CAAC;4BAC3C,qBAAM,IAAI,GAA0C,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;4BAC5F,qBAAM,EAAE,GAAoC,eAAe,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;4BACvF,qBAAM,IAAI,GAA2B,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;4BAC1E,qBAAM,OAAO,GAAgB,IAAI,WAAW,CAAC,IAAI,oBAAkB,KAAI,CAAC,WAAW,GAAE,CAAC,CAAC,cAAc,CAAC,CAAC;4BACvG,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,KAAK,EAAE,EAAE;gCAAE,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;6BAAE;4BAC3D,IAAI,CAAC,CAAC,QAAQ,EAAE;gCAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC;6BAAE;4BAC7E,OAAO,OAAO,CAAC;yBAClB,CAAC,CAAC;wBACH,OAAO,CAAC,KAAK,CAAC,CAAC;qBAClB,CAAC,CAAC;oBACH,OAAO,QAAQ,CAAC;iBACnB,CAAC,CAAC;;;;;;;;;;;;;QAcA,yCAAc;;;;;;;;;;;sBAAC,KAAa,EAAE,OAAyB;;gBAC1D,qBAAM,CAAC,GAAmB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACnD,qBAAI,QAAiC,CAAC;gBACtC,qBAAI,IAAc,CAAC;gBACnB,IAAI,CAAC,IAAI,IAAI,EAAE;oBAAE,OAAO,IAAI,KAAK,CAAC,mBAAiB,KAAK,4BAAyB,CAAC,EAAE;iBAAE;gBACtF,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAQ;oBACnB,qBAAM,IAAI,GAA0C,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjG,qBAAM,CAAC,GAAoC,eAAe,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;oBAC7F,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;wBAC5E,QAAQ,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBACnD,IAAI,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC;wBAClF,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBAElB,IAAI,OAAO,CAAC,QAAQ,EAAE;4BAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC;yBAAE;wBACtF,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,KAAK,EAAE,EAAE;4BAAC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;yBAAE;wBACzE,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;4BAAE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;yBAAE;wBAC5E,OAAO,IAAI,CAAC;qBACf;yBACI;wBACD,qBAAM,OAAK,GAAoB,IAAI,KAAK,EAAY,CAAC;wBACrD,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC;4BACV,QAAQ,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BAC7C,IAAI,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC;4BAClF,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;4BAElB,IAAI,OAAO,CAAC,QAAQ,EAAE;gCAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC;6BAAE;4BACtF,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,KAAK,EAAE,EAAE;gCAAC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;6BAAE;4BACzE,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;gCAAE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;6BAAE;4BAC5E,OAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;yBACpB,CAAC,CAAC;wBACH,OAAO,OAAK,CAAC;qBAChB;iBACJ,CAAC,CAAC;;;;;;;;;;;;QAaA,0CAAe;;;;;;;;;;sBAAC,KAAa,EAAE,OAAgC;;gBAClE,qBAAM,CAAC,GAAmB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACnD,IAAI,CAAC,IAAI,IAAI,EAAE;oBAAE,OAAO,IAAI,KAAK,CAAC,mBAAiB,KAAK,4BAAyB,CAAC,EAAE;iBAAE;gBACtF,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAQ;oBACnB,qBAAM,SAAS,GAA6C,IAAI,OAAO,CAAkC,UAAC,OAAO,EAAE,MAAM;wBACrH,qBAAM,KAAK,GAAoC,OAAO,CAAC,GAAG,CAAC,UAAA,CAAC;4BACxD,qBAAM,IAAI,GAA0C,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;4BAC3F,qBAAM,EAAE,GAAoC,eAAe,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC;4BACxF,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;gCACpD,qBAAM,IAAI,GAA4B,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gCAC/E,qBAAM,UAAQ,GAAiB,IAAI,YAAY,CAAC,IAAI,EAAE,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC;gCACtG,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,KAAK,EAAE,EAAE;oCAAE,UAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;iCAAE;gCAC5D,IAAI,CAAC,CAAC,QAAQ,EAAE;oCAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,UAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC;iCAAE;gCAC9E,OAAO,UAAQ,CAAC;6BACnB;iCACI;gCACD,qBAAM,OAAK,GAAoB,IAAI,KAAK,EAAY,CAAC;gCACrD,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC;oCACV,qBAAM,IAAI,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;oCAChD,qBAAM,QAAQ,GAAiB,IAAI,YAAY,CAAC,IAAI,EAAE,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC;oCACtG,IAAI,CAAC,CAAC,QAAQ,EAAE;wCAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC;qCAAE;oCAC9E,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,KAAK,EAAE,EAAE;wCAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;qCAAE;oCAC3D,OAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iCACxB,CAAC,CAAC;gCACH,OAAO,OAAK,CAAC;6BAChB;yBACJ,CAAC,CAAC;wBACH,OAAO,CAAC,KAAK,CAAC,CAAC;qBAClB,CAAC,CAAC;oBACH,OAAO,SAAS,CAAC;iBACpB,CAAC,CAAC;;;oBArLVK,eAAU;;;;;wBAZF,UAAU;wBAbEa,WAAM;;;+BAA3B;MA0BsC,aAAa;;;;;;;;;;;;QCCXlB,sCAAa;;;;;;;;;;;QAajD,4BAAY,WAAuB,EAAE,KAAa;mBAC9C,kBAAM,WAAW,EAAE,KAAK,CAAC;SAC5B;;;;;;;;;;;;QAgBM,qCAAQ;;;;;;;;;;;sBAAC,KAA4B;;gBACxC,qBAAM,OAAO,GAAoB;oBAC7B,EAAE,EAAE,KAAK,CAAC,EAAE;oBACZ,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,iBAAiB,EAAE,KAAK,CAAC,iBAAiB;oBAC1C,aAAa,EAAE,KAAK,CAAC,oBAAoB;iBAC5C,CAAC;gBACF,IAAI,KAAK,CAAC,QAAQ,EAAE;oBAAE,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;iBAAE;gBAC1D,IAAI,KAAK,CAAC,WAAW,EAAE;oBAAE,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC;iBAAE;gBACnE,IAAI,KAAK,CAAC,MAAM,EAAE;oBAAE,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;iBAAE;gBACpD,IAAI,KAAK,CAAC,QAAQ,EAAE;oBAChB,OAAO,CAAC,oBAAoB,GAAG,UAAC,GAAkC,IAAO,KAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC;iBACrH;gBACD,IAAI,KAAK,CAAC,oBAAoB,EAAE;oBAC5B,OAAO,CAAC,oBAAoB,GAAG,UAAC,GAAkC,IAAO,KAAI,CAAC,0BAA0B,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC;iBAC3H;gBACD,IAAI,KAAK,CAAC,oBAAoB,EAAE;oBAAE,OAAO,CAAC,oBAAoB,GAAG,KAAK,CAAC,oBAAoB,CAAC;iBAAE;gBAE9F,qBAAM,YAAY,GAAmB,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;gBAClF,EAAiB,IAAI,CAAC,WAAW,GAAE,UAAU,CAAC,IAAI,CAAC,UAAA,CAAC;oBAChD,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,eAAe,EAAE,UAAC,CAAC;wBACnD,IAAI,KAAK,CAAC,iBAAiB,IAAI,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE;4BAC/C,YAAY,CAAC,IAAI,CAAC,UAAC,CAAmB;gCAClC,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,iBAAiB,EAAE,KAAK,EAAE,CAAC,CAAC;6BAC5D,CAAC,CAAC;yBACN;wBACD,IAAI,KAAK,CAAC,iBAAiB,IAAI,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE;4BAC7C,YAAY,CAAC,IAAI,CAAC,UAAC,CAAmB;gCAClC,IAAI,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,iBAAiB,EAAE;oCACnC,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC;iCAC3D;6BACJ,CAAC,CAAC;yBACN;qBACJ,CAAC,CAAC;iBACN,CAAC,CAAC;gBACH,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;;;;;;;;;;;;QAatC,0CAAa;;;;;;;;;;sBAAC,KAAa,EAAE,OAAwB;gBACxD,OAAO,IAAI,KAAK,CAAC,4EAA4E,CAAC,EAAE;;;;;;;;;;;;QAa7F,2CAAc;;;;;;;;;;sBAAC,KAAa,EAAE,OAA+B;gBAChE,OAAO,IAAI,KAAK,CAAC,4EAA4E,CAAC,EAAE;;;;;;;;;;;;;QAc7F,2CAAc;;;;;;;;;;;sBAAC,KAAa,EAAE,OAAyB;gBAC1D,OAAO,IAAI,KAAK,CAAC,6EAA6E,CAAC,EAAE;;;;;;;;;;;;QAa9F,4CAAe;;;;;;;;;;sBAAC,KAAa,EAAE,OAAgC;gBAClE,OAAO,IAAI,KAAK,CAAC,6EAA6E,CAAC,EAAE;;;;;;;;;;;;;QAa9F,4CAAe;;;;;;;;;;;sBAAC,KAA4B;;gBAC/C,qBAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACrC,IAAI,CAAC,IAAI,IAAI,EAAE;oBACX,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC5B;gBACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,EAAoB;oBAC/B,OAAO,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC;wBAClB,EAAE,CAAC,eAAe,EAAE,CAAC;qBACxB,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;;;;QAaA,2CAAc;;;;;;;;;;;sBAAC,KAA4B;;gBAC9C,qBAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACrC,IAAI,CAAC,IAAI,IAAI,EAAE;oBACX,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC5B;gBACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,EAAoB;oBAC/B,OAAO,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC;wBAClB,EAAE,CAAC,cAAc,EAAE,CAAC;qBACvB,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;;;;QAiBC,iDAAoB;;;;;;;;;;;sBAAC,OAAsC,EAAE,KAA4B;;gBAC7F,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,CAAmB;oBAChD,IAAI,KAAK,CAAC,QAAQ,EAAE;wBAChB,qBAAM,GAAC,GAAmC,EAAE,CAAC;wBAC7C,qBAAM,SAAO,GAAiD,UAAC,GAAG,EAAE,IAAI;4BAChE,GAAC,CAAC,IAAI,GAAG,GAAG,CAAC;4BACb,GAAC,CAAC,MAAM,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAC/B,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,EACxF,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,CAC5F,CAAC;4BACF,OAAO,CAAC,UAAU,CAAC,GAAC,CAAC,CAAC;yBAC7B,CAAC;wBACF,qBAAM,IAAI,GAA8D,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;wBAC5G,IAAI,QAAO,IAAI,CAAC,KAAK,QAAQ,EAAE;4BAC3B,SAAO,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;yBACjC;6BACI;4BACD,IAAI,CAAC,IAAI,CAAC,UAAA,CAAC;gCACP,SAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;6BAC/B,CAAC,CAAC;yBACN;qBACJ;oBACD,IAAI,KAAK,CAAC,kBAAkB,KAAK,kBAAkB,CAAC,eAAe,EAAE;wBACjE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,EAAE,UAAC,CAAiC,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;qBACtH;oBACD,IAAI,KAAK,CAAC,kBAAkB,KAAK,kBAAkB,CAAC,MAAM,EAAE;wBACxD,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,UAAU,EAAE,UAAC,CAAiC,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;wBACtH,CAAC,CAAC,8BAA8B,EAAE,CAAC;qBACtC;iBACJ,CAAC,CAAC;;;;;;;;;;;;;;QAcC,uDAA0B;;;;;;;;;;;;sBAAC,OAAsC,EAAE,KAA4B;;gBACnG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,CAAmB;;oBAEhD,qBAAM,CAAC,GAAkB,IAAI,KAAK,EAAU,CAAC;oBAC7C,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAA,CAAC;wBAC/B,qBAAM,MAAM,GAAW,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;wBACpD,IAAI,MAAM,EAAE;4BAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;yBAAE;qBAClC,CAAC,CAAC;oBACH,qBAAM,QAAQ,GAAoB,EAAE,UAAU,EAAE,YAAY,CAAC,IAAI,EAAE,CAAC;oBACpE,qBAAM,CAAC,GAAmC,EAAE,CAAC;oBAC7C,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,oBAAoB,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;oBACjD,IAAI,CAAC,CAAC,IAAI,KAAK,EAAE,EAAE;wBACf,CAAC,CAAC,MAAM,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAC/B,CAAC,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,iBAAiB,KAAK,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,EACxG,CAAC,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,iBAAiB,KAAK,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,CAC5G,CAAC;wBACF,IAAI,QAAQ,CAAC,UAAU,EAAE;4BAAE,CAAC,CAAC,UAAU,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;yBAAE;wBACnH,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;qBACzB;oBACD,IAAI,KAAK,CAAC,kBAAkB,KAAK,kBAAkB,CAAC,eAAe,EAAE;wBACjE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,EAAE,UAAC,CAAiC,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;qBACtH;oBACD,IAAI,KAAK,CAAC,kBAAkB,KAAK,kBAAkB,CAAC,MAAM,EAAE;wBACxD,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,UAAU,EAAE,UAAC,CAAiC,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;wBACtH,CAAC,CAAC,8BAA8B,EAAE,CAAC;qBACtC;iBACJ,CAAC,CAAC;;;;;;;;;;QAUC,4CAAe;;;;;;;;sBAAC,CAAiC;gBACrD,qBAAM,GAAG,IAAiE,CAAC,CAAC,MAAM,CAAA,CAAC;gBACnF,IAAI,GAAG,IAAI,GAAG,CAAC,iBAAiB,EAAE;oBAC9B,qBAAI,QAAmC,CAAC;oBACxC,qBAAM,MAAI,GAAmC,IAAI,KAAK,EAA2B,CAAC;oBAClF,GAAG,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,MAAI,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,GAAA,CAAC,CAAC;oBAC/D,QAAM,GAAG,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,MAAI,CAAC,CAAC;;;oBAIzD,EAAiB,IAAI,CAAC,WAAW,GAAE,UAAU,CAAC,IAAI,CAAC,UAAC,CAAqB;wBACrE,CAAC,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,QAAM,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;qBAC9C,CAAC,CAAC;iBACN;;;oBArRRK,eAAU;;;;;wBAZF,UAAU;wBAdEa,WAAM;;;iCAA3B;MA2BwC,aAAa;;;;;;AC3BrD;;;;;;;;;;;;;;;;;;QAoCI,4BAAoB,WAAuB,EAC/B,eACA;YAFQ,gBAAW,GAAX,WAAW,CAAY;YAC/B,kBAAa,GAAb,aAAa;YACb,UAAK,GAAL,KAAK;6BAjB+C,IAAI,GAAG,EAAyC;SAkB/G;;;;;;;;;;QAUM,uCAAU;;;;;;;;;sBAAC,OAA4B;gBAC1C,qBAAM,CAAC,GAAoB;oBACvB,EAAE,EAAE,OAAO,CAAC,EAAE;oBACd,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,QAAQ,EAAE,OAAO,CAAC,QAAQ;oBAC1B,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,QAAQ,EAAE,OAAO,CAAC,QAAQ;oBAC1B,YAAY,EAAE,OAAO,CAAC,YAAY;oBAClC,YAAY,EAAE,OAAO,CAAC,YAAY;oBAClC,KAAK,EAAE,OAAO,CAAC,KAAK;oBACpB,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,aAAa,EAAE,OAAO,CAAC,aAAa;oBACpC,YAAY,EAAE,OAAO,CAAC,YAAY;oBAClC,KAAK,EAAE,OAAO,CAAC,KAAK;oBACpB,OAAO,EAAE,OAAO,CAAC,OAAO;oBACxB,MAAM,EAAE,OAAO,CAAC,MAAM;iBACzB,CAAC;gBACF,qBAAI,cAAgC,CAAC;gBACrC,IAAI,OAAO,CAAC,aAAa,EAAE;oBACvB,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;iBACzE;qBACI;oBACD,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;iBACtD;gBACD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;;;;;;;;;;;;QAYzC,kDAAqB;;;;;;;;;;sBAAI,SAAiB,EAAE,OAA4B;;gBAC3E,qBAAM,CAAC,GAAe,IAAIK,YAAO,EAAK,CAAC;gBACvC,IAAI,SAAS,KAAK,WAAW,EAAE;oBAC3B,OAAO,CAAC,CAAC,YAAY,EAAE,CAAC;iBAC3B;gBACD,IAAI,SAAS,KAAK,YAAY,EAAE;oBAC5B,OAAO,CAAC,CAAC,YAAY,EAAE,CAAC;iBAC3B;gBAKD,OAAOD,eAAU,CAAC,MAAM,CAAC,UAAC,QAAqB;oBAC3C,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAU;wBACxC,CAAC,CAAC,WAAW,CAAC,SAAS,EAAE,UAAC,CAAI,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAM,OAAA,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAA,CAAC,GAAA,CAAC,CAAC;qBAC9E,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;QAWA,0CAAa;;;;;;;;sBAAC,OAA4B;;gBAC7C,qBAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACtC,IAAI,CAAC,IAAI,IAAI,EAAE;oBACX,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC5B;gBACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAU;oBACrB,OAAO,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC;wBAClB,CAAC,CAAC,MAAM,EAAE,CAAC;wBACX,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;qBAClC,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;;QAaA,oDAAuB;;;;;;;;;sBAAC,CAAmB;gBAC9C,qBAAM,CAAC,IAAmE,CAAC,CAAA,CAAC;gBAC5E,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;;;;;;;;;;QAWvE,6CAAgB;;;;;;;;sBAAC,OAA4B;gBAChD,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;;;;;;;;;;;;QAahC,uCAAU;;;;;;;;;;sBAAC,OAA4B,EAAE,OAAwB;gBACpE,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAU,IAAO,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;;;;;;;;;;QAWjF,0CAAa;;;;;;;;sBAAC,OAA4B;gBAC7C,qBAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACtC,IAAI,CAAC,IAAI,IAAI,IAAI,OAAO,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBACnG,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC5B;gBACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAU;oBACrB,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;wBACjC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;qBAC7B;yBACI;wBACD,CAAC,CAAC,OAAO,mBAAkB,OAAO,CAAC,KAAK,EAAC,CAAC;qBAC7C;iBACJ,CAAC,CAAC;;;oBA/KVjB,eAAU;;;;;wBARF,UAAU;wBACV,YAAY;wBARAa,WAAM;;;iCAA3B;;;;;;;ACAA;;;;;;;;;;;;;;;;;;QAqCI,6BAAoB,WAAuB,EAC/B,eACA;YAFQ,gBAAW,GAAX,WAAW,CAAY;YAC/B,kBAAa,GAAb,aAAa;YACb,UAAK,GAAL,KAAK;8BAjBjB,IAAI,GAAG,EAA2D;SAkBjE;;;;;;;;;;QAcM,yCAAW;;;;;;;;;sBAAC,QAA8B;gBAC7C,qBAAM,CAAC,GAAqB;oBACxB,EAAE,EAAE,QAAQ,CAAC,EAAE;oBACf,SAAS,EAAE,QAAQ,CAAC,SAAS;oBAC7B,SAAS,EAAE,QAAQ,CAAC,SAAS;oBAC7B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;oBAC3B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;oBAC3B,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,WAAW,EAAE,QAAQ,CAAC,WAAW;oBACjC,WAAW,EAAE,QAAQ,CAAC,WAAW;oBACjC,aAAa,EAAE,QAAQ,CAAC,aAAa;oBACrC,YAAY,EAAE,QAAQ,CAAC,YAAY;oBACnC,KAAK,EAAE,QAAQ,CAAC,KAAK;oBACrB,OAAO,EAAE,QAAQ,CAAC,OAAO;oBACzB,MAAM,EAAE,QAAQ,CAAC,MAAM;iBAC1B,CAAC;gBACF,qBAAI,eAAkD,CAAC;gBACvD,IAAI,QAAQ,CAAC,aAAa,EAAE;oBACxB,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;iBAC5E;qBAAM;oBACH,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;iBACxD;gBACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;;;;;;;;;;;;QAY5C,mDAAqB;;;;;;;;;;sBAAI,SAAiB,EAAE,QAA8B;;gBAC7E,qBAAM,CAAC,GAAe,IAAIK,YAAO,EAAK,CAAC;gBACvC,IAAI,SAAS,KAAK,WAAW,EAAE;oBAC3B,OAAO,CAAC,CAAC,YAAY,EAAE,CAAC;iBAC3B;gBACD,IAAI,SAAS,KAAK,YAAY,EAAE;oBAC5B,OAAO,CAAC,CAAC,YAAY,EAAE,CAAC;iBAC3B;gBAID,OAAOD,eAAU,CAAC,MAAM,CAAC,UAAC,QAAqB;oBAC3C,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;wBAChC,qBAAM,CAAC,GAAoB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACtD,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,UAAC,CAAI,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAM,OAAA,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAA,CAAC,GAAA,CAAC,GAAA,CAAC,CAAC;qBACpG,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;QAWA,4CAAc;;;;;;;;sBAAC,QAA8B;;gBAChD,qBAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACxC,IAAI,CAAC,IAAI,IAAI,EAAE;oBACX,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC5B;gBACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAW;oBACtB,OAAO,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC;wBAClB,qBAAM,CAAC,GAAoB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACtD,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI,IAAK,OAAA,IAAI,CAAC,MAAM,EAAE,GAAA,CAAC,CAAC;wBAClC,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;qBACpC,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;;QAaA,qDAAuB;;;;;;;;;sBAAC,CAAiC;gBAC5D,IAAI,CAAC,CAAC,EAAE;oBAAE,OAAO,IAAI,CAAC;iBAAE;gBACxB,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE;oBAAE,OAAO,IAAI,CAAC;iBAAE;gBACjC,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;;;;;;;;;;;QAYvE,+CAAiB;;;;;;;;;sBAAC,QAA8B;gBACnD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;;;;;;;;;;;;QAalC,wCAAU;;;;;;;;;;sBAAC,QAA8B,EAAE,OAAyB;gBACvE,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;oBACvC,qBAAM,CAAC,GAAoB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACtD,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,GAAA,CAAC,CAAC;iBAC/C,CAAC,CAAC;;;;;;;;;;QAWA,4CAAc;;;;;;;;sBAAC,QAA8B;;gBAChD,qBAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACxC,IAAI,CAAC,IAAI,IAAI,EAAE;oBACX,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC5B;gBACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;oBAAI,OAAA,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC;wBAC9B,qBAAM,CAAC,GAAoB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACtD,qBAAM,CAAC,GACH,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,qBAA2B,QAAQ,CAAC,IAAI,sBAC3E,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA,CAAC;wBAC3C,CAAC,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK;4BAClB,IAAI,CAAC,CAAC,MAAM,GAAG,KAAK,EAAE;gCAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;6BAAE;yBACrD,CAAC,CAAC;wBACH,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,EAAE;4BACzC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,EAAE,GAAA,CAAC,CAAC;yBACzD;qBACJ,CAAC;iBAAA,CAAC,CAAC;;;oBAxLXjB,eAAU;;;;;wBARF,UAAU;wBACV,YAAY;wBARAa,WAAM;;;kCAA3B;;;;;;;ACAA;;;;;;;;;;;;;;;;QAsCI,+BAAoB,OAAqB,EAAU,KAAa;YAA5C,YAAO,GAAP,OAAO,CAAc;YAAU,UAAK,GAAL,KAAK,CAAQ;SAAK;;;;;;;;QAa9D,sCAAM;;;;;;;;gBACT,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;QAWjD,oDAAoB;;;;;;;;sBAAC,WAA2B;gBACnD,OAAO,IAAI,kBAAkB,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;QAWpD,oDAAoB;;;;;;;;sBAAC,WAA2B;gBACnD,OAAO,IAAI,kBAAkB,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;QAWpD,kDAAkB;;;;;;;;sBAAC,WAA2B;gBACjD,OAAO,IAAI,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;;;QAalD,mDAAmB;;;;;;;;;;sBAAC,WAA2B,EAClD,aAA+B,EAAE,eAAmC;gBACpE,OAAO,IAAI,iBAAiB,CAAC,WAAW,EAAE,aAAa,EAAE,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;;QAYnF,oDAAoB;;;;;;;;;sBAAC,GAAe,EAAE,MAAoB;gBAC7D,OAAO,IAAI,kBAAkB,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;;QAYpD,qDAAqB;;;;;;;;;sBAAC,GAAe,EAAE,MAAoB;gBAC9D,OAAO,IAAI,mBAAmB,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;;;oBAzG/Db,eAAU;;;;;wBArBF,YAAY;wBAHAa,WAAM;;;oCAA3B;;;;;;;;;;;AA+IA,0CAA6C,SAAuB,EAAE,IAAY;QAC9E,OAAO,IAAI,qBAAqB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;KACrD;;;;;;;AAQD;QACI,OAAO,IAAI,gBAAgB,CAAC,IAAI,sBAAsB,EAAE,EAAE,IAAI,SAAS,EAAE,EAAE,IAAI,WAAW,EAAE,CAAC,CAAC;KACjG;;;;;;;;;;;;;;;ACnID;;;;;;;;QAAA;;;;;;;;;;;;QAmBI,yBAAsB,WAAuB,EAAY,KAAa;YAAhD,gBAAW,GAAX,WAAW,CAAY;YAAY,UAAK,GAAL,KAAK,CAAQ;SAAK;;;;;;;;;QA0BpE,qCAAW;;;;;;;;sBAAC,KAAwB;;gBACvC,qBAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACrC,IAAI,CAAC,IAAI,IAAI,EAAE;oBACX,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC5B;gBACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,EAAS;oBACpB,OAAO,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC;wBAClB,EAAE,CAAC,MAAM,EAAE,CAAC;wBACZ,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;qBACjC,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;QAWA,wCAAc;;;;;;;;sBAAC,KAA+B;gBACjD,qBAAI,CAAC,GAAmB,IAAI,CAAC;gBAC7B,IAAI,QAAO,KAAK,CAAC,KAAK,QAAQ,EAAE;oBAC5B,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;iBAC/B;qBACI;oBACD,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAoB,KAAK,GAAE,EAAE,CAAC,CAAC;iBACvD;gBACD,OAAO,CAAC,CAAC;;;;;;;;;;;QAYN,sCAAY;;;;;;;;;sBAAC,KAAa,EAAE,OAAuB;gBACtD,qBAAM,EAAE,GAAsC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;gBAC1E,qBAAM,EAAE,GAAmB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAEnD,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,EAAQ;wBAAR,kBAAQ,EAAP,WAAG,EAAE,SAAC;oBACtC,qBAAM,OAAO,GAAG,UAAC,CAA+B;wBAC5C,qBAAM,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBACzC,IAAI,OAAO,CAAC,QAAQ,EAAE;4BAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAQ,EAAE,GAAW,IAAK,OAAA,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAA,CAAC,CAAC;yBAAE;wBAC7G,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;wBACnB,qBAAM,CAAC,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;wBACnC,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;wBAC5B,CAAC,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;wBAC1B,IAAI,OAAO,CAAC,QAAQ,EAAE;4BAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAQ,EAAE,GAAW,IAAK,OAAA,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAA,CAAC,CAAC;yBAAE;wBACxG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;wBACf,OAAO,CAAC,CAAC;qBACZ,CAAC;oBACF,qBAAM,CAAC,GAAiC,iBAAiB,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;oBAC1F,IAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE;wBACjD,qBAAM,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;wBAChD,IAAI,QAAO,CAAC,CAAC,KAAK,QAAQ,EAAE;4BACxB,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;4BACX,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;yBACrB;6BACI;4BACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;gCACX,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;gCAChB,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;6BACrB,CAAC,CAAC;yBACN;qBACJ;yBACI;wBACD,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;qBACrB;iBACJ,CAAC,CAAC;;;;;;;;;;;;QAaA,uCAAa;;;;;;;;;;sBAAC,OAA8B,EAAE,UAA4B;gBAC7E,qBAAM,OAAO,GAAG,UAAC,IAAY;oBACzB,qBAAM,OAAO,GAAwB,OAAO,CAAC,GAAG,CAAC,UAAA,EAAE;wBAC/C,qBAAM,CAAC,GAAiC,iBAAiB,CAAC,sBAAsB,CAAC,EAAE,CAAC,CAAC;wBACrF,IAAI,IAAI,IAAI,IAAI,KAAK,EAAE,EAAE;4BAAE,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;yBAAE;wBAC3C,qBAAM,OAAO,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAC1C,qBAAM,MAAM,GAAiB,IAAI,YAAY,CAAC,OAAO,CAAC,CAAC;wBACvD,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC;wBAC5B,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC;wBAC1B,IAAI,EAAE,CAAC,QAAQ,EAAE;4BAAE,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAQ,EAAE,GAAW,IAAK,OAAA,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAA,CAAC,CAAC;yBAAE;wBACnG,OAAO,MAAM,CAAC;qBACjB,CAAC,CAAC;oBACH,OAAO,OAAO,CAAC;iBAClB,CAAC;gBACF,qBAAM,CAAC,GAA2B,IAAI,OAAO,CAAgB,UAAC,OAAO,EAAE,MAAM;oBACzE,IAAI,UAAU,IAAI,UAAU,CAAC,UAAU,EAAE;wBACrC,qBAAM,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;wBAC1C,IAAI,QAAO,CAAC,CAAC,KAAK,QAAQ,EAAE;4BAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;yBAAE;6BAC/C;4BACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;gCACX,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;6BAC5B,CAAC,CAAC;yBACN;qBACJ;yBACI;wBACD,OAAO,CAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;qBAC3B;iBACJ,CAAC,CAAC;gBACH,OAAO,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;QAgBH,sCAAY;;;;;;;;;YAAtB,UAAuB,EAAU;gBAC7B,qBAAI,CAAiB,CAAC;gBACtB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAiB,EAAE,CAAS;oBAAO,IAAI,CAAC,KAAK,EAAE,EAAE;wBAAE,CAAC,GAAG,CAAC,CAAC;qBAAE;iBAAE,CAAC,CAAC;gBACrF,OAAO,CAAC,CAAC;aACZ;8BA5ML;QA8MC;;;;;;;QCzLyClB,wCAAe;;;;;;;;;;QAiFrD,8BAAY,WAAuB,EAAE,KAAa;YAAlD,YACI,kBAAM,WAAW,EAAE,KAAK,CAAC,SAC5B;4BA9EgD,IAAI,GAAG,EAA0B;iCACR,IAAI,GAAG,EAA8C;;SA6E9H;;;;;;;;;QA/Da,uCAAkB;;;;;;;;sBAAC,MAA+B;gBAC5D,qBAAM,CAAC,GAAqC,IAAI,OAAO,CAA0B,UAAC,OAAO,EAAE,MAAM;oBAC7F,qBAAM,EAAE,GAAG,IAAI,KAAK,EAAsD,CAAC;oBAC3E,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,KAAK;wBACxB,IAAI,KAAK,CAAC,QAAQ,EAAE;4BAChB,qBAAM,CAAC,GAA8D,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;4BACzG,IAAI,QAAO,CAAC,CAAC,KAAK,QAAQ,EAAE;gCACxB,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;gCACd,IAAI,KAAK,CAAC,KAAK,IAAI,IAAI,EAAE;oCACrB,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;oCACxC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;iCAC7C;gCACD,IAAI,KAAK,CAAC,QAAQ,CAAC,iBAAiB,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,EAAE;oCACjF,qBAAM,CAAC,GAAoB,KAAK,CAAC,QAAQ,CAAC;oCAC1C,KAAK,CAAC,MAAM,GAAG;wCACX,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,iBAAiB,CAAC,CAAC;wCACpC,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,iBAAiB,CAAC,CAAC;qCACxC,CAAC;iCACL;gCACD,OAAO,KAAK,CAAC,QAAQ,CAAC;6BACzB;iCACI;gCACD,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;oCACJ,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC;oCACnB,IAAI,KAAK,CAAC,KAAK,IAAI,IAAI,EAAE;wCACrB,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;wCACpC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;qCACzC;oCACD,IAAI,CAAC,CAAC,QAAQ,CAAC,iBAAiB,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,EAAE;wCACzE,qBAAM,CAAC,GAAoB,CAAC,CAAC,QAAQ,CAAC;wCACtC,KAAK,CAAC,MAAM,GAAG;4CACX,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,iBAAiB,CAAC,CAAC;4CACpC,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,iBAAiB,CAAC,CAAC;yCACxC,CAAC;qCACL;oCACD,OAAO,KAAK,CAAC,QAAQ,CAAC;iCACzB,CAAC,CAAC;gCACH,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;6BACd;yBACJ;qBACJ,CAAC,CAAC;oBACH,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;wBAAE,OAAO,CAAC,MAAM,CAAC,CAAC;qBAAE;yBACpC;wBACD,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC;4BACjB,OAAO,CAAC,MAAM,CAAC,CAAC;yBACnB,CAAC,CAAC;qBACN;iBACJ,CAAC,CAAC;gBACH,OAAO,CAAC,CAAC;;;;;;;;;QAuBN,uCAAQ;;;;;;;sBAAC,KAA4B;;gBACxC,qBAAM,OAAO,GAAoB;oBAC7B,EAAE,EAAE,KAAK,CAAC,EAAE;oBACZ,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,iBAAiB,EAAE,KAAK,CAAC,iBAAiB;oBAC1C,WAAW,EAAE,KAAK,CAAC,kBAAkB,KAAK,kBAAkB,CAAC,eAAe;iBAC/E,CAAC;gBACF,IAAI,KAAK,CAAC,QAAQ,EAAE;oBAAE,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;iBAAE;gBAC1D,IAAI,KAAK,CAAC,kBAAkB,EAAE;oBAAE,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC,kBAAkB,CAAC;iBAAE;gBACxF,IAAI,KAAK,CAAC,MAAM,EAAE;oBAAE,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;iBAAE;gBACpD,IAAI,KAAK,CAAC,qBAAqB,EAAE;oBAC7B,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;;iBAEzB;qBACI;oBACD,OAAO,CAAC,MAAM,GAAG,CAAC;4BACd,MAAM,EAAE,EAAE;4BACV,KAAK,EAAE,EAAE;4BACT,SAAS,EAAE,OAAO;4BAClB,QAAQ,EAAE,EAAE;4BACZ,kBAAkB,EAAE,QAAQ;4BAC5B,QAAQ,EAAE;gCACN,UAAU,EAAE,YAAY,CAAC,UAAU;gCACnC,QAAQ,EAAE,aAAa;gCACvB,QAAQ,EAAE,EAAE;gCACZ,KAAK,EAAE,OAAO;gCACd,IAAI,EAAE,QAAQ;6BACjB;yBACJ,CAAC,CAAC;iBACN;gBACD,qBAAM,sBAAsB,GAAG,UAAC,OAAqC,EAAE,SAAiB,EACpF,SAAyC;;;;;;oBAMzC,qBAAM,MAAM,GAAuC,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;oBACnF,qBAAM,QAAQ,GAAoB;wBAC9B,UAAU,EAAE,YAAY,CAAC,IAAI;qBAChC,CAAC;oBACF,qBAAM,IAAI,GAAW,KAAK,CAAC,oBAAoB,mBAAM,OAAO,GAAE,QAAQ,CAAC,CAAC;oBACxE,MAAM,CAAC,CAAC,CAAC,GAAG;wBACR,GAAG,EAAE,+BAA6B,IAAI,OAAI;wBAC1C,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,MAAM;wBAC5B,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK;wBAC1B,SAAS,EAAE,OAAO;wBAClB,QAAQ,EAAE,EAAE;wBACZ,kBAAkB,EAAE,QAAQ;qBAC/B,CAAC;oBACF,OAAO;wBACH,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE;wBAC/B,KAAK,EAAE,CAAC;qBACX,CAAC;iBACL,CAAC;gBACF,qBAAM,WAAW,GAAG,UAAC,SAAyC;oBAC1D,IAAI,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;wBAAE,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBAAE;yBAC9E;wBACD,qBAAM,MAAM,GAAuC,IAAI,KAAK,EAA+B,CAAC;wBAC5F,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBAChB,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;wBACxC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;;;;;qBAK/B;iBACJ,CAAC;gBAEF,qBAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;gBAClE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;gBACzC,YAAY,CAAC,IAAI,CAAC,UAAA,CAAC;oBACf,qBAAM,SAAS,IAAmE,CAAC,CAAC,cAAc,CAAA,CAAC;oBACnG,IAAI,OAAO,CAAC,MAAM,EAAE;wBAChB,qBAAM,CAAC,GAAI,oBAAoB,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;wBACnE,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;4BACJ,SAAS,CAAC,SAAS,mBAAqC,CAAC,EAAC,CAAC;yBAC9D,CAAC,CAAC;qBACN;yBACI;wBACD,WAAW,CAAC,SAAS,CAAC,CAAC;wBACvB,KAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,UAAC,CAA2B;4BACzD,CAAC,CAAC,WAAW,CAAC,cAAc,EAAE;gCAC1B,WAAW,CAAC,SAAS,CAAC,CAAC;6BAC1B,CAAC,CAAC;yBACN,CAAC,CAAC;wBACH,SAAS,CAAC,aAAa,CAAC,UAAC,CAAC,EAAE,CAAC;4BACzB,OAAO,sBAAsB,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;yBAClD,CAAC,CAAC;qBACN;iBACJ,CAAC,CAAC;;;;;;;;;;QAUA,2CAAY;;;;;;;;sBAAC,KAAa,EAAE,OAAuB;;gBACtD,qBAAM,CAAC,GAAmB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACnD,IAAI,CAAC,IAAI,IAAI,EAAE;oBAAE,OAAO,IAAI,KAAK,CAAC,mBAAiB,KAAK,4BAAyB,CAAC,EAAE;iBAAE;gBAEtF,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAQ;oBACnB,OAAO,KAAI,CAAC,WAAW,CAAC,YAAY,CAAC,OAAO,CAAC;yBACxC,IAAI,CAAC,UAAC,MAAc;wBACjB,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;wBACjC,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;wBAC/B,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;wBACpB,OAAO,MAAM,CAAC;qBACjB,CAAC,CAAC;iBACV,CAAC,CAAC;;;;;;;;;QASA,8CAAe;;;;;;;sBAAC,KAA4B;gBAC/C,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;;;;;;;;;QAStB,6CAAc;;;;;;;sBAAC,KAA4B;gBAC9C,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;;;;;;;;;;;;QAatB,4CAAa;;;;;;;;;;sBAAC,KAAa,EAAE,OAAwB;gBACxD,OAAO,IAAI,KAAK,CAAC,4EAA4E,CAAC,EAAE;;;;;;;;;;;;QAa7F,6CAAc;;;;;;;;;;sBAAC,KAAa,EAAE,OAA+B;gBAChE,OAAO,IAAI,KAAK,CAAC,4EAA4E,CAAC,EAAE;;;;;;;;;;;;;QAc7F,6CAAc;;;;;;;;;;;sBAAC,KAAa,EAAE,OAAyB;gBAC1D,OAAO,IAAI,KAAK,CAAC,6EAA6E,CAAC,EAAE;;;;;;;;;;;;QAa9F,8CAAe;;;;;;;;;;sBAAC,KAAa,EAAE,OAAgC;gBAClE,OAAO,IAAI,KAAK,CAAC,6EAA6E,CAAC,EAAE;;;oBAzRxGK,eAAU;;;;;wBARF,UAAU;wBAREa,WAAM;;;mCAJ3B;MAqB0C,eAAe;;;;;;;QCPflB,wCAAc;;;;;;;;;;;;QAoBpD,8BAAoB,WAAuB,EAC/B,gBACA;YAFZ,YAGI,iBAAO,SACV;YAJmB,iBAAW,GAAX,WAAW,CAAY;YAC/B,oBAAc,GAAd,cAAc;YACd,WAAK,GAAL,KAAK;2BAhB4C,IAAI,GAAG,EAA+C;;SAkBlH;;;;;;;;;QASM,4CAAa;;;;;;;;sBAAC,IAAsB;gBACvC,qBAAM,OAAO,GAAuB,EAAE,CAAC;gBACvC,IAAI,IAAI,CAAC,WAAW,KAAK,EAAE,EAAE;oBACzB,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;iBAC1C;qBACI;oBACD,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBAC3B,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;iBAC1C;gBACD,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;oBAC9B,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;wBAAE,OAAO,CAAC,WAAW,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;qBAAE;oBAC1E,IAAI,IAAI,CAAC,OAAO,EAAE;wBAAE,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;qBAAE;oBAC3D,IAAI,IAAI,CAAC,OAAO,EAAE;wBAAE,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;qBAAE;iBAC9D;gBACD,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;gBAC7C,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;gBAE/B,IAAI,OAAO,IAAI,CAAC,QAAQ,KAAK,QAAQ,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,QAAQ,EAAE;oBACzE,OAAO,CAAC,QAAQ,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC;iBAC7E;gBACD,qBAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;gBACrE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;;;;;;;;;;QAWtC,oCAAK;;;;;;;;sBAAC,IAAsB;gBAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;oBAC/B,CAAC,CAAC,KAAK,EAAE,CAAC;iBACb,CAAC,CAAC;;;;;;;;;;;;QAYA,oDAAqB;;;;;;;;;;sBAAI,SAAiB,EAAE,aAA+B;;gBAC9E,qBAAM,eAAe,GAAW,qBAAqB,CAAC,SAAS,CAAC,CAAC;gBACjE,OAAOsB,eAAU,CAAC,MAAM,CAAC,UAAC,QAAqB;oBAC3C,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAC,CAAa;wBAC9C,CAAC,CAAC,WAAW,CAAC,eAAe,EAAE,UAAC,CAAI,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAM,OAAA,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAA,CAAC,GAAA,CAAC,CAAC;qBACpF,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;QAUA,+CAAgB;;;;;;;;sBAAC,IAAsB;gBAC1C,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;;;;;;;;;;QAWtB,mCAAI;;;;;;;;sBAAC,IAAsB,EAAE,GAAc;;gBAC9C,IAAI,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,KAAK,EAAE;;oBAEzC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,GAAwB,EAAE,CAAmB;wBAC9D,IAAI,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,EAAE;4BAClB,GAAG,CAAC,IAAI,CAAC,UAAC,CAAC;gCACP,IAAI,CAAC,CAAC,MAAM,EAAE;oCACV,CAAC,CAAC,KAAK,EAAE,CAAC;oCACV,CAAC,CAAC,KAAK,EAAE,CAAC;iCACb;6BACJ,CAAC,CAAC;yBACN;qBACJ,CAAC,CAAC;iBACN;gBACD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,CAAmB;oBAClD,qBAAM,OAAO,GAAuB,EAAE,CAAC;oBACvC,IAAI,IAAI,CAAC,WAAW,KAAK,EAAE,EAAE;wBACzB,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;qBAC1C;yBACI;wBACD,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;wBAC3B,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;qBAC1C;oBACD,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;oBACtB,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE;wBACzB,OAAO,KAAI,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;4BACpE,OAAO,KAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,UAAC,GAAG,IAAK,OAAA,EAAmB,CAAC,GAAE,IAAI,CAAC,EAAe,MAAM,GAAE,cAAc,CAAC,GAAA,CAAC,CAAC;yBACvH,CAAC,CAAC;qBACN;oBACD,OAAO,KAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,UAAC,GAAG;wBACxC,IAAI,GAAG,EAAE;4BAAE,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;yBAAE;wBAChC,CAAC,CAAC,IAAI,EAAE,CAAC;qBACZ,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;;QAWA,yCAAU;;;;;;;;;sBAAC,IAAsB,EAAE,OAA2B;gBACjE,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,CAAmB;oBAClD,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;iBACzB,CAAC,CAAC;;;;;;;;;;;QAWA,0CAAW;;;;;;;;;sBAAC,IAAsB,EAAE,MAAgB;gBACvD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC;oBACzB,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;iBACzB,CAAC,CAAC;gBACH,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;;;oBA3KhCjB,eAAU;;;;;wBANF,UAAU;wBADV,aAAa;wBANDa,WAAM;;;mCAA3B;MAc0C,cAAc;;;;;;;;;;;ICGxD;;;;QAAA;;;;;;;;;;;;QAoCI,qBAAoB,MAAgC,EAAU,KAAiB,EAAU,GAAW;YAAhF,WAAM,GAAN,MAAM,CAA0B;YAAU,UAAK,GAAL,KAAK,CAAY;YAAU,QAAG,GAAH,GAAG,CAAQ;6BA/BrC,IAAI,KAAK,EAAsC;4BAClF,IAAI;SA8ByE;8BAhB9F,uCAAc;;;;;;;;;gBACrB,OAAO,IAAI,CAAC,MAAM,CAAC;;;;;;;;;;;;;;;QA+BhB,iCAAW;;;;;;;;;;sBAAC,SAAiB,EAAE,EAAY;gBAC9C,OAAO,IAAI,KAAK,CAAC,4FAA4F,CAAC,EAAE;;;;;;;;;;;;QAY7G,+BAAS;;;;;;;;;;sBAAC,MAAgD;gBAC7D,IAAI,MAAM,CAAC,cAAc,EAAE;oBACvB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC5B,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAChD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBACrD;;;;;;;;;;;QAWE,iCAAW;;;;;;;;;sBAAC,QAAmD;;gBAClE,IAAI,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAE,EAAE;oBACvE,CAAA,KAAA,IAAI,CAAC,SAAS,EAAC,IAAI,oBAAI,QAAQ,GAAE;oBACjCjB,gBAAU,UAAK,QAAQ,GAAG,UAAC,CAAC,EAAE,IAAI;wBAC9B,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;wBAC3C,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC;wBAC7CC,cAAQ,CAAC,cAAM,OAAA,IAAI,EAAE,GAAA,CAAC,CAAC;qBAC1B,CAAC,CAAC;iBACN;;;;;;;;;QAQE,4BAAM;;;;;;;gBACTD,gBAAU,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,UAAC,CAAC,EAAE,IAAI;oBACzC,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBAC9BC,cAAQ,CAAC,cAAM,OAAA,IAAI,EAAE,GAAA,CAAC,CAAC;iBAC1B,CAAC,CAAC;;;;;;;;;QAUA,gCAAU;;;;;;;;gBACb,qBAAM,OAAO,GAAkB;oBAC3B,EAAE,EAAE,IAAI,CAAC,GAAG;iBACf,CAAC;gBACF,OAAO,OAAO,CAAC;;;;;;;;;QAUZ,gCAAU;;;;;;;;gBACb,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;;;;;;QAUlB,kCAAY;;;;;;;;sBAAC,MAAgD;gBAChE,IAAI,MAAM,CAAC,cAAc,EAAE;oBACvB,qBAAM,CAAC,GAAW,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBACjD,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;wBAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;qBAAE;oBAC5C,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBACtC;;;;;;;;;;;QAWE,iCAAW;;;;;;;;;sBAAC,QAA8E;gBAC7F,IAAI,CAAC,MAAM,EAAE,CAAC;gBACd,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;;;;;;;;;;;QAWxB,gCAAU;;;;;;;;;sBAAC,OAAsB;gBACpC,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,EAAE,CAAC;;;;;;;;;;QAUnB,gCAAU;;;;;;;;sBAAC,OAAgB;gBAC9BD,gBAAU,UAAK,IAAI,CAAC,SAAS,GAAG,UAAC,CAAC,EAAE,IAAI;oBACpC,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;oBACrCC,cAAQ,CAAC,cAAM,OAAA,IAAI,EAAE,GAAA,CAAC,CAAC;iBAC1B,CAAC,CAAC;gBACH,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;;0BAtMhC;QAyMC,CAAA;;;;;;;;;;;;QC/KuCF,sCAAe;;;;;;;;;;;QAkBnD,4BAAY,WAAuB,EAAE,KAAa;YAAlD,YACI,kBAAM,WAAW,EAAE,KAAK,CAAC,SAC5B;4BAfgD,IAAI,GAAG,EAA0B;;SAejF;;;;;;;;;;;;QAYM,qCAAQ;;;;;;;;;;;sBAAC,KAAwB;;gBACpC,qBAAM,CAAC,GAAmB,IAAI,OAAO,CAAQ,UAAC,OAAO,EAAE,MAAM;oBACzD,KAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,UAAA,CAAC;wBAC9B,qBAAM,CAAC,GAAgB,IAAI,WAAW,CAAC,CAAC,EAAE,KAAI,CAAC,WAAW,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;wBACtE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;wBAC5B,OAAO,CAAC,CAAC,CAAC,CAAC;qBACd,CAAC,CAAC;iBACN,CAAC,CAAC;gBACH,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;;;;;;;;;;;QAa3B,0CAAa;;;;;;;;;;sBAAC,KAAa,EAAE,OAAwB;gBACxD,qBAAM,CAAC,GAAqB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBACpE,qBAAM,CAAC,GAAmB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAClD,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;gBACpD,OAAO,CAAC,CAAC;;;;;;;;;;;;QAaN,2CAAc;;;;;;;;;;sBAAC,KAAa,EAAE,OAA+B;;;;;;;;;gBAShE,qBAAM,CAAC,GAAmB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACnD,IAAI,CAAC,IAAI,IAAI,EAAE;oBAAE,OAAO,IAAI,KAAK,CAAC,mBAAiB,KAAK,4BAAyB,CAAC,EAAE;iBAAE;gBACtF,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAQ;oBACnB,qBAAM,QAAQ,GAA4B,IAAI,OAAO,CAAiB,UAAC,OAAO,EAAE,MAAM;wBAClF,qBAAM,KAAK,GAAyB,OAAO,CAAC,GAAG,CAAC,UAAA,CAAC;4BAC7C,qBAAM,EAAE,GAAkC,iBAAiB,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;4BACvF,qBAAM,IAAI,GAA2B,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;4BACjE,qBAAM,OAAO,GAAkB,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC;4BACvD,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,KAAK,EAAE,EAAE;gCAAE,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;6BAAE;4BAC3D,IAAI,CAAC,CAAC,QAAQ,EAAE;gCAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAQ,EAAE,GAAW,IAAK,OAAA,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAA,CAAC,CAAC;6BAAE;4BAClG,OAAO,OAAO,CAAC;yBAClB,CAAC,CAAC;wBACH,OAAO,CAAC,KAAK,CAAC,CAAC;qBAClB,CAAC,CAAC;oBACH,OAAO,QAAQ,CAAC;iBACnB,CAAC,CAAC;;;;;;;;;;;;;QAcA,2CAAc;;;;;;;;;;;sBAAC,KAAa,EAAE,OAAyB;gBAC1D,qBAAM,CAAC,GAAsC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBACtF,qBAAM,CAAC,GAAmB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAClD,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;oBACtB,qBAAM,EAAE,GAAqB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,qBAAoB,CAAC,CAAC,CAAC,CAAC,IAAG,mBAAW,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC;;wBAC5F,KAAiB,IAAA,OAAAwB,SAAA,EAAE,CAAA,sBAAA;4BAAd,IAAM,EAAE,eAAA;4BAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;yBAAE;;;;;;;;;;;;;;;;iBAC9C,CAAC,CAAC;gBACH,OAAO,CAAC,CAAC;;;;;;;;;;;;QAaN,4CAAe;;;;;;;;;;sBAAC,KAAa,EAAE,OAAgC;gBAClE,qBAAM,CAAC,GAAmB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACnD,IAAI,CAAC,IAAI,IAAI,EAAE;oBAAE,OAAO,IAAI,KAAK,CAAC,mBAAiB,KAAK,4BAAyB,CAAC,EAAE;iBAAE;gBACtF,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAQ;oBACnB,qBAAM,SAAS,GAA6C,IAAI,OAAO,CAAkC,UAAC,OAAO,EAAE,MAAM;wBACrH,qBAAM,KAAK,GAAoC,OAAO,CAAC,GAAG,CAAC,UAAA,CAAC;4BACxD,qBAAM,EAAE,GAAmC,iBAAiB,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC;4BACzF,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;gCAC1D,EAAE,CAAC,IAAI,GAAG,iBAAiB,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gCACtD,qBAAM,IAAI,GAA4B,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gCACnE,qBAAM,UAAQ,GAAmB,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC;gCAC1D,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,KAAK,EAAE,EAAE;oCAAE,UAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;iCAAE;gCAC5D,IAAI,CAAC,CAAC,QAAQ,EAAE;oCAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,UAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC;iCAAE;gCAC9E,OAAO,UAAQ,CAAC;6BACnB;iCACI;gCACD,qBAAM,KAAK,GAAwC,iBAAiB,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gCAC5F,qBAAM,OAAK,GAAoB,IAAI,KAAK,EAAY,CAAC;gCACrD,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC;oCACX,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;oCACZ,qBAAM,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oCAC1C,qBAAM,QAAQ,GAAmB,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC;oCAC1D,IAAI,CAAC,CAAC,QAAQ,EAAE;wCAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC;qCAAE;oCAC9E,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,KAAK,EAAE,EAAE;wCAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;qCAAE;oCAC3D,OAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iCACxB,CAAC,CAAC;gCACH,OAAO,OAAK,CAAC;6BAChB;yBACJ,CAAC,CAAC;wBACH,OAAO,CAAC,KAAK,CAAC,CAAC;qBAClB,CAAC,CAAC;oBACH,OAAO,SAAS,CAAC;iBACpB,CAAC,CAAC;;;oBAjKVnB,eAAU;;;;;wBAXF,UAAU;wBAdEa,WAAM;;;iCAA3B;MA0BwC,eAAe;;;;;;;;;;;;;;;;;;;;;;;;oBCNtDb,eAAU;;uCApBX;;;;;IA+FA,qBAAMoB,uBAAqB,GAAG,IAAI,wBAAwB,EAAE,CAAC;;;;;;;QAQrBzB,sCAAY;;;;;;;;;QA2BhD,4BAAiC,OAAiC,EAAU,UAAqB,EAAU,YAAyB;YAApI,YACI,iBAAO,SAIV;YALgC,aAAO,GAAP,OAAO,CAA0B;YAAU,gBAAU,GAAV,UAAU,CAAW;YAAU,kBAAY,GAAZ,YAAY,CAAa;YAEhI,IAAI,KAAI,CAAC,OAAO,KAAK,IAAI,IAAI,KAAI,CAAC,OAAO,KAAK,SAAS,EAAE;gBACrD,KAAI,CAAC,OAAO,GAAGyB,uBAAqB,CAAC;aACxC;;SACJ;8BAfU,sCAAM;;;;;;;8BAA+B,OAAO,IAAI,CAAC,OAAO,CAAC;;;;;;;;;;QA0B7D,iCAAI;;;;;;;;gBACP,IAAI,IAAI,CAAC,qBAAqB,EAAE;oBAC5B,OAAO,IAAI,CAAC,qBAAqB,CAAC;iBACrC;gBAED,qBAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAC7E,MAAM,CAAC,IAAI,GAAG,iBAAiB,CAAC;gBAChC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;gBACpB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;gBACpB,qBAAM,YAAY,GAAG,QAAQ,CAAC;gBAC9B,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;gBAEjD,IAAI,CAAC,qBAAqB,GAAG,IAAI,OAAO,CAAO,UAAC,OAAiB,EAAE,MAAgB;oBAC/E,EAAM,KAAI,CAAC,UAAU,CAAC,eAAe,EAAE,GAAE,YAAY,CAAC,GAAG;wBACrD,IAAI,KAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;;4BAE/B,qBAAM,aAAa,GAAG,KAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;4BACpF,aAAa,CAAC,IAAI,GAAG,iBAAiB,CAAC;4BACvC,aAAa,CAAC,GAAG,GAAG,KAAI,CAAC,mBAAmB,EAAE,CAAC;4BAC/C,aAAa,CAAC,MAAM,GAAG,aAAa,CAAC,kBAAkB,GAAG;gCACtD,OAAO,EAAE,CAAC;6BACb,CAAC;4BACF,KAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;yBACzE;6BAAM;4BACH,OAAO,EAAE,CAAC;yBACb;qBACJ,CAAC;oBACF,MAAM,CAAC,OAAO,GAAG,UAAC,KAAY,IAAO,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;iBACzD,CAAC,CAAC;gBACH,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBAE/D,OAAO,IAAI,CAAC,qBAAqB,CAAC;;;;;;;;;;QAe9B,6CAAgB;;;;;;;;sBAAC,YAAoB;gBACzC,qBAAM,WAAW,GAAW,IAAI,CAAC,OAAO,CAAC,WAAW,IAAI,iCAAiC,CAAC;gBAC1F,qBAAM,WAAW,GAA8C;oBAC3D,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;oBAC1B,QAAQ,EAAE,YAAY;oBACtB,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;oBACxB,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;oBAC7B,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;oBAC7B,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;oBACjC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;oBAC3B,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;iBAClC,CAAC;gBACF,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;;;;;;;;;QAU/C,gDAAmB;;;;;;;;gBACvB,qBAAM,WAAW,GAAW,IAAI,CAAC,OAAO,CAAC,kBAAkB;oBACvD,iGAAiG,CAAC;gBACtG,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;;;;;;;;;;;QAYtC,yCAAY;;;;;;;;;sBAAC,WAAmB,EAAE,WAAsD;gBAC5F,qBAAM,YAAY,KACG,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAKC,gBAAc,CAAC,KAAK,EAAC,CAAC;gBACtF,qBAAI,QAAgB,CAAC;gBAErB,QAAQ,YAAY;oBAChB,KAAKA,gBAAc,CAAC,IAAI;wBACpB,QAAQ,GAAG,EAAE,CAAC;wBACd,MAAM;oBACV,KAAKA,gBAAc,CAAC,IAAI;wBACpB,QAAQ,GAAG,OAAO,CAAC;wBACnB,MAAM;oBACV,KAAKA,gBAAc,CAAC,KAAK;wBACrB,QAAQ,GAAG,QAAQ,CAAC;wBACpB,MAAM;iBACb;gBAED,qBAAM,MAAM,GACR,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;qBACnB,MAAM,CAAC,UAAC,CAAS,IAAK,OAAA,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,GAAA,CAAC;qBAC7C,MAAM,CAAC,UAAC,CAAS;;oBAEd,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;yBAChC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;iBACpE,CAAC;qBACD,GAAG,CAAC,UAAC,CAAS;;oBAEX,qBAAM,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;oBACzB,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;wBAClB,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;qBACzC;oBACD,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;iBAC5C,CAAC;qBACD,GAAG,CAAC,UAAC,KAAqC,IAAO,OAAU,KAAK,CAAC,GAAG,SAAI,KAAK,CAAC,KAAO,CAAC,EAAE,CAAC;qBACzF,IAAI,CAAC,GAAG,CAAC,CAAC;gBACnB,OAAU,QAAQ,UAAK,WAAW,SAAI,MAAQ,CAAC;;;oBAlKtDrB,eAAU;;;;;wBA4BmC,wBAAwB,uBAApDgB,aAAQ;wBAjIH,SAAS;wBAAE,WAAW;;;iCAD7C;MAuGwC,YAAY;;;;;;ACvGpD;;;;;;;;;;;;;;;;;;;;;QA2CI,6BAAoB,WAAuB,EAC/B,eACA,iBACA;YAHQ,gBAAW,GAAX,WAAW,CAAY;YAC/B,kBAAa,GAAb,aAAa;YACb,oBAAe,GAAf,eAAe;YACf,UAAK,GAAL,KAAK;4BArB4C,IAAI,GAAG,EAAuC;SAsB1G;;;;;;;;QAQM,uCAAS;;;;;;;sBAAC,MAA0B;gBACvC,qBAAM,CAAC,GAAmB;oBACtB,MAAM,EAAE,MAAM,CAAC,MAAM;oBACrB,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,EAAE;oBACpE,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,SAAS,EAAE,MAAM,CAAC,SAAS;oBAC3B,IAAI,EAAE,MAAM,CAAC,OAAO;oBACpB,QAAQ,EAAE,MAAM,CAAC,QAAQ;oBACzB,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,MAAM,EAAE,MAAM,CAAC,MAAM;oBACrB,OAAO,EAAE,MAAM,CAAC,YAAY;oBAC5B,MAAM,EAAE,MAAM,CAAC,WAAW;iBAC7B,CAAC;;gBAGF,qBAAI,aAAa,GAAoB,IAAI,CAAC;gBAC1C,IAAI,MAAM,CAAC,cAAc,EAAE;oBACvB,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;iBACxE;qBACI,IAAI,MAAM,CAAC,aAAa,EAAE;oBAC3B,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;iBACtE;qBACI;oBACD,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;iBACpD;gBAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;gBACzC,IAAI,MAAM,CAAC,QAAQ,EAAE;oBACjB,aAAa,CAAC,IAAI,CAAC,UAAC,CAAS;;;wBAGzB,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;wBAC7C,qBAAM,CAAC,GAAW;4BACd,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC,QAAQ,CAAC,iBAAiB,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC;4BACnH,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC,QAAQ,CAAC,iBAAiB,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC;yBACvH,CAAC;wBACF,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;qBAClB,CAAC,CAAC;iBACN;;;;;;;;;;;QAWE,mDAAqB;;;;;;;;;sBAAI,SAAiB,EAAE,MAA0B;;gBACzE,OAAOC,eAAU,CAAC,MAAM,CAAC,UAAC,QAAqB;oBAC3C,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS;wBACrC,CAAC,CAAC,WAAW,CAAC,SAAS,EAAE,UAAC,CAAI,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAM,OAAA,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAA,CAAC,GAAA,CAAC,CAAC;qBAC9E,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;QAUA,0CAAY;;;;;;;sBAAC,MAA0B;;gBAC1C,qBAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACpC,IAAI,CAAC,IAAI,IAAI,EAAE;oBACX,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC5B;gBACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,EAAU;oBACrB,IAAI,MAAM,CAAC,cAAc,EAAE;wBACvB,KAAI,CAAC,eAAe,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAM,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;qBAC1F;oBACD,IAAI,MAAM,CAAC,aAAa,EAAE;wBACtB,KAAI,CAAC,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAM,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;qBACxF;oBACD,OAAO,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC;wBAClB,EAAE,CAAC,YAAY,EAAE,CAAC;wBAClB,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;qBAChC,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;QAUA,qDAAuB;;;;;;;sBAAC,CAAmB;gBAC9C,IAAI,CAAC,CAAC,EAAE;oBACJ,OAAO,IAAI,CAAC;iBACf;gBACD,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE;oBACX,OAAO,IAAI,CAAC;iBACf;gBACD,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE;oBAChC,OAAO,IAAI,CAAC;iBACf;gBACD,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC;;;;;;;;;QAU5D,6CAAe;;;;;;;sBAAC,MAA0B;gBAC7C,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;;;;;;;;;QAU9B,gDAAkB;;;;;;;sBAAC,CAAmB;gBACzC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE;oBACnD,OAAO,IAAI,CAAC;iBACf;gBACD,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,IAAI,IAAI,EAAE;oBACtC,OAAO,IAAI,CAAC;iBACf;gBAED,qBAAI,eAAe,GAAY,KAAK,CAAC;gBACrC,qBAAM,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC;gBACvC,qBAAM,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,CAAC;gBAC5B,qBAAM,CAAC,GAAW,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC3C,qBAAM,CAAC,GAAgC,CAAC,CAAC,SAAS,EAAE,CAAC;gBACrD,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE;oBAC5C,CAAC,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE,EAAE;oBAAE,eAAe,GAAG,IAAI,CAAC;iBAAE;gBAE7E,qBAAM,OAAO,GAAW,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC;gBAChE,qBAAM,OAAO,GAAW,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC;gBAChE,qBAAM,KAAK,GAAyB,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;gBAClE,OAAO;oBACH,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,IAAI,CAAC,eAAe,IAAI,KAAK,CAAC,CAAC,GAAG,OAAO,IAAI,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;oBAC3F,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,IAAI,CAAC,CAAC;iBACzC,CAAC;;;;;;;;;;;QAYC,6CAAe;;;;;;;;;sBAAC,MAAqC;;gBACxD,IAAI,MAAM,IAAI,IAAI,EAAE;oBAChB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBAChC;gBACD,IAAI,MAAM,YAAY,kBAAkB,EAAE;oBACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS;wBAC5C,qBAAM,CAAC,GAAa,CAAC,CAAC,QAAQ,CAAC;wBAC/B,qBAAM,CAAC,GAAoB,KAAI,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;wBAC/D,OAAO,CAAC,CAAC;qBACZ,CAAC,CAAC;iBACN;gBACD,OAAO,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;;;;;;;;;QAW7C,0CAAY;;;;;;;sBAAC,MAA0B;gBAC1C,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS;oBAC5C,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;iBAC9B,CAAC,CAAC;;;;;;;;;QAWA,6CAAe;;;;;;;sBAAC,MAA0B;gBAC7C,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS,IAAK,OAAA,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,SAAS,CAAC,GAAA,CAAC,CAAC;;;;;;;;;QAWpF,wCAAU;;;;;;;sBAAC,MAA0B;gBACxC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS;oBAC5C,IAAI,MAAM,CAAC,QAAQ,EAAE;wBACjB,qBAAM,CAAC,GAAmB;4BACtB,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,EAAE;4BACpE,QAAQ,EAAE,MAAM,CAAC,QAAQ;yBAC5B,CAAC;wBACF,qBAAM,CAAC,GAAiC,iBAAiB,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;wBACpF,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;wBAClB,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;qBAChD;yBAAM;wBACH,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;qBAC7B;iBAEJ,CAAC,CAAC;;;;;;;;;QAWA,yCAAW;;;;;;;sBAAC,MAA0B;gBACzC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS,IAAO,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;;;;;;;;QAWjF,kDAAoB;;;;;;;sBAAC,MAA0B;gBAClD,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CACjC,UAAC,CAAS;oBAAK,OAAA,CAAC,CAAC,WAAW,CAAC;wBACzB,QAAQ,EAAE,MAAM,CAAC,QAAQ;wBACzB,SAAS,EAAE,MAAM,CAAC,SAAS;qBAC9B,CAAC;iBAAA,CAAC,CAAC;;;;;;;;;QAWL,yCAAW;;;;;;;sBAAC,MAA0B;gBACzC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS,IAAK,OAAA,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;;;;;;;;;QAW5E,2CAAa;;;;;;;sBAAC,MAA0B;gBAC3C,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAS,IAAK,OAAA,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,GAAA,CAAC,CAAC;;;oBAlT1FjB,eAAU;;;;;wBAXF,UAAU;wBACV,YAAY;wBACZ,cAAc;wBAVFa,WAAM;;;kCAA3B;;;;;;;;;;;;ICeA;;;;QAAA;;;;;;;;;;;;QAwCI,+BAAoB,MAAsC;YAAtC,WAAM,GAAN,MAAM,CAAgC;iCAnClC,IAAI;iCACgC,IAAI,GAAG,EAAiC;4BAClE,IAAI,KAAK,EAAU;mCACZ,IAAI,KAAK,EAAU;8BAC/B,CAAC;gCACC,CAAC;4BACJ,IAAI;SA6B+B;8BAhBpD,iDAAc;;;;;;;;gBACrB,OAAO,IAAI,CAAC,MAAM,CAAC;;;;;;;;;;;;;;;QA+BhB,2CAAW;;;;;;;;;;sBAAC,SAAiB,EAAE,EAAY;gBAC9C,OAAO,IAAI,KAAK,CAAC,oGAAoG,CAAC,EAAE;;;;;;;;;;;;QAYrH,yCAAS;;;;;;;;;;sBAAC,MAAc;gBAC3B,qBAAI,QAAQ,GAAY,MAAM,YAAY,MAAM,CAAC;gBACjD,QAAQ,GAAG,MAAM,YAAY,YAAY,IAAI,QAAQ,CAAC;gBACtD,IAAI,QAAQ,EAAE;oBACV,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;oBAEnC,IAAI,MAAM,CAAC,OAAO,EAAE;wBAChB,IAAI,CAAC,cAAc,EAAE,CAAC;qBACzB;iBACJ;gBACD,IAAI,MAAM,CAAC,cAAc,IAAI,MAAM,CAAC,QAAQ,EAAE;oBAC1C,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,QAAQ,EAAE;wBACrC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;wBAC7C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;qBAC9B;yBACI;wBACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;qBACrC;oBACD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;iBACzD;gBACD,IAAI,QAAQ,EAAE;oBACV,IAAI,MAAM,CAAC,MAAM,EAAE;wBACf,IAAI,CAAC,eAAe,EAAE,CAAC;qBAC1B;iBACJ;;;;;;;;;;QAUE,2CAAW;;;;;;;;sBAAC,QAAuB;;gBACtC,IAAI,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAE,EAAE;oBACvE,qBAAM,CAAC,GAAiC,QAAQ,CAAC,GAAG,CAAC,UAAA,CAAC;wBAClD,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;wBAC5C,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;wBAE9B,OAAO,CAAC,CAAC,cAAc,CAAC;qBAC3B,CAAC,CAAC;oBACH,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,QAAQ,EAAE;wBACrC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;wBAC1B,CAAA,KAAA,IAAI,CAAC,QAAQ,EAAC,IAAI,oBAAI,QAAQ,GAAE;qBACnC;yBACI;;;;;wBAGD,CAAA,KAAA,IAAI,CAAC,eAAe,EAAC,IAAI,oBAAI,QAAQ,GAAE;qBAC1C;iBACJ;;;;;;;;;QAQE,sCAAM;;;;;;;gBACT,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,UAAA,CAAC;oBAC9B,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;iBAElB,CAAC,CAAC;gBACH,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;gBAC3B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;QAU5B,yDAAyB;;;;;;;;sBAAC,GAA0B;gBACvD,qBAAM,CAAC,GAAW,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC9C,OAAO,CAAC,CAAC;;;;;;;;;QAUN,0CAAU;;;;;;;;gBACb,qBAAM,OAAO,GAAoB;oBAC7B,EAAE,EAAE,CAAC;oBACL,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;oBACnC,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,CAAC;oBAClD,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;oBACjC,kBAAkB,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE;oBACnD,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,GAAG,oBAAoB,CAAC,SAAS,GAAG,oBAAoB,CAAC,QAAQ;oBAC7G,OAAO,EAAE,IAAI,CAAC,QAAQ;oBACtB,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE;oBACxC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;iBAClC,CAAC;gBACF,OAAO,OAAO,CAAC;;;;;;;;;QAUZ,0CAAU;;;;;;;;gBACb,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;;;;;;QAUlB,4CAAY;;;;;;;;sBAAC,MAAc;gBAC9B,IAAI,MAAM,CAAC,cAAc,IAAI,MAAM,CAAC,QAAQ,EAAE;oBAC1C,qBAAM,CAAC,GAAW,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBAChD,qBAAM,CAAC,GAAW,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBACvD,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;wBAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;qBAAE;oBAC3C,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;wBAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;qBAAE;oBAClD,IAAI,IAAI,CAAC,aAAa,EAAE;wBACpB,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;qBACnD;oBACD,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;iBACpD;;;;;;;;;;;QAWE,2CAAW;;;;;;;;;sBAAC,QAAuB;;gBACtC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,UAAA,CAAC;oBAC9B,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBAClB,CAAC,CAAC;gBACH,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;gBAC3B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC/B,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;gBAE3B,qBAAM,CAAC,GAAiC,IAAI,KAAK,EAAyB,CAAC;gBAC3E,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAM;oBACpB,IAAI,CAAC,CAAC,cAAc,IAAI,CAAC,CAAC,QAAQ,EAAE;wBAChC,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBAC9B,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;wBAC5C,IAAI,KAAI,CAAC,QAAQ,EAAE;4BACf,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BACtB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;yBAC5B;6BACI;4BACD,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;yBAChC;qBACJ;iBACJ,CAAC,CAAC;gBACH,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;QAWvB,0CAAU;;;;;;;;;sBAAC,OAAwB;gBACtC,IAAI,OAAO,CAAC,aAAa,IAAI,IAAI,EAAE;oBAC/B,OAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,EAAE;iBACzG;gBACD,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;oBAC7B,OAAM,IAAI,KAAK,CAAC,iFAAiF,CAAC,EAAE;iBACvG;gBACD,IAAI,OAAO,CAAC,QAAQ,IAAI,IAAI,EAAE,CAAE;gBAChC,IAAI,OAAO,CAAC,iBAAiB,IAAI,IAAI,EAAE;oBACnC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,iBAAiB,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC;oBACxE,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;oBAC5B,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;iBACxB;gBACD,IAAI,OAAO,CAAC,QAAQ,IAAI,IAAI,KAAK,OAAO,CAAC,iBAAiB,IAAI,IAAI,IAAI,OAAO,CAAC,iBAAiB,CAAC,EAAE;oBAC9F,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBAC1C,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;oBAC5B,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;iBACxB;gBACD,IAAI,OAAO,CAAC,OAAO,IAAI,IAAI,EAAE;oBAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;iBAAE;gBACzE,IAAI,OAAO,CAAC,kBAAkB,IAAI,IAAI,EAAE;oBAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;iBAAE;gBACtG,IAAI,OAAO,CAAC,MAAM,IAAI,IAAI,EAAE;oBAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBAAE;gBACtE,IAAI,OAAO,CAAC,OAAO,IAAI,IAAI,EAAE;oBAAE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;iBAAE;;;;;;;;;;QAU/D,0CAAU;;;;;;;;sBAAC,OAAgB;gBAC9B,qBAAM,GAAG,GAA6B,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC;gBAC5E,IAAI,CAAC,OAAO,EAAE;oBACV,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;iBACnC;qBACI;oBACD,qBAAM,GAAC,GAAiC,IAAI,KAAK,EAAyB,CAAC;oBAC3E,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;wBACjC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,CAAC;4BAC1B,IAAI,CAAC,CAAC,cAAc,IAAI,CAAC,CAAC,QAAQ,EAAE;gCAChC,GAAC,CAAC,IAAI,mBAAwB,CAAC,CAAC,cAAc,EAAC,CAAC;6BACnD;yBACJ,CAAC,CAAC;wBACH,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAC,CAAC,CAAC;wBAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;qBACxE;yBACI;wBACD,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;qBACxB;iBACJ;gBACD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;;;;;;;;;;;QAWrB,+CAAe;;;;;;;;;;;gBAClB,IAAI,IAAI,CAAC,aAAa,EAAE;oBAAE,OAAO;iBAAE;gBAEnC,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACf,qBAAM,GAAC,GAAiC,IAAI,KAAK,EAAyB,CAAC;oBAC3E,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;wBACnB,IAAI,CAAC,CAAC,cAAc,IAAI,CAAC,CAAC,QAAQ,EAAE;4BAChC,GAAC,CAAC,IAAI,mBAAwB,CAAC,CAAC,cAAc,EAAC,CAAC;yBACnD;qBACJ,CAAC,CAAC;oBACH,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,CAAC;wBAC1B,IAAI,CAAC,CAAC,cAAc,IAAI,CAAC,CAAC,QAAQ,EAAE;4BAChC,GAAC,CAAC,IAAI,mBAAwB,CAAC,CAAC,cAAc,EAAC,CAAC;yBACnD;qBACJ,CAAC,CAAC;oBACH,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAC,CAAC,CAAC;oBAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;iBACxE;gBAED,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;;;oBAGhBJ,UAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;wBACf,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;qBACnC,CAAC,CAAC;iBACN;gBACD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;;;;;;;;;;;;QAavB,8CAAc;;;;;;;;;;;gBACjB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;oBAAE,OAAO;iBAAE;gBACpC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;;oCA3WnC;QA6WC,CAAA;;;;;;AC7WD;;;;;;;;;;;;;;;;QA0GI,0BAAoB,OAAqB,EAAU,KAAa;YAAhE,iBAKC;YALmB,YAAO,GAAP,OAAO,CAAc;YAAU,UAAK,GAAL,KAAK,CAAQ;YAC5D,IAAI,CAAC,IAAI,GAAG,IAAI,OAAO,CACnB,UAAC,OAAgD,IAAO,KAAI,CAAC,YAAY,GAAG,OAAO,CAAC,EAAE,CACzF,CAAC;YACF,IAAI,CAAC,OAAO,GAAG,EAAqB,IAAI,CAAC,OAAO,GAAE,MAAM,CAAC;SAC5D;8BA1CU,yCAAW;;;;;;;8BAA+B,OAAO,IAAI,CAAC,YAAY,CAAC;;;;8BAQnE,wCAAU;;;;;;;8BAAwC,OAAO,IAAI,CAAC,IAAI,CAAC;;;;8BASnE,qCAAO;;;;;;;;;gBACd,IAAI,IAAI,CAAC,WAAW,EAAE;oBAClB,qBAAM,EAAE,GAAmB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;oBACrD,qBAAM,CAAC,GAAU,EAAE,KAAK,EAAE,EAAE,CAAC,WAAW,EAAE,MAAM,EAAE,EAAE,CAAC,YAAY,EAAE,CAAC;oBACpE,OAAO,CAAC,CAAC;iBACZ;gBACD,OAAO,IAAI,CAAC;;;;;;;;;;;;;QAiCT,8CAAmB;;;;;;;;sBAAC,YAAiD;gBACxE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAA6B;oBAChD,qBAAM,OAAO,GAAwB,IAAI,mBAAmB,CAAC,YAAY,CAAC,CAAC;oBAC3E,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBACpB,OAAO,OAAO,CAAC;iBAClB,CAAC,CAAC;;;;;;QAWA,6CAAkB;;;;sBAAC,OAAwB;gBAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAA6B;oBAChD,qBAAI,aAAa,GAAY,KAAK,CAAC;oBACnC,qBAAM,eAAe,GAAmC,IAAI,eAAe,CAAC,GAAG,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;oBAC9F,qBAAM,YAAY,GAAG,IAAI,qBAAqB,CAAC,eAAe,CAAC,CAAC;oBAChE,qBAAM,CAAC,GAAoB;wBACvB,EAAE,EAAE,OAAO,CAAC,EAAE;qBACjB,CAAC;oBACF,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;wBAClB,CAAC,CAAC,OAAO,GAAG,KAAK,CAAC;wBAClB,aAAa,GAAG,IAAI,CAAC;qBACxB;oBACD,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE;wBAC5B,CAAC,CAAC,iBAAiB,GAAG,KAAK,CAAC;wBAC5B,aAAa,GAAG,IAAI,CAAC;qBACxB;oBACD,IAAI,aAAa,EAAE;wBACf,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;qBAC9B;oBACD,OAAO,YAAY,CAAC;iBACvB,CAAC,CAAC;;;;;;;;;;QAWA,2CAAgB;;;;;;;;sBAAC,OAA4B;;gBAChD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAA6B;oBAChD,qBAAM,CAAC,GAAqC,iBAAiB,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;oBAClG,qBAAM,UAAU,GAA8B,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBAC5E,OAAO,IAAI,gBAAgB,CAAC,UAAU,EAAE,KAAI,CAAC,CAAC;iBACjD,CAAC,CAAC;;;;;;;;;;QAWA,sCAAW;;;;;;;;sBAAC,OAAsB;;gBACrC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAA6B;oBAC/C,OAAO,IAAI,WAAW,CAAC,GAAG,EAAE,KAAI,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;iBAClD,CAAC,CAAC;;;;;;;;;;;QAYA,oCAAS;;;;;;;;;sBAAC,EAAe,EAAE,UAAuB;;gBACrD,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;;oBAE5Ba,8BAA4B,EAAE,CAAC;oBAC/BC,oBAAkB,EAAE,CAAC;;oBAGrB,IAAI,CAAC,UAAU,CAAC,SAAS,IAAI,IAAI,EAAE;wBAAE,UAAU,CAAC,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC;qBAAE;oBAC/E,IAAI,KAAI,CAAC,YAAY,IAAI,IAAI,EAAE;wBAC3B,KAAI,CAAC,UAAU,EAAE,CAAC;qBACrB;oBACD,qBAAM,CAAC,GAA8B,iBAAiB,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;oBACpF,qBAAM,GAAG,GAA6B,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBACjE,IAAI,UAAU,CAAC,MAAM,EAAE;wBACnB,GAAG,CAAC,SAAS,CAAC,iBAAiB,CAAC,eAAe,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;qBACvE;oBACD,KAAI,CAAC,YAAY,GAAG,GAAG,CAAC;oBACxB,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;oBACvB,OAAO;iBACV,CAAC,CAAC;;;;;;;;;;QAWA,uCAAY;;;;;;;;sBAAC,OAA4C;gBAA5C,wBAAA;oBAAA,4BAA0C,EAAE,CAAA;;gBAC5D,qBAAM,OAAO,GAAG,UAAC,CAA+B,EAAE,GAA6B;oBAC3E,qBAAM,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACzC,qBAAM,CAAC,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;oBACnC,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;oBAC5B,CAAC,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;oBAC1B,IAAI,OAAO,CAAC,QAAQ,EAAE;wBAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAQ,EAAE,GAAW,IAAK,OAAA,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAA,CAAC,CAAC;qBAAE;oBACxG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBACnB,OAAO,CAAC,CAAC;iBACZ,CAAC;gBACF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAA6B;oBAChD,qBAAM,CAAC,GAAiC,iBAAiB,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;oBAC1F,IAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE;wBACjD,qBAAM,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;wBAChD,IAAI,QAAO,CAAC,CAAC,KAAK,QAAQ,EAAE;4BACxB,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;4BACX,OAAO,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;yBAC1B;6BACI;4BACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;gCACX,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;gCAChB,OAAO,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;6BAC1B,CAAC,CAAC;yBACN;qBACJ;yBACI;wBACD,OAAO,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;qBAC1B;iBACJ,CAAC,CAAC;;;;;;;;;;;QAYA,wCAAa;;;;;;;;;sBAAC,OAAwB;gBACzC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAA6B;oBAChD,qBAAM,CAAC,GAAkC,iBAAiB,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;oBAC5F,qBAAM,OAAO,GAA2B,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBACnE,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAEpB,qBAAM,CAAC,GAAkB,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;oBACpD,IAAI,OAAO,CAAC,QAAQ,EAAE;wBAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAQ,EAAE,GAAW,IAAK,OAAA,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAA,CAAC,CAAC;qBAAE;oBACxG,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,KAAK,EAAE,EAAE;wBAAE,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;qBAAE;oBACvE,IAAI,OAAO,CAAC,SAAS,IAAI,IAAI,EAAE;wBAAE,CAAC,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;qBAAE;oBACnE,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;wBAAE,CAAC,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;qBAAE;oBACzE,IAAI,OAAO,CAAC,YAAY,IAAI,IAAI,EAAE;wBAAE,CAAC,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;qBAAE;oBAC5E,IAAI,OAAO,CAAC,YAAY,IAAI,IAAI,EAAE;wBAAE,CAAC,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;qBAAE;oBAC5E,OAAO,CAAC,CAAC;iBACZ,CAAC,CAAC;;;;;;;;;;;;QAaA,yCAAc;;;;;;;;;;sBAAC,OAAyB;gBAC3C,qBAAI,QAAiC,CAAC;gBACtC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAA6B;oBAChD,qBAAM,CAAC,GAAmC,iBAAiB,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;oBAC9F,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;wBAC5E,CAAC,CAAC,IAAI,GAAG,iBAAiB,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC3D,QAAQ,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;wBACvC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;wBAErB,qBAAM,IAAE,GAAG,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC;wBACxC,IAAI,OAAO,CAAC,QAAQ,EAAE;4BAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAQ,EAAE,GAAW,IAAK,OAAA,IAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAA,CAAC,CAAC;yBAAE;wBACzG,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,KAAK,EAAE,EAAE;4BAAE,IAAE,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;yBAAE;wBACxE,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;4BAAE,IAAE,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;yBAAE;wBAC1E,OAAO,IAAE,CAAC;qBACb;yBACI;wBACD,qBAAM,KAAK,GAAwC,iBAAiB,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBAClG,qBAAM,OAAK,GAAoB,IAAI,KAAK,EAAY,CAAC;wBACrD,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC;4BACX,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;4BACX,QAAQ,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;4BACvC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;4BAErB,qBAAM,EAAE,GAAG,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC;4BACxC,IAAI,OAAO,CAAC,QAAQ,EAAE;gCAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAQ,EAAE,GAAW,IAAK,OAAA,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAA,CAAC,CAAC;6BAAE;4BACzG,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,KAAK,EAAE,EAAE;gCAAE,EAAE,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;6BAAE;4BACxE,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;gCAAE,EAAE,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;6BAAE;4BAC1E,OAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;yBAClB,CAAC,CAAC;wBACH,OAAO,OAAK,CAAC;qBAChB;iBACJ,CAAC,CAAC;;;;;;;;;;QAWA,sCAAW;;;;;;;;sBAAC,KAAY;;gBAE3B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;;;;;;;;QAQtB,qCAAU;;;;;;;;gBACb,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;oBAAE,OAAO;iBAAE;gBAC/D,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;oBAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;oBACzB,IAAI,CAAC,IAAI,GAAG,IAAI,OAAO,CAA2B,UAAC,OAAmB,IAAO,KAAI,CAAC,YAAY,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;iBAChH;;;;;;;;;QAUE,oCAAS;;;;;;;;gBACZ,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAA6B;oBAChD,qBAAM,MAAM,GAA0B,GAAG,CAAC,SAAS,EAAE,CAAC;oBACtD,yBAAiB;wBACb,QAAQ,EAAE,MAAM,CAAC,GAAG,EAAE;wBACtB,SAAS,EAAE,MAAM,CAAC,GAAG,EAAE;qBAC1B,EAAC;iBACL,CAAC,CAAC;;;;;;;;;QAUA,oCAAS;;;;;;;;gBACZ,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAA6B;oBAChD,qBAAM,GAAG,GAAG,GAAG,CAAC,SAAS,EAAE,CAAC;oBAC5B,yBAAa;wBACT,WAAW,EAAE,GAAG,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE;wBACrC,YAAY,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE,EAAE,GAAG,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE,CAAC;wBAC1E,WAAW,EAAE,GAAG,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE;wBACrC,YAAY,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE,EAAE,GAAG,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE,CAAC;wBAC1E,MAAM,EAAE,EAAE,QAAQ,EAAE,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE;wBAC7E,OAAO,EAAE,CAAC;qBACb,EAAC;iBACL,CAAC,CAAC;;;;;;;;;QAUA,kCAAO;;;;;;;;gBACV,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAA6B,IAAK,OAAA,GAAG,CAAC,OAAO,EAAE,GAAA,CAAC,CAAC;;;;;;;;;;;QAYrE,0CAAe;;;;;;;;;sBAAC,GAAa;gBAChC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,CAA2B;oBAC9C,qBAAI,eAAe,GAAY,KAAK,CAAC;oBACrC,qBAAM,CAAC,GAA0B,iBAAiB,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;oBAChF,qBAAM,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,CAAC;oBAC5B,qBAAM,CAAC,GAAW,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;oBAC3C,qBAAM,CAAC,GAAgC,CAAC,CAAC,SAAS,EAAE,CAAC;oBACrD,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE;wBAC5C,CAAC,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE,EAAE;wBAAE,eAAe,GAAG,IAAI,CAAC;qBAAE;oBAG7E,qBAAM,OAAO,GAAW,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC;oBAChE,qBAAM,OAAO,GAAW,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC;oBAChE,qBAAM,KAAK,GAAyB,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;oBAC3D,OAAO;wBACH,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,IAAI,CAAC,eAAe,IAAI,KAAK,CAAC,CAAC,GAAG,OAAO,IAAI,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;wBAC3F,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,IAAI,CAAC,CAAC;qBACzC,CAAC;iBACL,CAAC,CAAC;;;;;;;;;;QAWA,4CAAiB;;;;;;;;sBAAC,IAAqB;gBAC1C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,CAA2B;oBAC9C,qBAAI,eAAe,GAAY,KAAK,CAAC;oBACrC,qBAAM,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,CAAC;oBAC5B,qBAAM,CAAC,GAAW,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;oBAC3C,qBAAM,CAAC,GAAgC,CAAC,CAAC,SAAS,EAAE,CAAC;oBACrD,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE;wBAC5C,CAAC,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE,EAAE;wBAAE,eAAe,GAAG,IAAI,CAAC;qBAAE;oBAE7E,qBAAM,OAAO,GAAW,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC;oBAChE,qBAAM,OAAO,GAAW,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC;oBAChE,qBAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,UAAA,EAAE;wBACjB,qBAAM,EAAE,GAA0B,iBAAiB,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC;wBAChF,qBAAM,KAAK,GAAyB,CAAC,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;wBAC5D,OAAO;4BACH,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,IAAI,CAAC,eAAe,IAAI,KAAK,CAAC,CAAC,GAAG,OAAO,IAAI,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;4BAC3F,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,IAAI,CAAC,CAAC;yBACzC,CAAC;qBACL,CAAC,CAAC;oBACH,OAAO,CAAC,CAAC;iBACZ,CAAC,CAAC;;;;;;;;;;QAWA,oCAAS;;;;;;;;sBAAC,MAAgB;gBAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAA6B;oBAChD,qBAAM,MAAM,GAA0B,iBAAiB,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;oBACxF,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;iBACzB,CAAC,CAAC;;;;;;;;;;QAUA,wCAAa;;;;;;;;sBAAC,OAAoB;gBACrC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,CAA2B;oBACvC,qBAAM,CAAC,GAA8B,iBAAiB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;oBACjF,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;iBACnB,CAAC,CAAC;;;;;;;;;;QAUA,yCAAc;;;;;;;;sBAAC,OAAoB;gBACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,CAA2B;oBACvC,IAAI,OAAO,CAAC,MAAM,EAAE;wBAChB,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;qBAClE;oBACD,qBAAM,CAAC,GAA8B,iBAAiB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;oBACjF,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;iBACnB,CAAC,CAAC;;;;;;;;;;QAWA,kCAAO;;;;;;;;sBAAC,IAAY;gBACvB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAA6B,IAAK,OAAA,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,GAAA,CAAC,CAAC;;;;;;;;;;;QAWzE,8CAAmB;;;;;;;;;sBAAI,SAAiB;;gBAC3C,qBAAM,eAAe,GAAW,qBAAqB,CAAC,SAAS,CAAC,CAAC;gBACjE,OAAON,eAAU,CAAC,MAAM,CAAC,UAAC,QAAqB;oBAC3C,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,CAA2B;wBACvC,CAAC,CAAC,WAAW,CAAC,eAAe,EAAE,UAAC,CAAM;4BAClC,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAM,OAAA,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;yBAC1C,CAAC,CAAC;qBACN,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;QAWA,0CAAe;;;;;;;;sBAAC,SAAiB;gBACpC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,CAAC,IAAK,OAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,GAAA,CAAC,CAAC;;;oBA9fnFjB,eAAU;;;;;wBAzCF,YAAY;wBAHAa,WAAM;;;+BAF3B;;;;;;;ACCA;;;;;;;;;;;;;;;;;;QAkCI,8BAAoB,WAAuB,EAC/B,eACA;YAFQ,gBAAW,GAAX,WAAW,CAAY;YAC/B,kBAAa,GAAb,aAAa;YACb,UAAK,GAAL,KAAK;6BAjB+C,IAAI,GAAG,EAAyC;SAkB/G;;;;;;;;;;QAcM,yCAAU;;;;;;;;;sBAAC,OAA4B;gBAC1C,qBAAM,CAAC,GAAoB;oBACvB,EAAE,EAAE,OAAO,CAAC,EAAE;oBACd,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,QAAQ,EAAE,OAAO,CAAC,QAAQ;oBAC1B,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,QAAQ,EAAE,OAAO,CAAC,QAAQ;oBAC1B,YAAY,EAAE,OAAO,CAAC,YAAY;oBAClC,YAAY,EAAE,OAAO,CAAC,YAAY;oBAClC,KAAK,EAAE,OAAO,CAAC,KAAK;oBACpB,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,aAAa,EAAE,OAAO,CAAC,aAAa;oBACpC,YAAY,EAAE,OAAO,CAAC,YAAY;oBAClC,KAAK,EAAE,OAAO,CAAC,KAAK;oBACpB,OAAO,EAAE,OAAO,CAAC,OAAO;oBACxB,MAAM,EAAE,OAAO,CAAC,MAAM;iBACzB,CAAC;gBACF,qBAAM,cAAc,GAAqB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBAC3E,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;;;;;;;;;;;;QAYzC,oDAAqB;;;;;;;;;;sBAAI,SAAiB,EAAE,OAA4B;;gBAC3E,OAAOI,eAAU,CAAC,MAAM,CAAC,UAAC,QAAqB;oBAC3C,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAU;wBACxC,CAAC,CAAC,WAAW,CAAC,SAAS,EAAE,UAAC,CAAI,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAM,OAAA,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAA,CAAC,GAAA,CAAC,CAAC;qBAC9E,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;QAWA,4CAAa;;;;;;;;sBAAC,OAA4B;;gBAC7C,qBAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACtC,IAAI,CAAC,IAAI,IAAI,EAAE;oBACX,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC5B;gBACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAU;oBACrB,OAAO,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC;wBAClB,CAAC,CAAC,MAAM,EAAE,CAAC;wBACX,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;qBAClC,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;;QAaA,sDAAuB;;;;;;;;;sBAAC,CAAmB;gBAC9C,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC;;;;;;;;;;QAW5D,+CAAgB;;;;;;;;sBAAC,OAA4B;gBAChD,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;;;;;;;;;;;;QAahC,yCAAU;;;;;;;;;;sBAAC,OAA4B,EAAE,OAAwB;gBACpE,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAU,IAAO,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;;;;;;;;;;QAWjF,4CAAa;;;;;;;;sBAAC,OAA4B;gBAC7C,qBAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACtC,IAAI,CAAC,IAAI,IAAI,IAAI,OAAO,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBACnG,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC5B;gBACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAU;oBACrB,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;wBACjC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;qBAC7B;yBACI;wBACD,CAAC,CAAC,OAAO,mBAAkB,OAAO,CAAC,KAAK,EAAC,CAAC;qBAC7C;iBACJ,CAAC,CAAC;;;oBAjKVjB,eAAU;;;;;wBAPF,UAAU;wBACV,YAAY;wBAPAa,WAAM;;;mCAD3B;;;;;;;ACCA;;;;;;;;;;;;;;;;;;QAoCI,+BAAoB,WAAuB,EAC/B,eACA;YAFQ,gBAAW,GAAX,WAAW,CAAY;YAC/B,kBAAa,GAAb,aAAa;YACb,UAAK,GAAL,KAAK;8BAjBb,IAAI,GAAG,EAA2D;SAiBxC;;;;;;;;;;QAcvB,2CAAW;;;;;;;;;sBAAC,QAA8B;gBAC7C,qBAAM,CAAC,GAAqB;oBACxB,EAAE,EAAE,QAAQ,CAAC,EAAE;oBACf,SAAS,EAAE,QAAQ,CAAC,SAAS;oBAC7B,SAAS,EAAE,QAAQ,CAAC,SAAS;oBAC7B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;oBAC3B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;oBAC3B,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,WAAW,EAAE,QAAQ,CAAC,WAAW;oBACjC,WAAW,EAAE,QAAQ,CAAC,WAAW;oBACjC,aAAa,EAAE,QAAQ,CAAC,aAAa;oBACrC,YAAY,EAAE,QAAQ,CAAC,YAAY;oBACnC,KAAK,EAAE,QAAQ,CAAC,KAAK;oBACrB,OAAO,EAAE,QAAQ,CAAC,OAAO;oBACzB,MAAM,EAAE,QAAQ,CAAC,MAAM;iBAC1B,CAAC;gBACF,qBAAM,eAAe,GAAsC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBAC9F,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;;;;;;;;;;;;QAY5C,qDAAqB;;;;;;;;;;sBAAI,SAAiB,EAAE,QAA8B;;gBAC7E,OAAOI,eAAU,CAAC,MAAM,CAAC,UAAC,QAAqB;oBAC3C,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;wBAChC,qBAAM,CAAC,GAAoB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACtD,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,UAAC,CAAI,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAM,OAAA,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAA,CAAC,GAAA,CAAC,GAAA,CAAC,CAAC;qBACpG,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;QAWA,8CAAc;;;;;;;;sBAAC,QAA8B;;gBAChD,qBAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACxC,IAAI,CAAC,IAAI,IAAI,EAAE;oBACX,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC5B;gBACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;oBACX,OAAO,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC;wBAClB,qBAAM,CAAC,GAAoB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACtD,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI,IAAK,OAAA,IAAI,CAAC,MAAM,EAAE,GAAA,CAAC,CAAC;wBAClC,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;qBACpC,CAAC,CAAC;iBACN,CAAC,CAAC;;;;;;;;;;;QAaA,uDAAuB;;;;;;;;;sBAAC,CAAmB;gBAC9C,IAAI,CAAC,CAAC,EAAE;oBACJ,OAAO,IAAI,CAAC;iBACf;gBACD,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE;oBACX,OAAO,IAAI,CAAC;iBACf;gBACD,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE;oBAChC,OAAO,IAAI,CAAC;iBACf;gBACD,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC;;;;;;;;;;;QAY5D,iDAAiB;;;;;;;;;sBAAC,QAA8B;gBACnD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;;;;;;;;;;;;QAalC,0CAAU;;;;;;;;;;sBAAC,QAA8B,EAAE,OAAyB;gBACvE,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;oBACvC,qBAAM,CAAC,GAAoB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACtD,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,GAAA,CAAC,CAAC;iBAC/C,CAAC,CAAC;;;;;;;;;;QAWA,8CAAc;;;;;;;;sBAAC,QAA8B;;gBAChD,qBAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACxC,IAAI,CAAC,IAAI,IAAI,EAAE;oBACX,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC5B;gBACD,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;oBAAI,OAAA,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC;wBAC9B,qBAAM,CAAC,GAAoB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACtD,qBAAM,CAAC,GACH,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,qBAA2B,QAAQ,CAAC,IAAI,sBAC3E,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA,CAAC;wBAC5C,CAAC,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK;4BAClB,IAAI,CAAC,CAAC,MAAM,GAAG,KAAK,EAAE;gCAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;6BAAE;yBACpD,CAAC,CAAC;wBACH,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,EAAE;4BACzC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,EAAE,GAAA,CAAC,CAAC;yBACzD;qBACJ,CAAC;iBAAA,CAAC,CAAC;;;oBA/KXjB,eAAU;;;;;wBARF,UAAU;wBACV,YAAY;wBAPAa,WAAM;;;oCAD3B;;;;;;;ACAA;;;;;;;;;;;;;;;;QA2CI,iCAAoB,OAAqB,EAAU,KAAa;YAAhE,iBAGC;YAHmB,YAAO,GAAP,OAAO,CAAc;YAAU,UAAK,GAAL,KAAK,CAAQ;YAC5D,IAAI,CAAC,IAAI;gBACL,IAAI,OAAO,CAA2B,UAAC,OAAmB,IAAO,KAAI,CAAC,YAAY,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;SACxG;;;;;;;;QAaM,wCAAM;;;;;;;;gBACT,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;QAWnD,sDAAoB;;;;;;;;sBAAC,WAAuB;gBAC/C,OAAO,IAAI,oBAAoB,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;;QAYtD,sDAAoB;;;;;;;;;sBAAC,WAAuB,EAAE,cAA6B;gBAC9E,OAAO,IAAI,oBAAoB,CAAC,WAAW,EAAE,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;QAWtE,oDAAkB;;;;;;;;sBAAC,WAAuB;gBAC7C,OAAO,IAAI,kBAAkB,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;;;QAapD,qDAAmB;;;;;;;;;;sBAAC,WAAuB,EAAE,aAAiC,EAAE,eAAqC;gBACxH,OAAO,IAAI,mBAAmB,CAAC,WAAW,EAAE,aAAa,EAAE,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;;QAYrF,sDAAoB;;;;;;;;;sBAAC,GAAe,EAAE,MAAoB;gBAC7D,OAAO,IAAI,oBAAoB,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;;QAYtD,uDAAqB;;;;;;;;;sBAAC,GAAe,EAAE,MAAoB;gBAC9D,OAAO,IAAI,qBAAqB,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;;;oBA9GjEb,eAAU;;;;;wBAxBF,YAAY;wBAHAa,WAAM;;;sCAA3B;;;;;;;;;;AAsJA,4CAA+C,SAAuB,EAAE,IAAY;QAChF,OAAO,IAAI,uBAAuB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;KACvD;;;;;;;AAQD;QACI,OAAO,IAAI,kBAAkB,CAAC,IAAI,wBAAwB,EAAE,EAAE,IAAI,SAAS,EAAE,EAAE,IAAI,WAAW,EAAE,CAAC,CAAC;KACrG;;;;;;AClKD;;;;;;;;QAuKW,iBAAO;;;;;YAAd,UAAe,iBAAqC,EAAE,MAAqB;gBACvE,OAAO;oBACH,QAAQ,EAAE,SAAS;oBACnB,SAAS,EAAE;wBACP,iBAAiB,GAAG,EAAE,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,iBAAiB,EAAE;4BAC3E,EAAE,OAAO,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,YAAY,EAAEA,WAAM,CAAC,EAAE,UAAU,EAAE,4BAA4B,EAAE;wBAC1G,MAAM,GAAG,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,oBAAoB,EAAE;wBAClH,WAAW;wBACX,SAAS;qBACZ;iBACJ,CAAC;aACL;;;;QAEM,qBAAW;;;YAAlB;gBACI,OAAO;oBACH,QAAQ,EAAE,SAAS;oBACnB,SAAS,EAAE;wBACP,EAAE,OAAO,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,YAAY,EAAEA,WAAM,CAAC,EAAE,UAAU,EAAE,4BAA4B,EAAE;wBACtG,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,oBAAoB,EAAE;wBAC3D,WAAW;wBACX,SAAS;qBACZ;iBACJ,CAAC;aACL;;;;QAEM,uBAAa;;;YAApB;gBACI,OAAO;oBACH,QAAQ,EAAE,SAAS;oBACnB,SAAS,EAAE;wBACP,EAAE,OAAO,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,YAAY,EAAEA,WAAM,CAAC,EAAE,UAAU,EAAE,8BAA8B,EAAE;wBACxG,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,sBAAsB,EAAE;wBAC7D,WAAW;wBACX,SAAS;qBACZ;iBACJ,CAAC;aACL;;oBAnEJW,aAAQ,SAAC;wBACN,YAAY,EAAE;4BACV,iBAAiB;4BACjB,YAAY;4BACZ,kBAAkB;4BAClB,gBAAgB;4BAChB,sBAAsB;4BACtB,mBAAmB;4BACnB,oBAAoB;4BACpB,qBAAqB;4BACrB,uBAAuB;4BACvB,wBAAwB;4BACxB,yBAAyB;yBAC5B;wBACD,OAAO,EAAE,CAACC,mBAAY,CAAC;wBACvB,OAAO,EAAE;4BACLA,mBAAY;4BACZ,YAAY;4BACZ,kBAAkB;4BAClB,mBAAmB;4BACnB,oBAAoB;4BACpB,gBAAgB;4BAChB,sBAAsB;4BACtB,iBAAiB;4BACjB,qBAAqB;4BACrB,uBAAuB;4BACvB,wBAAwB;4BACxB,yBAAyB;yBAC5B;qBACJ;;wBApKD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
