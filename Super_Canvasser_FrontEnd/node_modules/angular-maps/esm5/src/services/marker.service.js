/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * The abstract class represents the contract defintions for a marker service to be implemented by an acutaly underlying
 * map architecture.
 *
 * @export
 * @abstract
 * @abstract
 */
var MarkerService = /** @class */ (function () {
    function MarkerService() {
    }
    MarkerService.decorators = [
        { type: Injectable },
    ];
    return MarkerService;
}());
export { MarkerService };
function MarkerService_tsickle_Closure_declarations() {
    /**
     * Adds a marker. Depending on the marker context, the marker will either by added to the map or a correcsponding layer.
     *
     * @abstract
     * \@memberof MarkerService
     * @abstract
     * @param {?} marker - The {\@link MapMarkerDirective} to be added.
     *
     * @return {?}
     */
    MarkerService.prototype.AddMarker = function (marker) { };
    /**
     * Registers an event delegate for a marker.
     *
     * @abstract
     * \@memberof MarkerService
     * @abstract
     * @template T
     * @param {?} eventName - The name of the event to register (e.g. 'click')
     * @param {?} marker - The {\@link MapMarker} for which to register the event.
     * @return {?} - Observable emiting an instance of T each time the event occurs.
     *
     */
    MarkerService.prototype.CreateEventObservable = function (eventName, marker) { };
    /**
     * Deletes a marker.
     *
     * @abstract
     * \@memberof MarkerService
     * @abstract
     * @param {?} marker - {\@link MapMarkerDirective} to be deleted.
     * @return {?} - A promise fullfilled once the marker has been deleted.
     *
     */
    MarkerService.prototype.DeleteMarker = function (marker) { };
    /**
     * Obtains geo coordinates for the marker on the click location
     *
     * @abstract
     * \@memberof MarkerService
     * @abstract
     * @param {?} e - The mouse event.
     * @return {?} - {\@link ILatLong} containing the geo coordinates of the clicked marker.
     *
     */
    MarkerService.prototype.GetCoordinatesFromClick = function (e) { };
    /**
     * Obtains the marker model for the marker allowing access to native implementation functionatiliy.
     *
     * @abstract
     * \@memberof MarkerService
     * @abstract
     * @param {?} marker - The {\@link MapMarkerDirective} for which to obtain the marker model.
     * @return {?} - A promise that when fullfilled contains the {\@link Marker} implementation of the underlying platform.
     *
     */
    MarkerService.prototype.GetNativeMarker = function (marker) { };
    /**
     * Obtains the marker pixel location for the marker on the click location
     *
     * @abstract
     * \@memberof MarkerService
     * @abstract
     * @param {?} e - The mouse event.
     * @return {?} - {\@link ILatLong} containing the pixels of the marker on the map canvas.
     *
     */
    MarkerService.prototype.GetPixelsFromClick = function (e) { };
    /**
     * Converts a geo location to a pixel location relative to the map canvas.
     *
     * @abstract
     * \@memberof MarkerService
     * @abstract
     * @param {?} target - Either a {\@link MapMarkerDirective} or a {\@link ILatLong}
     * for the basis of translation.
     * @return {?} - A promise that when fullfilled contains a {\@link IPoint}
     * with the pixel coordinates of the MapMarkerDirective or ILatLong relative to the map canvas.
     *
     */
    MarkerService.prototype.LocationToPoint = function (target) { };
    /**
     * Updates the anchor position for the marker.
     *
     * @abstract
     * \@memberof MarkerService
     * @abstract
     * @param {?} maker
     * @return {?} - A promise that is fullfilled when the anchor position has been updated.
     *
     */
    MarkerService.prototype.UpdateAnchor = function (maker) { };
    /**
     * Updates whether the marker is draggable.
     *
     * @abstract
     * \@memberof MarkerService
     * @abstract
     * @param {?} marker
     * @return {?} - A promise that is fullfilled when the marker has been updated.
     *
     */
    MarkerService.prototype.UpdateDraggable = function (marker) { };
    /**
     * Updates the Icon on the marker.
     *
     * @abstract
     * \@memberof MarkerService
     * @abstract
     * @param {?} marker
     * @return {?} - A promise that is fullfilled when the icon information has been updated.
     *
     */
    MarkerService.prototype.UpdateIcon = function (marker) { };
    /**
     * Updates the label on the marker.
     *
     * @abstract
     * \@memberof MarkerService
     * @abstract
     * @param {?} marker
     * @return {?} - A promise that is fullfilled when the label has been updated.
     *
     */
    MarkerService.prototype.UpdateLabel = function (marker) { };
    /**
     * Updates the geo coordinates for the marker.
     *
     * @abstract
     * \@memberof MarkerService
     * @abstract
     * @param {?} marker
     * @return {?} - A promise that is fullfilled when the position has been updated.
     *
     */
    MarkerService.prototype.UpdateMarkerPosition = function (marker) { };
    /**
     * Updates the title on the marker.
     *
     * @abstract
     * \@memberof MarkerService
     * @abstract
     * @param {?} marker
     * @return {?} - A promise that is fullfilled when the title has been updated.
     *
     */
    MarkerService.prototype.UpdateTitle = function (marker) { };
    /**
     * Updates the visibility on the marker.
     *
     * @abstract
     * \@memberof MarkerService
     * @abstract
     * @param {?} marker
     * @return {?} - A promise that is fullfilled when the visibility has been updated.
     *
     */
    MarkerService.prototype.UpdateVisible = function (marker) { };
}

//# sourceMappingURL=data:application/json;base64,