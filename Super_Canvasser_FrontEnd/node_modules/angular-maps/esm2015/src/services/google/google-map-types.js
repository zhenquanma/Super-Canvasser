/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
export let /** @type {?} */ google;
/**
 * @record
 */
export function GoogleMap() { }
function GoogleMap_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    GoogleMap.prototype.data;
    /** @type {?} */
    GoogleMap.prototype.constructor;
    /** @type {?} */
    GoogleMap.prototype.panTo;
    /** @type {?} */
    GoogleMap.prototype.setZoom;
    /** @type {?} */
    GoogleMap.prototype.getCenter;
    /** @type {?} */
    GoogleMap.prototype.setCenter;
    /** @type {?} */
    GoogleMap.prototype.getBounds;
    /** @type {?} */
    GoogleMap.prototype.getZoom;
    /** @type {?} */
    GoogleMap.prototype.getDiv;
    /** @type {?} */
    GoogleMap.prototype.getProjection;
    /** @type {?} */
    GoogleMap.prototype.setOptions;
    /** @type {?} */
    GoogleMap.prototype.panToBounds;
    /** @type {?} */
    GoogleMap.prototype.fitBounds;
}
/**
 * @record
 */
export function LatLng() { }
function LatLng_tsickle_Closure_declarations() {
    /** @type {?} */
    LatLng.prototype.constructor;
    /** @type {?} */
    LatLng.prototype.lat;
    /** @type {?} */
    LatLng.prototype.lng;
}
/**
 * @record
 */
export function Marker() { }
function Marker_tsickle_Closure_declarations() {
    /** @type {?} */
    Marker.prototype.constructor;
    /** @type {?} */
    Marker.prototype.setMap;
    /** @type {?} */
    Marker.prototype.setPosition;
    /** @type {?} */
    Marker.prototype.setTitle;
    /** @type {?} */
    Marker.prototype.setLabel;
    /** @type {?} */
    Marker.prototype.setPosition;
    /** @type {?} */
    Marker.prototype.setDraggable;
    /** @type {?} */
    Marker.prototype.setIcon;
    /** @type {?} */
    Marker.prototype.setOpacity;
    /** @type {?} */
    Marker.prototype.setOptions;
    /** @type {?} */
    Marker.prototype.setVisible;
    /** @type {?} */
    Marker.prototype.setZIndex;
    /** @type {?} */
    Marker.prototype.getLabel;
    /** @type {?} */
    Marker.prototype.getPosition;
    /** @type {?} */
    Marker.prototype.getVisible;
}
/**
 * @record
 */
export function MarkerOptions() { }
function MarkerOptions_tsickle_Closure_declarations() {
    /** @type {?} */
    MarkerOptions.prototype.position;
    /** @type {?|undefined} */
    MarkerOptions.prototype.title;
    /** @type {?|undefined} */
    MarkerOptions.prototype.map;
    /** @type {?|undefined} */
    MarkerOptions.prototype.label;
    /** @type {?|undefined} */
    MarkerOptions.prototype.draggable;
    /** @type {?|undefined} */
    MarkerOptions.prototype.clickable;
    /** @type {?|undefined} */
    MarkerOptions.prototype.icon;
    /** @type {?|undefined} */
    MarkerOptions.prototype.opacity;
    /** @type {?|undefined} */
    MarkerOptions.prototype.visible;
    /** @type {?|undefined} */
    MarkerOptions.prototype.zIndex;
}
/**
 * @record
 */
export function MarkerLabel() { }
function MarkerLabel_tsickle_Closure_declarations() {
    /** @type {?} */
    MarkerLabel.prototype.color;
    /** @type {?} */
    MarkerLabel.prototype.fontFamily;
    /** @type {?} */
    MarkerLabel.prototype.fontSize;
    /** @type {?} */
    MarkerLabel.prototype.fontWeight;
    /** @type {?} */
    MarkerLabel.prototype.text;
}
/**
 * @record
 */
export function ClusterStyle() { }
function ClusterStyle_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    ClusterStyle.prototype.url;
    /** @type {?|undefined} */
    ClusterStyle.prototype.height;
    /** @type {?|undefined} */
    ClusterStyle.prototype.width;
    /** @type {?|undefined} */
    ClusterStyle.prototype.anchor;
    /** @type {?|undefined} */
    ClusterStyle.prototype.textColor;
    /** @type {?|undefined} */
    ClusterStyle.prototype.textSize;
    /** @type {?|undefined} */
    ClusterStyle.prototype.backgroundPosition;
}
/**
 * @record
 */
export function MarkerClusterer() { }
function MarkerClusterer_tsickle_Closure_declarations() {
    /** @type {?} */
    MarkerClusterer.prototype.isZoomOnClick;
    /** @type {?} */
    MarkerClusterer.prototype.isAverageCenter;
    /** @type {?} */
    MarkerClusterer.prototype.getMarkers;
    /** @type {?} */
    MarkerClusterer.prototype.getTotalMarkers;
    /** @type {?} */
    MarkerClusterer.prototype.setMaxZoom;
    /** @type {?} */
    MarkerClusterer.prototype.getMaxZoom;
    /** @type {?} */
    MarkerClusterer.prototype.addMarkers;
    /** @type {?} */
    MarkerClusterer.prototype.addMarker;
    /** @type {?} */
    MarkerClusterer.prototype.removeMarkers;
    /** @type {?} */
    MarkerClusterer.prototype.removeMarker;
    /** @type {?} */
    MarkerClusterer.prototype.getTotalClusters;
    /** @type {?} */
    MarkerClusterer.prototype.getMap;
    /** @type {?} */
    MarkerClusterer.prototype.setMap;
    /** @type {?} */
    MarkerClusterer.prototype.getGridSize;
    /** @type {?} */
    MarkerClusterer.prototype.setGridSize;
    /** @type {?} */
    MarkerClusterer.prototype.getMinClusterSize;
    /** @type {?} */
    MarkerClusterer.prototype.setMinClusterSize;
    /** @type {?} */
    MarkerClusterer.prototype.clearMarkers;
    /** @type {?} */
    MarkerClusterer.prototype.setStyles;
    /** @type {?} */
    MarkerClusterer.prototype.getStyles;
    /** @type {?} */
    MarkerClusterer.prototype.setCalculator;
    /** @type {?} */
    MarkerClusterer.prototype.getCalculator;
    /** @type {?} */
    MarkerClusterer.prototype.resetViewport;
    /** @type {?} */
    MarkerClusterer.prototype.redraw;
}
/**
 * @record
 */
export function Circle() { }
function Circle_tsickle_Closure_declarations() {
    /** @type {?} */
    Circle.prototype.getBounds;
    /** @type {?} */
    Circle.prototype.getCenter;
    /** @type {?} */
    Circle.prototype.getDraggable;
    /** @type {?} */
    Circle.prototype.getEditable;
    /** @type {?} */
    Circle.prototype.getMap;
    /** @type {?} */
    Circle.prototype.getRadius;
    /** @type {?} */
    Circle.prototype.getVisible;
    /** @type {?} */
    Circle.prototype.setCenter;
    /** @type {?} */
    Circle.prototype.setDraggable;
    /** @type {?} */
    Circle.prototype.setEditable;
    /** @type {?} */
    Circle.prototype.setMap;
    /** @type {?} */
    Circle.prototype.setOptions;
    /** @type {?} */
    Circle.prototype.setRadius;
    /** @type {?} */
    Circle.prototype.setVisible;
}
/**
 * @record
 */
export function CircleOptions() { }
function CircleOptions_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    CircleOptions.prototype.center;
    /** @type {?|undefined} */
    CircleOptions.prototype.clickable;
    /** @type {?|undefined} */
    CircleOptions.prototype.draggable;
    /** @type {?|undefined} */
    CircleOptions.prototype.editable;
    /** @type {?|undefined} */
    CircleOptions.prototype.fillColor;
    /** @type {?|undefined} */
    CircleOptions.prototype.fillOpacity;
    /** @type {?|undefined} */
    CircleOptions.prototype.map;
    /** @type {?|undefined} */
    CircleOptions.prototype.radius;
    /** @type {?|undefined} */
    CircleOptions.prototype.strokeColor;
    /** @type {?|undefined} */
    CircleOptions.prototype.strokeOpacity;
    /** @type {?|undefined} */
    CircleOptions.prototype.strokePosition;
    /** @type {?|undefined} */
    CircleOptions.prototype.strokeWeight;
    /** @type {?|undefined} */
    CircleOptions.prototype.visible;
    /** @type {?|undefined} */
    CircleOptions.prototype.zIndex;
}
/**
 * @record
 */
export function LatLngBounds() { }
function LatLngBounds_tsickle_Closure_declarations() {
    /** @type {?} */
    LatLngBounds.prototype.contains;
    /** @type {?} */
    LatLngBounds.prototype.equals;
    /** @type {?} */
    LatLngBounds.prototype.extend;
    /** @type {?} */
    LatLngBounds.prototype.getCenter;
    /** @type {?} */
    LatLngBounds.prototype.getNorthEast;
    /** @type {?} */
    LatLngBounds.prototype.getSouthWest;
    /** @type {?} */
    LatLngBounds.prototype.intersects;
    /** @type {?} */
    LatLngBounds.prototype.isEmpty;
    /** @type {?} */
    LatLngBounds.prototype.toJSON;
    /** @type {?} */
    LatLngBounds.prototype.toSpan;
    /** @type {?} */
    LatLngBounds.prototype.toString;
    /** @type {?} */
    LatLngBounds.prototype.toUrlValue;
    /** @type {?} */
    LatLngBounds.prototype.union;
}
/**
 * @record
 */
export function LatLngBoundsLiteral() { }
function LatLngBoundsLiteral_tsickle_Closure_declarations() {
    /** @type {?} */
    LatLngBoundsLiteral.prototype.east;
    /** @type {?} */
    LatLngBoundsLiteral.prototype.north;
    /** @type {?} */
    LatLngBoundsLiteral.prototype.south;
    /** @type {?} */
    LatLngBoundsLiteral.prototype.west;
}
/**
 * @record
 */
export function LatLngLiteral() { }
function LatLngLiteral_tsickle_Closure_declarations() {
    /** @type {?} */
    LatLngLiteral.prototype.lat;
    /** @type {?} */
    LatLngLiteral.prototype.lng;
}
/**
 * @record
 */
export function MouseEvent() { }
function MouseEvent_tsickle_Closure_declarations() {
    /** @type {?} */
    MouseEvent.prototype.latLng;
}
/**
 * @record
 */
export function MapOptions() { }
function MapOptions_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    MapOptions.prototype.center;
    /** @type {?|undefined} */
    MapOptions.prototype.zoom;
    /** @type {?|undefined} */
    MapOptions.prototype.minZoom;
    /** @type {?|undefined} */
    MapOptions.prototype.maxZoom;
    /** @type {?|undefined} */
    MapOptions.prototype.disableDoubleClickZoom;
    /** @type {?|undefined} */
    MapOptions.prototype.disableDefaultUI;
    /** @type {?|undefined} */
    MapOptions.prototype.scrollwheel;
    /** @type {?|undefined} */
    MapOptions.prototype.backgroundColor;
    /** @type {?|undefined} */
    MapOptions.prototype.draggable;
    /** @type {?|undefined} */
    MapOptions.prototype.draggableCursor;
    /** @type {?|undefined} */
    MapOptions.prototype.draggingCursor;
    /** @type {?|undefined} */
    MapOptions.prototype.keyboardShortcuts;
    /** @type {?|undefined} */
    MapOptions.prototype.styles;
    /** @type {?|undefined} */
    MapOptions.prototype.zoomControl;
    /** @type {?|undefined} */
    MapOptions.prototype.zoomControlOptions;
    /** @type {?|undefined} */
    MapOptions.prototype.streetViewControl;
    /** @type {?|undefined} */
    MapOptions.prototype.streetViewControlOptions;
    /** @type {?|undefined} */
    MapOptions.prototype.scaleControl;
    /** @type {?|undefined} */
    MapOptions.prototype.scaleControlOptions;
    /** @type {?|undefined} */
    MapOptions.prototype.mapTypeControl;
    /** @type {?|undefined} */
    MapOptions.prototype.mapTypeControlOptions;
    /** @type {?|undefined} */
    MapOptions.prototype.panControl;
    /** @type {?|undefined} */
    MapOptions.prototype.panControlOptions;
    /** @type {?|undefined} */
    MapOptions.prototype.rotateControl;
    /** @type {?|undefined} */
    MapOptions.prototype.rotateControlOptions;
    /** @type {?|undefined} */
    MapOptions.prototype.fullscreenControl;
    /** @type {?|undefined} */
    MapOptions.prototype.fullscreenControlOptions;
    /** @type {?|undefined} */
    MapOptions.prototype.mapTypeId;
    /** @type {?|undefined} */
    MapOptions.prototype.clickableIcons;
    /** @type {?|undefined} */
    MapOptions.prototype.gestureHandling;
}
/**
 * @record
 */
export function MapTypeStyle() { }
function MapTypeStyle_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    MapTypeStyle.prototype.elementType;
    /** @type {?|undefined} */
    MapTypeStyle.prototype.featureType;
    /** @type {?} */
    MapTypeStyle.prototype.stylers;
}
/**
 *  If more than one key is specified in a single MapTypeStyler, all but one will be ignored.
 * @record
 */
export function MapTypeStyler() { }
function MapTypeStyler_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    MapTypeStyler.prototype.color;
    /** @type {?|undefined} */
    MapTypeStyler.prototype.gamma;
    /** @type {?|undefined} */
    MapTypeStyler.prototype.hue;
    /** @type {?|undefined} */
    MapTypeStyler.prototype.invert_lightness;
    /** @type {?|undefined} */
    MapTypeStyler.prototype.lightness;
    /** @type {?|undefined} */
    MapTypeStyler.prototype.saturation;
    /** @type {?|undefined} */
    MapTypeStyler.prototype.visibility;
    /** @type {?|undefined} */
    MapTypeStyler.prototype.weight;
}
/**
 * @record
 */
export function InfoWindow() { }
function InfoWindow_tsickle_Closure_declarations() {
    /** @type {?} */
    InfoWindow.prototype.constructor;
    /** @type {?} */
    InfoWindow.prototype.close;
    /** @type {?} */
    InfoWindow.prototype.getContent;
    /** @type {?} */
    InfoWindow.prototype.getPosition;
    /** @type {?} */
    InfoWindow.prototype.getZIndex;
    /** @type {?} */
    InfoWindow.prototype.open;
    /** @type {?} */
    InfoWindow.prototype.setContent;
    /** @type {?} */
    InfoWindow.prototype.setOptions;
    /** @type {?} */
    InfoWindow.prototype.setPosition;
    /** @type {?} */
    InfoWindow.prototype.setZIndex;
}
/**
 * @record
 */
export function MVCObject() { }
function MVCObject_tsickle_Closure_declarations() {
    /** @type {?} */
    MVCObject.prototype.addListener;
}
/**
 * @record
 */
export function MapsEventListener() { }
function MapsEventListener_tsickle_Closure_declarations() {
    /** @type {?} */
    MapsEventListener.prototype.remove;
}
/**
 * @record
 */
export function Size() { }
function Size_tsickle_Closure_declarations() {
    /** @type {?} */
    Size.prototype.height;
    /** @type {?} */
    Size.prototype.width;
    /** @type {?} */
    Size.prototype.constructor;
    /** @type {?} */
    Size.prototype.equals;
    /** @type {?} */
    Size.prototype.toString;
}
/**
 * @record
 */
export function InfoWindowOptions() { }
function InfoWindowOptions_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    InfoWindowOptions.prototype.content;
    /** @type {?|undefined} */
    InfoWindowOptions.prototype.disableAutoPan;
    /** @type {?|undefined} */
    InfoWindowOptions.prototype.maxWidth;
    /** @type {?|undefined} */
    InfoWindowOptions.prototype.pixelOffset;
    /** @type {?|undefined} */
    InfoWindowOptions.prototype.position;
    /** @type {?|undefined} */
    InfoWindowOptions.prototype.zIndex;
}
/**
 * @record
 */
export function Point() { }
function Point_tsickle_Closure_declarations() {
    /** @type {?} */
    Point.prototype.x;
    /** @type {?} */
    Point.prototype.y;
    /** @type {?} */
    Point.prototype.equals;
    /** @type {?} */
    Point.prototype.toString;
}
/**
 * @record
 */
export function GoogleSymbol() { }
function GoogleSymbol_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    GoogleSymbol.prototype.anchor;
    /** @type {?|undefined} */
    GoogleSymbol.prototype.fillColor;
    /** @type {?|undefined} */
    GoogleSymbol.prototype.fillOpacity;
    /** @type {?|undefined} */
    GoogleSymbol.prototype.labelOrigin;
    /** @type {?|undefined} */
    GoogleSymbol.prototype.path;
    /** @type {?|undefined} */
    GoogleSymbol.prototype.rotation;
    /** @type {?|undefined} */
    GoogleSymbol.prototype.scale;
    /** @type {?|undefined} */
    GoogleSymbol.prototype.strokeColor;
    /** @type {?|undefined} */
    GoogleSymbol.prototype.strokeOpacity;
    /** @type {?|undefined} */
    GoogleSymbol.prototype.strokeWeight;
}
/**
 * @record
 */
export function IconSequence() { }
function IconSequence_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    IconSequence.prototype.fixedRotation;
    /** @type {?|undefined} */
    IconSequence.prototype.icon;
    /** @type {?|undefined} */
    IconSequence.prototype.offset;
    /** @type {?|undefined} */
    IconSequence.prototype.repeat;
}
/**
 * @record
 */
export function PolylineOptions() { }
function PolylineOptions_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    PolylineOptions.prototype.clickable;
    /** @type {?|undefined} */
    PolylineOptions.prototype.draggable;
    /** @type {?|undefined} */
    PolylineOptions.prototype.editable;
    /** @type {?|undefined} */
    PolylineOptions.prototype.geodesic;
    /** @type {?|undefined} */
    PolylineOptions.prototype.icon;
    /** @type {?|undefined} */
    PolylineOptions.prototype.map;
    /** @type {?|undefined} */
    PolylineOptions.prototype.path;
    /** @type {?|undefined} */
    PolylineOptions.prototype.strokeColor;
    /** @type {?|undefined} */
    PolylineOptions.prototype.strokeOpacity;
    /** @type {?|undefined} */
    PolylineOptions.prototype.strokeWeight;
    /** @type {?|undefined} */
    PolylineOptions.prototype.visible;
    /** @type {?|undefined} */
    PolylineOptions.prototype.zIndex;
}
/**
 * @record
 */
export function Polyline() { }
function Polyline_tsickle_Closure_declarations() {
    /** @type {?} */
    Polyline.prototype.getDraggable;
    /** @type {?} */
    Polyline.prototype.getEditable;
    /** @type {?} */
    Polyline.prototype.getMap;
    /** @type {?} */
    Polyline.prototype.getPath;
    /** @type {?} */
    Polyline.prototype.getVisible;
    /** @type {?} */
    Polyline.prototype.setDraggable;
    /** @type {?} */
    Polyline.prototype.setEditable;
    /** @type {?} */
    Polyline.prototype.setMap;
    /** @type {?} */
    Polyline.prototype.setOptions;
    /** @type {?} */
    Polyline.prototype.setPath;
    /** @type {?} */
    Polyline.prototype.setVisible;
}
/**
 * PolyMouseEvent gets emitted when the user triggers mouse events on a polyline.
 * @record
 */
export function PolyMouseEvent() { }
function PolyMouseEvent_tsickle_Closure_declarations() {
    /** @type {?} */
    PolyMouseEvent.prototype.edge;
    /** @type {?} */
    PolyMouseEvent.prototype.path;
    /** @type {?} */
    PolyMouseEvent.prototype.vertex;
}
/**
 * @record
 */
export function PolygonOptions() { }
function PolygonOptions_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    PolygonOptions.prototype.clickable;
    /** @type {?|undefined} */
    PolygonOptions.prototype.draggable;
    /** @type {?|undefined} */
    PolygonOptions.prototype.editable;
    /** @type {?|undefined} */
    PolygonOptions.prototype.fillColor;
    /** @type {?|undefined} */
    PolygonOptions.prototype.fillOpacity;
    /** @type {?|undefined} */
    PolygonOptions.prototype.geodesic;
    /** @type {?|undefined} */
    PolygonOptions.prototype.icon;
    /** @type {?|undefined} */
    PolygonOptions.prototype.map;
    /** @type {?|undefined} */
    PolygonOptions.prototype.paths;
    /** @type {?|undefined} */
    PolygonOptions.prototype.strokeColor;
    /** @type {?|undefined} */
    PolygonOptions.prototype.strokeOpacity;
    /** @type {?|undefined} */
    PolygonOptions.prototype.strokeWeight;
    /** @type {?|undefined} */
    PolygonOptions.prototype.visible;
    /** @type {?|undefined} */
    PolygonOptions.prototype.zIndex;
}
/**
 * @record
 */
export function Polygon() { }
function Polygon_tsickle_Closure_declarations() {
    /** @type {?} */
    Polygon.prototype.zIndex;
    /** @type {?} */
    Polygon.prototype.getDraggable;
    /** @type {?} */
    Polygon.prototype.getEditable;
    /** @type {?} */
    Polygon.prototype.getMap;
    /** @type {?} */
    Polygon.prototype.getPath;
    /** @type {?} */
    Polygon.prototype.getPaths;
    /** @type {?} */
    Polygon.prototype.getVisible;
    /** @type {?} */
    Polygon.prototype.setDraggable;
    /** @type {?} */
    Polygon.prototype.setEditable;
    /** @type {?} */
    Polygon.prototype.setMap;
    /** @type {?} */
    Polygon.prototype.setPath;
    /** @type {?} */
    Polygon.prototype.setOptions;
    /** @type {?} */
    Polygon.prototype.setPaths;
    /** @type {?} */
    Polygon.prototype.setVisible;
}
/**
 * @record
 */
export function KmlLayer() { }
function KmlLayer_tsickle_Closure_declarations() {
    /** @type {?} */
    KmlLayer.prototype.getDefaultViewport;
    /** @type {?} */
    KmlLayer.prototype.getMap;
    /** @type {?} */
    KmlLayer.prototype.getMetadata;
    /** @type {?} */
    KmlLayer.prototype.getStatus;
    /** @type {?} */
    KmlLayer.prototype.getUrl;
    /** @type {?} */
    KmlLayer.prototype.getZIndex;
    /** @type {?} */
    KmlLayer.prototype.setMap;
    /** @type {?} */
    KmlLayer.prototype.setOptions;
    /** @type {?} */
    KmlLayer.prototype.setUrl;
    /** @type {?} */
    KmlLayer.prototype.setZIndex;
}
/**
 * See: https://developers.google.com/maps/documentation/javascript/reference?hl=de#KmlLayerMetadata
 * @record
 */
export function KmlLayerMetadata() { }
function KmlLayerMetadata_tsickle_Closure_declarations() {
    /** @type {?} */
    KmlLayerMetadata.prototype.author;
    /** @type {?} */
    KmlLayerMetadata.prototype.description;
    /** @type {?} */
    KmlLayerMetadata.prototype.hasScreenOverlays;
    /** @type {?} */
    KmlLayerMetadata.prototype.name;
    /** @type {?} */
    KmlLayerMetadata.prototype.snippet;
}
/**
 * @record
 */
export function KmlAuthor() { }
function KmlAuthor_tsickle_Closure_declarations() {
    /** @type {?} */
    KmlAuthor.prototype.email;
    /** @type {?} */
    KmlAuthor.prototype.name;
    /** @type {?} */
    KmlAuthor.prototype.uri;
}
/**
 * @record
 */
export function KmlLayerOptions() { }
function KmlLayerOptions_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    KmlLayerOptions.prototype.clickable;
    /** @type {?|undefined} */
    KmlLayerOptions.prototype.map;
    /** @type {?|undefined} */
    KmlLayerOptions.prototype.preserveViewport;
    /** @type {?|undefined} */
    KmlLayerOptions.prototype.screenOverlays;
    /** @type {?|undefined} */
    KmlLayerOptions.prototype.suppressInfoWindows;
    /** @type {?|undefined} */
    KmlLayerOptions.prototype.url;
    /** @type {?|undefined} */
    KmlLayerOptions.prototype.zIndex;
}
/**
 * @record
 */
export function KmlFeatureData() { }
function KmlFeatureData_tsickle_Closure_declarations() {
    /** @type {?} */
    KmlFeatureData.prototype.author;
    /** @type {?} */
    KmlFeatureData.prototype.description;
    /** @type {?} */
    KmlFeatureData.prototype.id;
    /** @type {?} */
    KmlFeatureData.prototype.infoWindowHtml;
    /** @type {?} */
    KmlFeatureData.prototype.name;
    /** @type {?} */
    KmlFeatureData.prototype.snippet;
}
/**
 * @record
 */
export function KmlMouseEvent() { }
function KmlMouseEvent_tsickle_Closure_declarations() {
    /** @type {?} */
    KmlMouseEvent.prototype.featureData;
    /** @type {?} */
    KmlMouseEvent.prototype.pixelOffset;
}
/**
 * @record
 */
export function Data() { }
function Data_tsickle_Closure_declarations() {
    /** @type {?} */
    Data.prototype.features;
    /** @type {?} */
    Data.prototype.constructor;
    /** @type {?} */
    Data.prototype.addGeoJson;
    /** @type {?} */
    Data.prototype.remove;
    /** @type {?} */
    Data.prototype.setControlPosition;
    /** @type {?} */
    Data.prototype.setControls;
    /** @type {?} */
    Data.prototype.setDrawingMode;
    /** @type {?} */
    Data.prototype.setMap;
    /** @type {?} */
    Data.prototype.setStyle;
    /** @type {?} */
    Data.prototype.forEach;
}
/**
 * @record
 */
export function Feature() { }
function Feature_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    Feature.prototype.id;
    /** @type {?} */
    Feature.prototype.geometry;
    /** @type {?} */
    Feature.prototype.properties;
}
/**
 * @record
 */
export function DataOptions() { }
function DataOptions_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    DataOptions.prototype.controlPosition;
    /** @type {?|undefined} */
    DataOptions.prototype.controls;
    /** @type {?|undefined} */
    DataOptions.prototype.drawingMode;
    /** @type {?|undefined} */
    DataOptions.prototype.featureFactory;
    /** @type {?|undefined} */
    DataOptions.prototype.map;
    /** @type {?|undefined} */
    DataOptions.prototype.style;
}
/**
 * @record
 */
export function DataMouseEvent() { }
function DataMouseEvent_tsickle_Closure_declarations() {
    /** @type {?} */
    DataMouseEvent.prototype.feature;
}
/**
 * @record
 */
export function GeoJsonOptions() { }
function GeoJsonOptions_tsickle_Closure_declarations() {
    /** @type {?} */
    GeoJsonOptions.prototype.idPropertyName;
}
/**
 * @record
 */
export function Geometry() { }
function Geometry_tsickle_Closure_declarations() {
    /** @type {?} */
    Geometry.prototype.type;
}
/** @enum {number} */
const ControlPosition = {
    BOTTOM_CENTER: 0,
    BOTTOM_LEFT: 1,
    BOTTOM_RIGHT: 2,
    LEFT_BOTTOM: 3,
    LEFT_CENTER: 4,
    LEFT_TOP: 5,
    RIGHT_BOTTOM: 6,
    RIGHT_CENTER: 7,
    RIGHT_TOP: 8,
    TOP_CENTER: 9,
    TOP_LEFT: 10,
    TOP_RIGHT: 11,
};
export { ControlPosition };
ControlPosition[ControlPosition.BOTTOM_CENTER] = "BOTTOM_CENTER";
ControlPosition[ControlPosition.BOTTOM_LEFT] = "BOTTOM_LEFT";
ControlPosition[ControlPosition.BOTTOM_RIGHT] = "BOTTOM_RIGHT";
ControlPosition[ControlPosition.LEFT_BOTTOM] = "LEFT_BOTTOM";
ControlPosition[ControlPosition.LEFT_CENTER] = "LEFT_CENTER";
ControlPosition[ControlPosition.LEFT_TOP] = "LEFT_TOP";
ControlPosition[ControlPosition.RIGHT_BOTTOM] = "RIGHT_BOTTOM";
ControlPosition[ControlPosition.RIGHT_CENTER] = "RIGHT_CENTER";
ControlPosition[ControlPosition.RIGHT_TOP] = "RIGHT_TOP";
ControlPosition[ControlPosition.TOP_CENTER] = "TOP_CENTER";
ControlPosition[ControlPosition.TOP_LEFT] = "TOP_LEFT";
ControlPosition[ControlPosition.TOP_RIGHT] = "TOP_RIGHT";
/** @enum {number} */
const MapTypeId = {
    /** This map type displays a transparent layer of major streets on satellite images. */
    hybrid: 0,
    /** This map type displays a normal street map. */
    roadmap: 1,
    /** This map type displays satellite images. */
    satellite: 2,
    /** This map type displays maps with physical features such as terrain and vegetation. */
    terrain: 3,
};
export { MapTypeId };
MapTypeId[MapTypeId.hybrid] = "hybrid";
MapTypeId[MapTypeId.roadmap] = "roadmap";
MapTypeId[MapTypeId.satellite] = "satellite";
MapTypeId[MapTypeId.terrain] = "terrain";
/**
 * Options for the rendering of the map type control.
 * @record
 */
export function MapTypeControlOptions() { }
function MapTypeControlOptions_tsickle_Closure_declarations() {
    /**
     * IDs of map types to show in the control.
     * @type {?|undefined}
     */
    MapTypeControlOptions.prototype.mapTypeIds;
    /**
     * Position id. Used to specify the position of the control on the map.
     * The default position is TOP_RIGHT.
     * @type {?|undefined}
     */
    MapTypeControlOptions.prototype.position;
    /**
     * Style id. Used to select what style of map type control to display.
     * @type {?|undefined}
     */
    MapTypeControlOptions.prototype.style;
}
/** @enum {number} */
const MapTypeControlStyle = {
    DEFAULT: 0,
    DROPDOWN_MENU: 1,
    HORIZONTAL_BAR: 2,
};
export { MapTypeControlStyle };
MapTypeControlStyle[MapTypeControlStyle.DEFAULT] = "DEFAULT";
MapTypeControlStyle[MapTypeControlStyle.DROPDOWN_MENU] = "DROPDOWN_MENU";
MapTypeControlStyle[MapTypeControlStyle.HORIZONTAL_BAR] = "HORIZONTAL_BAR";
/**
 * @record
 */
export function OverviewMapControlOptions() { }
function OverviewMapControlOptions_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    OverviewMapControlOptions.prototype.opened;
}
/**
 * Options for the rendering of the pan control.
 * @record
 */
export function PanControlOptions() { }
function PanControlOptions_tsickle_Closure_declarations() {
    /**
     * Position id. Used to specify the position of the control on the map.
     * The default position is TOP_LEFT.
     * @type {?|undefined}
     */
    PanControlOptions.prototype.position;
}
/**
 * Options for the rendering of the rotate control.
 * @record
 */
export function RotateControlOptions() { }
function RotateControlOptions_tsickle_Closure_declarations() {
    /**
     * Position id. Used to specify the position of the control on the map.
     * The default position is TOP_LEFT.
     * @type {?|undefined}
     */
    RotateControlOptions.prototype.position;
}
/**
 * Options for the rendering of the scale control.
 * @record
 */
export function ScaleControlOptions() { }
function ScaleControlOptions_tsickle_Closure_declarations() {
    /**
     * Style id. Used to select what style of scale control to display.
     * @type {?|undefined}
     */
    ScaleControlOptions.prototype.style;
}
/** @enum {number} */
const ScaleControlStyle = {
    DEFAULT: 0,
};
export { ScaleControlStyle };
ScaleControlStyle[ScaleControlStyle.DEFAULT] = "DEFAULT";
/**
 * Options for the rendering of the Street View pegman control on the map.
 * @record
 */
export function StreetViewControlOptions() { }
function StreetViewControlOptions_tsickle_Closure_declarations() {
    /**
     * Position id. Used to specify the position of the control on the map. The
     * default position is embedded within the navigation (zoom and pan) controls.
     * If this position is empty or the same as that specified in the
     * zoomControlOptions or panControlOptions, the Street View control will be
     * displayed as part of the navigation controls. Otherwise, it will be displayed
     * separately.
     * @type {?|undefined}
     */
    StreetViewControlOptions.prototype.position;
}
/**
 * Options for the rendering of the zoom control.
 * @record
 */
export function ZoomControlOptions() { }
function ZoomControlOptions_tsickle_Closure_declarations() {
    /**
     * Position id. Used to specify the position of the control on the map.
     * The default position is TOP_LEFT.
     * @type {?|undefined}
     */
    ZoomControlOptions.prototype.position;
    /** @type {?|undefined} */
    ZoomControlOptions.prototype.style;
}
/** @enum {number} */
const ZoomControlStyle = {
    DEFAULT: 0,
    LARGE: 1,
    SMALL: 2,
};
export { ZoomControlStyle };
ZoomControlStyle[ZoomControlStyle.DEFAULT] = "DEFAULT";
ZoomControlStyle[ZoomControlStyle.LARGE] = "LARGE";
ZoomControlStyle[ZoomControlStyle.SMALL] = "SMALL";
/**
 * Options for the rendering of the fullscreen control.
 * @record
 */
export function FullscreenControlOptions() { }
function FullscreenControlOptions_tsickle_Closure_declarations() {
    /**
     * Position id. Used to specify the position of the control on the map.
     * The default position is RIGHT_TOP.
     * @type {?|undefined}
     */
    FullscreenControlOptions.prototype.position;
}

//# sourceMappingURL=data:application/json;base64,