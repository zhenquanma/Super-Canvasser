/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
let /** @type {?} */ id = 0;
/**
 * Abstract base implementing a canvas overlay to be placed on the map.
 *
 * @export
 * @abstract
 * @abstract
 */
export class CanvasOverlay {
    /**
     * Creates a new instance of the CanvasOverlay class.
     * @param {?} drawCallback
     */
    constructor(drawCallback) {
        this._canvasReady = new Promise((resolve, reject) => { this._readyResolver = resolve; });
        this._drawCallback = drawCallback;
        id++;
    }
    /**
     * Returns a promise that gets resolved when the canvas overlay is ready for interaction.
     * @return {?}
     */
    get CanvasReady() { return this._canvasReady; }
    /**
     * Deletes the canvas overlay.
     * @return {?}
     */
    Delete() {
        this.SetMap(null);
    }
    /**
     * CanvasOverlay added to map, load canvas.
     * @return {?}
     */
    OnAdd() {
        this._canvas = document.createElement('canvas');
        this._canvas.style.position = 'absolute';
        this._canvas.style.left = '0px';
        this._canvas.style.top = '0px';
        this._canvas.id = `xMapOverlay${id}`;
        // Add the canvas to the overlay.
        this.SetCanvasElement(this._canvas);
    }
    /**
     * When the CanvasLayer is removed from the map, release resources.
     * \@memberof CanvasOverlay
     * \@method
     * @return {?}
     */
    OnRemove() {
        this.SetCanvasElement(null);
        this.RemoveEventHandlers();
        this._canvas = null;
    }
    /**
     * Redraws the canvas for the current map view.
     * \@memberof CanvasOverlay
     * \@method
     * @param {?} clear - True to clear the canvas before drawing.
     * @return {?}
     */
    Redraw(clear) {
        if (this._canvas == null) {
            return;
        }
        // Clear canvas by updating dimensions. This also ensures canvas stays the same size as the map.
        if (clear) {
            this.Resize();
        }
        // Call the drawing callback function if specified.
        if (this._drawCallback) {
            this._drawCallback(this._canvas);
        }
    }
    /**
     * Simple function for updating the CSS position and dimensions of the canvas.
     * \@memberof CanvasOverlay
     * \@method
     * @protected
     * @param {?} x The horizontal offset position of the canvas.
     * @param {?} y The vertical offset position of the canvas.
     * @param {?} w The width of the canvas.
     * @param {?} h The height of the canvas.
     * @return {?}
     */
    UpdatePosition(x, y, w, h) {
        // Update CSS position.
        this._canvas.style.left = x + 'px';
        this._canvas.style.top = y + 'px';
        // Update CSS dimensions.
        this._canvas.style.width = w + 'px';
        this._canvas.style.height = h + 'px';
    }
}
function CanvasOverlay_tsickle_Closure_declarations() {
    /** @type {?} */
    CanvasOverlay.prototype._readyResolver;
    /** @type {?} */
    CanvasOverlay.prototype._canvas;
    /** @type {?} */
    CanvasOverlay.prototype._zoomStart;
    /** @type {?} */
    CanvasOverlay.prototype._centerStart;
    /** @type {?} */
    CanvasOverlay.prototype._canvasReady;
    /**
     * A callback function that is triggered when the canvas is ready to be rendered for the current map view.
     * @type {?}
     */
    CanvasOverlay.prototype._drawCallback;
    /**
     * Obtains geo coordinates for the click location
     * @abstract
     * @param {?} e
     * @return {?}
     */
    CanvasOverlay.prototype.GetCoordinatesFromClick = function (e) { };
    /**
     * Gets the map associted with the label.
     * @abstract
     * @return {?}
     */
    CanvasOverlay.prototype.GetMap = function () { };
    /**
     * Returns a MapLabel instance for the current platform that can be used as a tooltip.
     * This method only generates the map label. Content and placement is the responsibility
     * of the caller.
     * @abstract
     * @return {?}
     */
    CanvasOverlay.prototype.GetToolTipOverlay = function () { };
    /**
     * CanvasOverlay loaded, attach map events for updating canvas.
     * @abstract
     * \@method
     * \@memberof CanvasOverlay
     * @abstract
     * @return {?}
     */
    CanvasOverlay.prototype.OnLoad = function () { };
    /**
     * Sets the map for the label. Settings this to null remove the label from hte map.
     *
     * \@memberof CanvasOverlay
     * \@method
     * @abstract
     * @param {?} map - A native map object for the underlying implementation. Implementing derivatives should return the
     * actual native object.
     * @return {?}
     */
    CanvasOverlay.prototype.SetMap = function (map) { };
    /**
     * Attaches the canvas to the map.
     * \@memberof CanvasOverlay
     * \@method
     * @abstract
     * @param {?} el
     * @return {?}
     */
    CanvasOverlay.prototype.SetCanvasElement = function (el) { };
    /**
     * Remove the map event handlers.
     * \@memberof CanvasOverlay
     * \@method
     * @abstract
     * @protected
     * @abstract
     * @return {?}
     */
    CanvasOverlay.prototype.RemoveEventHandlers = function () { };
    /**
     * Updates the Canvas size based on the map size.
     * \@memberof CanvasOverlay
     * \@method
     * @abstract
     * @protected
     * @abstract
     * @return {?}
     */
    CanvasOverlay.prototype.Resize = function () { };
    /**
     * Updates the Canvas.
     * \@memberof CanvasOverlay
     * \@method
     * @protected
     * @abstract
     * @return {?}
     */
    CanvasOverlay.prototype.UpdateCanvas = function () { };
}

//# sourceMappingURL=data:application/json;base64,