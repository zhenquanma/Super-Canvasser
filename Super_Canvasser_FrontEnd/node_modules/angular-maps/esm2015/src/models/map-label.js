/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Abstract base implementing a label to be placed on the map.
 *
 * @export
 * @abstract
 * @abstract
 */
export class MapLabel {
    /**
     * Creates a new MapLabel
     * @param {?} options Optional properties to set.
     */
    constructor(options) {
        this.Set('fontFamily', 'sans-serif');
        this.Set('fontSize', 12);
        this.Set('fontColor', '#ffffff');
        this.Set('strokeWeight', 4);
        this.Set('strokeColor', '#000000');
        this.Set('align', 'center');
        this.SetValues(options);
    }
    /**
     * Deletes the label from the map. This method does not atually delete the label itself, so
     * it can be readded to map later.
     * \@memberof MapLabel
     * \@method
     * @return {?}
     */
    Delete() {
        this.SetMap(null);
    }
    /**
     * Delegate called when underlying properties change.
     *
     * \@memberof MapLabel
     * \@method
     * @param {?} prop - The property or properties that have changed.
     * @return {?}
     */
    Changed(prop) {
        let /** @type {?} */ shouldRunDrawCanvas = false;
        let /** @type {?} */ shouldRunDraw = false;
        if (!Array.isArray(prop)) {
            prop = [prop];
        }
        prop.forEach(p => {
            switch (p) {
                case 'fontFamily':
                case 'fontSize':
                case 'fontColor':
                case 'strokeWeight':
                case 'strokeColor':
                case 'align':
                case 'text':
                    shouldRunDrawCanvas = true;
                    break;
                case 'maxZoom':
                case 'minZoom':
                case 'offset':
                case 'hidden':
                case 'position':
                    shouldRunDraw = true;
                    break;
            }
        });
        if (shouldRunDrawCanvas) {
            this.DrawCanvas();
        }
        if (shouldRunDraw) {
            this.Draw();
        }
    }
    /**
     * Get the visibility of the label. Visibility depends on Zoom settings.
     * @protected
     * @return {?} - blank string if visible, 'hidden' if invisible.
     */
    GetVisible() {
        const /** @type {?} */ minZoom = this.Get('minZoom');
        const /** @type {?} */ maxZoom = this.Get('maxZoom');
        const /** @type {?} */ hidden = this.Get('hidden');
        if (hidden) {
            return 'hidden';
        }
        if (minZoom === undefined && maxZoom === undefined) {
            return '';
        }
        if (!this.GetMap()) {
            return '';
        }
        const /** @type {?} */ mapZoom = this.GetMap().getZoom();
        if (mapZoom < minZoom || mapZoom > maxZoom) {
            return 'hidden';
        }
        return '';
    }
    /**
     * Draws the label to the canvas 2d context.
     * \@memberof MapLabel
     * \@method
     * @protected
     * @return {?}
     */
    DrawCanvas() {
        if (!this._canvas) {
            return;
        }
        const /** @type {?} */ style = this._canvas.style;
        style.zIndex = this.Get('zIndex');
        const /** @type {?} */ ctx = this._canvas.getContext('2d');
        ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);
        ctx.strokeStyle = this.Get('strokeColor');
        ctx.font = this.Get('fontSize') + 'px ' + this.Get('fontFamily');
        const /** @type {?} */ backgroundColor = this.Get('backgroundColor');
        const /** @type {?} */ strokeWeight = Number(this.Get('strokeWeight'));
        const /** @type {?} */ text = this.Get('text');
        const /** @type {?} */ textMeasure = ctx.measureText(text);
        const /** @type {?} */ textWidth = textMeasure.width;
        if (text && strokeWeight && strokeWeight > 0) {
            ctx.lineWidth = strokeWeight;
            ctx.strokeText(text, 4, 4);
        }
        if (backgroundColor && backgroundColor !== '') {
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(0, 0, textWidth + 8, (parseInt(ctx.font, 10) * 2) - 2);
        }
        ctx.fillStyle = this.Get('fontColor');
        ctx.fillText(text, 4, 4);
        style.marginLeft = this.GetMarginLeft(textWidth) + 'px';
        style.marginTop = '-0.4em';
        style.pointerEvents = 'none';
        // Bring actual text top in line with desired latitude.
        // Cheaper than calculating height of text.
    }
    /**
     * Gets the appropriate margin-left for the canvas.
     * @protected
     * \@method
     * \@memberof MapLabel
     * @param {?} textWidth  - The width of the text, in pixels.
     * @return {?} - The margin-left, in pixels.
     */
    GetMarginLeft(textWidth) {
        switch (this.Get('align')) {
            case 'left': return 0;
            case 'right': return -textWidth;
        }
        return textWidth / -2;
    }
    /**
     * Called when the label is removed from the map.
     * \@method
     * @protected
     * \@memberof MapLabel
     * @return {?}
     */
    OnRemove() {
        if (this._canvas && this._canvas.parentNode) {
            this._canvas.parentNode.removeChild(this._canvas);
        }
    }
}
function MapLabel_tsickle_Closure_declarations() {
    /** @type {?} */
    MapLabel.prototype._canvas;
    /**
     * Returns the default label style for the platform
     *
     * \@readonly
     * @abstract
     * \@memberof MapLabel
     * @abstract
     * @return {?}
     */
    MapLabel.prototype.DefaultLabelStyle = function () { };
    /**
     * Gets the value of a setting.
     *
     * \@memberof MapLabel
     * @abstract
     * \@method
     * @abstract
     * @param {?} key - Key specifying the setting.
     * @return {?} - The value of the setting.
     */
    MapLabel.prototype.Get = function (key) { };
    /**
     * Gets the map associted with the label.
     *
     * \@memberof MapLabel
     * \@method
     * @abstract
     * @abstract
     * @return {?} - A native map object for the underlying implementation. Implementing derivatives should return the
     * actual native object.
     */
    MapLabel.prototype.GetMap = function () { };
    /**
     * Set the value for a setting.
     *
     * \@memberof MapLabel
     * @abstract
     * \@method
     * @abstract
     * @param {?} key - Key specifying the setting.
     * @param {?} val - The value to set.
     * @return {?}
     */
    MapLabel.prototype.Set = function (key, val) { };
    /**
     * Sets the map for the label. Settings this to null remove the label from hte map.
     *
     * \@memberof MapLabel
     * \@method
     * @abstract
     * @param {?} map - A native map object for the underlying implementation. Implementing derivatives should return the
     * actual native object.
     * @return {?}
     */
    MapLabel.prototype.SetMap = function (map) { };
    /**
     * Applies settings to the object
     *
     * \@memberof MapLabel
     * @abstract
     * \@method
     * @abstract
     * @param {?} options - An object containing the settings key value pairs.
     * @return {?}
     */
    MapLabel.prototype.SetValues = function (options) { };
    /**
     * Draws the label on the map.
     * \@memberof MapLabel
     * \@method
     * @protected
     * @abstract
     * @return {?}
     */
    MapLabel.prototype.Draw = function () { };
    /**
     * Delegate called when the label is added to the map. Generates and configures
     * the canvas.
     *
     * \@memberof MapLabel
     * \@method
     * @protected
     * @abstract
     * @abstract
     * @return {?}
     */
    MapLabel.prototype.OnAdd = function () { };
}

//# sourceMappingURL=data:application/json;base64,