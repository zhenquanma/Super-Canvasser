/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ContentChildren, ElementRef, EventEmitter, Input, Output, QueryList, ViewChild, ViewEncapsulation } from '@angular/core';
import { InfoBoxService } from '../services/infobox.service';
import { MapMarkerDirective } from './map-marker';
import { InfoBoxActionDirective } from './infobox-action';
/**
 * internal counter to use as ids for multiple infoboxes.
 */
let /** @type {?} */ infoBoxId = 0;
/**
 * InfoBox renders a info window inside a {\@link MapMarkerDirective} or standalone.
 *
 * ### Example
 * ```typescript
 * import {Component} from '\@angular/core';
 * import {MapComponent, MapMarkerDirective, InfoBoxComponent, InfoBoxActionDirective} from '...';
 *
 * \@Component({
 *  selector: 'my-map-cmp',
 *  styles: [`
 *    .map-container { height: 300px; }
 * `],
 *  template: `
 *    <x-map [Latitude]="lat" [Longitude]="lng" [Zoom]="zoom">
 *      <x-map-marker [Latitude]="lat" [Longitude]="lng" [Label]="'M'">
 *        <x-info-box [DisableAutoPan]="true">
 *          Hi, this is the content of the <strong>info window</strong>
 *         </x-info-box>
 *       </x-map-marker>
 *     </x-map>
 *  `
 * })
 * ```
 *
 * @export
 */
export class InfoBoxComponent {
    /**
     * Creates an instance of InfoBoxComponent.
     * \@memberof InfoBoxComponent
     * @param {?} _infoBoxService - Concrete {\@link InfoBoxService} implementation for underlying Map architecture.
     *
     */
    constructor(_infoBoxService) {
        this._infoBoxService = _infoBoxService;
        this._infoBoxAddedToManager = false;
        this._id = (infoBoxId++).toString();
        /**
         * Determine whether only one infobox can be open at a time. Note that ANY info box settings.
         *
         * \@memberof InfoBoxComponent
         */
        this.Modal = true;
        /**
         * Determines visibility of infobox
         *
         * \@memberof InfoBoxComponent
         */
        this.Visible = false;
        /**
         * Determines if other info boxes should be closed before opening this one
         *
         * \@memberof InfoBoxComponent
         */
        this.CloseInfoBoxesOnOpen = true;
        /**
         * Emits an event when the info window is closed.
         *
         * \@memberof InfoBoxComponent
         */
        this.InfoBoxClose = new EventEmitter();
    }
    /**
     * Gets the HTML content of the info box.
     *
     * \@readonly
     * \@memberof InfoBoxComponent
     * @return {?}
     */
    get HtmlContent() {
        if (this._content.nativeElement && this._content.nativeElement.innerText && this._content.nativeElement.innerText.trim() !== '') {
            return this._content.nativeElement.outerHTML;
        }
        return '';
    }
    /**
     * Gets the Id of the info box as a string.
     *
     * \@readonly
     * \@memberof InfoBoxComponent
     * @return {?}
     */
    get Id() { return this._id; }
    /**
     * Closes the Infobox.
     *
     * \@memberof InfoBoxComponent
     * @return {?}
     */
    Close() {
        return this._infoBoxService.Close(this).then(() => {
            this.InfoBoxClose.emit(this._id);
        });
    }
    /**
     * Called on after component view as been initialized. Part of the ng Component life cycle.
     *
     * \@memberof Map
     * @return {?}
     */
    ngAfterViewInit() {
        this._infoBoxService.AddInfoWindow(this);
        this._infoBoxAddedToManager = true;
        this.HandleEvents();
    }
    /**
     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.
     *
     * \@memberof Map
     * @param {?} changes - Changes that have occured.
     *
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this._infoBoxAddedToManager) {
            return;
        }
        if ((changes['latitude'] || changes['longitude']) && typeof this.Latitude === 'number' &&
            typeof this.Longitude === 'number') {
            this._infoBoxService.SetPosition(this, {
                latitude: changes['latitude'].currentValue,
                longitude: changes['longitude'].currentValue
            });
        }
        this.SetInfoWindowOptions(changes);
    }
    /**
     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.
     *
     * \@memberof Map
     * @return {?}
     */
    ngOnDestroy() { this._infoBoxService.DeleteInfoWindow(this); }
    /**
     * Opens a closed info window.
     *
     * \@memberof InfoBoxComponent
     * @param {?=} loc
     * @return {?} - Promise that is fullfilled when the infobox has been opened.
     *
     */
    Open(loc) {
        return this._infoBoxService.Open(this, loc);
    }
    /**
     * Returns a string representation of the info box.
     *
     * \@memberof InfoBoxComponent
     * @return {?} - string representation of the info box.
     *
     */
    ToString() { return 'InfoBoxComponent-' + this._id; }
    /**
     * Delegate handling the map click events.
     *
     * \@memberof MapComponent
     * @return {?}
     */
    HandleEvents() {
        this._infoBoxService.CreateEventObservable('infowindowclose', this).subscribe(e => {
            this.InfoBoxClose.emit(this._id);
        });
    }
    /**
     * Sets the info window options
     *
     * \@memberof InfoBoxComponent
     * @param {?} changes
     *
     * @return {?}
     */
    SetInfoWindowOptions(changes) {
        const /** @type {?} */ options = {};
        if (changes['title']) {
            options.title = this.Title;
        }
        if (changes['description']) {
            options.description = this.Description;
        }
        if (changes['disableAutoPan']) {
            options.disableAutoPan = this.DisableAutoPan;
        }
        if (changes['visible']) {
            options.visible = this.Visible;
        }
        if (changes['xOffset'] || changes['yOffset']) {
            if (options.pixelOffset == null) {
                options.pixelOffset = { x: 0, y: 0 };
            }
            options.pixelOffset.x = this.xOffset;
            options.pixelOffset.y = this.yOffset;
        }
        this._infoBoxService.SetOptions(this, options);
    }
}
InfoBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'x-info-box',
                template: `
        <div #infoBoxContent class='info-box-content'>
            <ng-content></ng-content>
        </div>`,
                styles: [`
        x-map .MicrosoftMap .Infobox .infobox-title { padding: 10px 10px 5px 10px }
        x-map .MicrosoftMap .Infobox .infobox-info { padding: 3px 10px 10px 10px }
        x-map .MicrosoftMap .Infobox .infobox-actions { height: auto }
    `],
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
InfoBoxComponent.ctorParameters = () => [
    { type: InfoBoxService }
];
InfoBoxComponent.propDecorators = {
    _content: [{ type: ViewChild, args: ['infoBoxContent',] }],
    InfoWindowActions: [{ type: ContentChildren, args: [InfoBoxActionDirective,] }],
    Latitude: [{ type: Input }],
    Longitude: [{ type: Input }],
    Title: [{ type: Input }],
    Description: [{ type: Input }],
    DisableAutoPan: [{ type: Input }],
    MaxWidth: [{ type: Input }],
    Modal: [{ type: Input }],
    HostMarker: [{ type: Input }],
    Visible: [{ type: Input }],
    xOffset: [{ type: Input }],
    yOffset: [{ type: Input }],
    CloseInfoBoxesOnOpen: [{ type: Input }],
    InfoBoxClose: [{ type: Output }]
};
function InfoBoxComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    InfoBoxComponent.prototype._infoBoxAddedToManager;
    /** @type {?} */
    InfoBoxComponent.prototype._id;
    /**
     * HTML conent of the infobox
     *
     * \@memberof InfoBoxComponent
     * @type {?}
     */
    InfoBoxComponent.prototype._content;
    /**
     * Zero or more actions to show on the info window
     *
     * \@memberof InfoBoxComponent
     * @type {?}
     */
    InfoBoxComponent.prototype.InfoWindowActions;
    /**
     * The latitude position of the info window (only usefull if you use it ouside of a {\@link MapMarker}).
     *
     * \@memberof InfoBoxComponent
     * @type {?}
     */
    InfoBoxComponent.prototype.Latitude;
    /**
     * The longitude position of the info window (only usefull if you use it ouside of a {\@link MapMarker}).
     *
     * \@memberof InfoBoxComponent
     * @type {?}
     */
    InfoBoxComponent.prototype.Longitude;
    /**
     * The title to display in the info window
     *
     * \@memberof InfoBoxComponent
     * @type {?}
     */
    InfoBoxComponent.prototype.Title;
    /**
     * The description to display in the info window.
     *
     * \@memberof InfoBoxComponent
     * @type {?}
     */
    InfoBoxComponent.prototype.Description;
    /**
     * Disable auto-pan on open. By default, the info window will pan the map so that it is fully
     * visible when it opens.
     *
     * \@memberof InfoBoxComponent
     * @type {?}
     */
    InfoBoxComponent.prototype.DisableAutoPan;
    /**
     *  Maximum width of the infowindow, regardless of content's width. This value is only considered
     *  if it is set before a call to open. To change the maximum width when changing content, call
     *  close, update maxWidth, and then open.
     *
     * \@memberof InfoBoxComponent
     * @type {?}
     */
    InfoBoxComponent.prototype.MaxWidth;
    /**
     * Determine whether only one infobox can be open at a time. Note that ANY info box settings.
     *
     * \@memberof InfoBoxComponent
     * @type {?}
     */
    InfoBoxComponent.prototype.Modal;
    /**
     * Holds the marker that is the host of the info window (if available)
     *
     * \@memberof InfoBoxComponent
     * @type {?}
     */
    InfoBoxComponent.prototype.HostMarker;
    /**
     * Determines visibility of infobox
     *
     * \@memberof InfoBoxComponent
     * @type {?}
     */
    InfoBoxComponent.prototype.Visible;
    /**
     * Horizontal offset of the infobox from the host marker lat/long or the sepecified coordinates.
     *
     * \@memberof InfoBoxComponent
     * @type {?}
     */
    InfoBoxComponent.prototype.xOffset;
    /**
     * Vertical offset for the infobox from the host marker lat/long or the specified coordinates.
     *
     * \@memberof InfoBoxComponent
     * @type {?}
     */
    InfoBoxComponent.prototype.yOffset;
    /**
     * Determines if other info boxes should be closed before opening this one
     *
     * \@memberof InfoBoxComponent
     * @type {?}
     */
    InfoBoxComponent.prototype.CloseInfoBoxesOnOpen;
    /**
     * Emits an event when the info window is closed.
     *
     * \@memberof InfoBoxComponent
     * @type {?}
     */
    InfoBoxComponent.prototype.InfoBoxClose;
    /** @type {?} */
    InfoBoxComponent.prototype._infoBoxService;
}

//# sourceMappingURL=data:application/json;base64,